/**
 * @module CoreServicesModule
 **/
/** GeocodingService **/
"use strict";
var core_1 = require('@angular/core');
var Observable_1 = require('rxjs/Observable');
var GeocodingService = (function () {
    function GeocodingService() {
        this.geocoder = new google.maps.Geocoder();
    }
    /**
     * Reverse geocoding by location.
     *
     * Wraps the Google Maps API geocoding service into an observable.
     *
     * @param latLng Location
     * @return An observable of GeocoderResult
     */
    GeocodingService.prototype.geocode = function (latLng) {
        var _this = this;
        return new Observable_1.Observable(function (observer) {
            // Invokes geocode method of Google Maps API geocoding.
            _this.geocoder.geocode({ 'location': latLng }, (
            // Results & status.
            // Results & status.
            function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    observer.next(results);
                    observer.complete();
                }
                else {
                    console.log('Geocoding service: geocoder failed due to: ' + status);
                    observer.error(status);
                }
            }));
        });
    };
    /**
     * Geocoding services.
     *
     * Wraps the Google Maps API geocoding service into an observable.
     *
     * @param address The address to be searched
     * @return An observable of GeocoderResult
     */
    GeocodingService.prototype.codeAddress = function (address) {
        var _this = this;
        return new Observable_1.Observable(function (observer) {
            // Invokes geocode method of Google Maps API geocoding.
            _this.geocoder.geocode({ 'address': address }, (
            // Results & status.
            // Results & status.
            function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    observer.next(results);
                    observer.complete();
                }
                else {
                    console.log('Geocoding service: geocode was not successful for the following reason: ' + status);
                    observer.error(status);
                }
            }));
        });
    };
    GeocodingService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], GeocodingService);
    return GeocodingService;
}());
exports.GeocodingService = GeocodingService;
//# sourceMappingURL=geocoding.service.js.map