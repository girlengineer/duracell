import { Http } from '@angular/http';
import { Router } from '@angular/router';
import { AppConfigService } from '../services';
/**
 * The SessionTimeoutHandler interface must be implemented by the component that will be passed as a parameter in the start method.
 * @class SessionTimeoutHandler
 **/
export interface SessionTimeoutHandler {
    /**
      * The handleSessionTimeout method will be executed once the session timeout is done.
      *
      * @method handleSessionTimeout
      * @public
      * @returns {void}
   */
    handleSessionTimeout(): void;
}
/**
 * The SessionService provides session management related behavior.
 *
 * Declare sessionService object {SessionServiceConfig} in Application Config
 * <pre>
 * sessionService: {
 *   sessionTimeout: number; #Specify the number of seconds for sessionTimeout
 *   keepAliveInterval: number; #Specify the interval used to send keep alive request if there is user activity in the browser.
 *   sessionKeepAliveUrl: string; #Specifiy the keep alive URL where to send the keep alive request.
 *   sessionCookies: string[]; #Specify the names of the cookies related to the session of the user.
 * }
 *</pre>
 * @class SessionService
 * @constructor
 **/
export declare class SessionService {
    private _appConfigService;
    private _http;
    private _router;
    private _keepAliveIntervalHandler;
    private _customTimeoutHandler;
    private _keepAliveIntervalObservable;
    private _keepAliveIntervalObserver;
    private _keepAliveIntervalSubscription;
    private _sessionTimeoutObservable;
    private _sessionTimeoutObserver;
    private _sessionTimeoutSubscription;
    private activityFlag;
    constructor(_appConfigService: AppConfigService, _http: Http, _router: Router);
    /**
       * The start method is used to start the session timer. It recevies a SessionTimeoutHandler. When the session timeout occurs, it will execute the handleSessionTimeout method of SessionTimeoutHandler object.
       *
       * @method start
       * @public
       * @param customTimeoutHandler {SessionTimeoutHandler} When the session timeout occurs, the handleSessionTimouet method of this object is called.
       * @returns {void}
    */
    start(customTimeoutHandler: SessionTimeoutHandler): void;
    /**
       * The renew method sends a keep alive request to the url specified in the sessionKeepAliveUrl property of the SessionServiceConfig object in the Application Config.
       * After the keep alive request is sent, it will also restart the session timeout timer.
       * @method start
       * @public
       * @param customTimeoutHandler {SessionTimeoutHandler} When the session timeout occurs, the handleSessionTimouet method of this object is called.
       * @returns {void}
    */
    renew(): void;
    /**
       * The hasSessionCookies method returns true if all the cookies declared in the sessionCookies array property in the Application Config are present in the browser. If at least one of the cookies is not present it returns false.
       * @method hasSessionCookies
       * @public
       * @returns {boolean}
    */
    hasSessionCookies(): boolean;
}
