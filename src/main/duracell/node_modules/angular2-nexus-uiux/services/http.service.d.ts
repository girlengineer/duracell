import { Http, Response } from '@angular/http';
import { Observable } from 'rxjs/Rx';
import { ContentService } from '../services/content.service';
import { AppConfigService } from '../services';
import { SessionStorageService } from 'ng2-webstorage';
/**
 * The HttpServiceGlobalErrorHandler interface must be implemented by the component that will handle the http global errors.
 * @class HttpServiceGlobalErrorHandler
 **/
export interface HttpServiceGlobalErrorHandler {
    /**
      * The handleError method will be executed once a http error is returned from the server.
      *
      * @method handleError
      * @public
      * @param error {Response | any} The response object returned from the server.
      * @returns {void}
   */
    handleError(error: Response | any): any;
}
/**
 * The HttpService provides http request behavior.
 *
 * Declare httpService object {HttpServiceConfig} in Application Config
 * <pre>
 * httpService: {
 *  defaultHeaders: [
 *  {
 *    headerName: string;
 *    headerValue: string;
 *  }
 * ];
 * headersToSendFromResponse: [
 *   {
 *     headerNameInResponse: string;
 *     headerNameToSendInRequest: string;
 *   }
 * ];
 * sendSessionCookieValuesInRequestHeaders: boolean;
 * cookieValuesHeaders: [
 *   {
 *     headerName: string;
 *     headerValue: string;
 *   }
 *  ];
 * }
 *</pre>
 * @class HttpService
 * @constructor
 **/
export declare class HttpService {
    private _contentServices;
    private _http;
    private _appConfigService;
    private _sessionStorage;
    private _customGlobalErrorHandler;
    constructor(_contentServices: ContentService, _http: Http, _appConfigService: AppConfigService, _sessionStorage: SessionStorageService);
    /**
      * The setCustomGlobalErrorHandler method sets the {HttpServiceGlobalErrorHandler} that will handle the http errors.
      *
      * @method setCustomGlobalErrorHandler
      * @public
      * @param globalErrorHandler {HttpServiceGlobalErrorHandler} The global error handler.
      * @returns {void}
   */
    setCustomGlobalErrorHandler(globalErrorHandler: HttpServiceGlobalErrorHandler): void;
    /**
       * The get method is used to send a HTTP GET request.
       * HttpService will add the defaultHeaders from HttpServiceConfig in Application Config.
       * If sendSessionCookieValuesInRequestHeaders in HttpServiceConfig in Application Config is set to true. The HttpService will take create the headers declared in cookieValuesHeaders from HttpServiceConfig. The headerValue will be replaced with cookie values taking "{string}" as the cookie name. This will be used to send the session cookies in the request headers.
       * @method get
       * @public
       * @param url {string} The url path where to send the request. It will appended to the apiServerUrl property from Application Config.
       * @param options {object} Params object to send in the request.
       * @returns {void}
    */
    get(url: string, options?: any): Observable<Response>;
    /**
       * The post method is used to send a HTTP POST request.
       * HttpService will add the defaultHeaders from HttpServiceConfig in Application Config.
       * If sendSessionCookieValuesInRequestHeaders in HttpServiceConfig in Application Config is set to true. The HttpService will take create the headers declared in cookieValuesHeaders from HttpServiceConfig. The headerValue will be replaced with cookie values taking "{string}" as the cookie name. This will be used to send the session cookies in the request headers.
       * @method post
       * @public
       * @param url {string} The url path where to send the request. It will appended to the apiServerUrl property from Application Config.
       * @param body {object} Body object to send in the request.
       * @param options {object} Params object to send in the request.
       * @returns {void}
    */
    post(url: string, body?: any, options?: any): Observable<Response>;
    private getOptions(options?);
    private extractData(res);
    private getErrorHandler();
    private defaultErrorHandler(error);
    private getHeaderValue(headerValueExp);
}
