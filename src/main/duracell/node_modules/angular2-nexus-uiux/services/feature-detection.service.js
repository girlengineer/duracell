/**
 * @module CoreServicesModule
 **/
/** FeatureDetection **/
"use strict";
var core_1 = require('@angular/core');
var services_1 = require('../services');
var services_2 = require('../services');
/**
 * The FeatureDetection
 * @class FeatureDetection
 **/
var FeatureDetection = (function () {
    function FeatureDetection(_http, _appConfigService) {
        this._http = _http;
        this._appConfigService = _appConfigService;
        this._navigator = {};
    }
    /*
    -----------------------------------------------------------------------------------
        [detectFeature(detectionFeature): any {}]
        checks if the particular features are available in the client's machine or not
        call this method as detectFeature("stringYouWantToDetect")
        Currently, we checks for the following features
        CANVAS, LOCALSTORAGE, SESSIONSTORAGE, GEOLOCATION, SVG, WEBSOCKET
    -----------------------------------------------------------------------------------
    */
    FeatureDetection.prototype.detectFeature = function (detectionFeature) {
        switch (detectionFeature.toLowerCase()) {
            case "canvas": {
                return !!document.createElement("canvas").getContext ? true : false;
            }
            case "localstorage": {
                return "localStorage" in window && window["localStorage"] !== null ? true : false;
            }
            case "sessionstorage": {
                return "sessionstorage" in window && window["sessionstorage"] !== null ? true : false;
            }
            case "geolocation": {
                return "geolocation" in navigator ? true : false;
            }
            case "svg": {
                return document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Image", "1.1") ? true : false;
            }
            case "websocket": {
                return typeof (WebSocket) === "function" ? true : false;
            }
            default: {
                return "unknown";
            }
        }
    };
    // Returns either the client is on mobile device or not
    FeatureDetection.prototype.isMobile = function () {
        var isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        return isMobile ? true : false;
    };
    // This will return the iPhone models as an string
    FeatureDetection.prototype.getIPhoneModel = function () {
        if (this.isMobile()) {
            // iPhone 6 Plus
            if ((window.screen.height / window.screen.width == 736 / 414) && (window.devicePixelRatio == 3)) {
                return "iPhone 6 Plus";
            }
            else if ((window.screen.height / window.screen.width == 667 / 375) && (window.devicePixelRatio == 2)) {
                return "iPhone 6";
            }
            else if ((window.screen.height / window.screen.width == 1.775) && (window.devicePixelRatio == 2)) {
                return "iPhone 5, 5C, 5S or 6 (display zoom)";
            }
            else if ((window.screen.height / window.screen.width == 1.5) && (window.devicePixelRatio == 2)) {
                return "iPhone 4 or 4S";
            }
            else if ((window.screen.height / window.screen.width == 1.5) && (window.devicePixelRatio == 1)) {
                return "iPhone 1, 3G or 3GS";
            }
            else {
                return "Not an iPhone";
            }
            ;
        }
        else {
            return "Not a mobile device";
        }
    };
    /*
    -----------------------------------------------------------------------------------
        If no parameters are passed, it will return the entire navigator object
        If called with parameters, it will return the value(s) of that key
        Example of calling with parameters:
        getNavigatorInfo("userAgent"); This will return the userAgent string something like this: "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0"
    -----------------------------------------------------------------------------------
    */
    FeatureDetection.prototype.getNavigatorInfo = function (navigatorType) {
        for (var i in navigator) {
            this._navigator[i] = navigator[i];
        }
        if (navigatorType) {
            return (this._navigator)[navigatorType];
        }
        else {
            return JSON.stringify(this._navigator);
        }
    };
    // This will send the client Info to end point for further processing
    FeatureDetection.prototype.sendClientFeatures = function (url) {
        console.log(this.getNavigatorInfo("vendor"));
        this._http.post(url, this.getNavigatorInfo()).map(function (res) { return res; }).subscribe(function (res) {
            console.log(res);
        });
    };
    FeatureDetection = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [services_2.HttpService, services_1.AppConfigService])
    ], FeatureDetection);
    return FeatureDetection;
}());
exports.FeatureDetection = FeatureDetection;
//# sourceMappingURL=feature-detection.service.js.map