import { AppConfig, SessionServiceConfig, HttpServiceConfig, ContentServiceConfig } from './app-config.interface';
/**
 * The AppConfigService provides access to the Application Config.
 *
 * @class AppConfigService
 **/
export declare class AppConfigService {
    private _appConfig;
    constructor();
    /**
     * The setAppConfig method sets the {AppConfig} object containing the current configuration.
     * Add the following code in your app.module.ts constructor:
     * <pre>
     *  let appConfig: AppConfig;
     *  if ('production' === ENV) {
     *      appConfig = require('../../config/app-config.prod').config;
     *  } else if ('development' === ENV) {
     *      appConfig = require('../../config/app-config.dev').config;
     *  } else {
     *      appConfig = require('../../config/app-config.test').config;
     *  }
     *  appConfigService.setAppConfig(appConfig);
     * </pre>
     * @method setAppConfig
     * @public
     * @param appConfig {AppConfig} The Application Configuration object.
     * @returns {void}
    */
    setAppConfig(appConfig: AppConfig): void;
    /**
     * The getApiServerUrl method gets the apiServerUrl from the Application Configuration Object.
     *
     * @method getApiServerUrl
     * @public
     * @returns {string} The api server url
    */
    getApiServerUrl(): string;
    /**
      * The getSessionServiceConfig method gets the sessionService from the Application Configuration Object.
      *
      * @method getSessionServiceConfig
      * @public
      * @returns {SessionServiceConfig} The sessionService config object
     */
    getSessionServiceConfig(): SessionServiceConfig;
    /**
     * The getHttpServiceConfig method gets the httpService from the Application Configuration Object.
     *
     * @method getHttpServiceConfig
     * @public
     * @returns {HttpServiceConfig} The httpService config object
    */
    getHttpServiceConfig(): HttpServiceConfig;
    /**
      * The getCustomConfigProp method gets the property value of the property specified by param inside the customConfig object in the Application Configuration Object.
      *
      * @method getCustomConfigProp
      * @public
      * @param prop {string} The property name of the property we want to retrieve the value inside the customConfig object.
      * @returns {any} The property value
     */
    getCustomConfigProp(prop: string): any;
    getContentServiceConfig(): ContentServiceConfig;
}
