/**
 * @module CoreServicesModule
 **/
/** AppConfigService **/
"use strict";
var core_1 = require('@angular/core');
/**
 * The AppConfigService provides access to the Application Config.
 *
 * @class AppConfigService
 **/
var AppConfigService = (function () {
    function AppConfigService() {
    }
    /**
     * The setAppConfig method sets the {AppConfig} object containing the current configuration.
     * Add the following code in your app.module.ts constructor:
     * <pre>
     *  let appConfig: AppConfig;
     *  if ('production' === ENV) {
     *      appConfig = require('../../config/app-config.prod').config;
     *  } else if ('development' === ENV) {
     *      appConfig = require('../../config/app-config.dev').config;
     *  } else {
     *      appConfig = require('../../config/app-config.test').config;
     *  }
     *  appConfigService.setAppConfig(appConfig);
     * </pre>
     * @method setAppConfig
     * @public
     * @param appConfig {AppConfig} The Application Configuration object.
     * @returns {void}
    */
    AppConfigService.prototype.setAppConfig = function (appConfig) {
        this._appConfig = appConfig;
    };
    /**
     * The getApiServerUrl method gets the apiServerUrl from the Application Configuration Object.
     *
     * @method getApiServerUrl
     * @public
     * @returns {string} The api server url
    */
    AppConfigService.prototype.getApiServerUrl = function () {
        return this._appConfig.apiServerUrl;
    };
    /**
      * The getSessionServiceConfig method gets the sessionService from the Application Configuration Object.
      *
      * @method getSessionServiceConfig
      * @public
      * @returns {SessionServiceConfig} The sessionService config object
     */
    AppConfigService.prototype.getSessionServiceConfig = function () {
        return this._appConfig.sessionService;
    };
    /**
     * The getHttpServiceConfig method gets the httpService from the Application Configuration Object.
     *
     * @method getHttpServiceConfig
     * @public
     * @returns {HttpServiceConfig} The httpService config object
    */
    AppConfigService.prototype.getHttpServiceConfig = function () {
        return this._appConfig.httpService;
    };
    /**
      * The getCustomConfigProp method gets the property value of the property specified by param inside the customConfig object in the Application Configuration Object.
      *
      * @method getCustomConfigProp
      * @public
      * @param prop {string} The property name of the property we want to retrieve the value inside the customConfig object.
      * @returns {any} The property value
     */
    AppConfigService.prototype.getCustomConfigProp = function (prop) {
        var customConfig = this._appConfig.customConfig || {};
        return customConfig[prop];
    };
    AppConfigService.prototype.getContentServiceConfig = function () {
        return this._appConfig.contentService;
    };
    AppConfigService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], AppConfigService);
    return AppConfigService;
}());
exports.AppConfigService = AppConfigService;
//# sourceMappingURL=app-config.service.js.map