/**
 * @module CoreServicesModule
 **/
/** ContentService **/
"use strict";
var rxjs_1 = require("rxjs");
var core_1 = require("@angular/core");
var http_1 = require('@angular/http');
var services_1 = require('../services');
/**
 * Created by rg37616 on 11/28/2016.
 */
/**
 * The ContentService
 * @class ContentService
 **/
var ContentService = (function () {
    function ContentService(_http, _appConfigService) {
        this._http = _http;
        this._appConfigService = _appConfigService;
    }
    ContentService.prototype.get = function (contentType, contentId, prop) {
        if (this._currentContent) {
            if (this._currentContent[contentType + '$$' + contentId]) {
                return this._currentContent[contentType + '$$' + contentId][prop];
            }
        }
        return null;
    };
    ContentService.prototype.mergeContentData = function (dynamicData, appConfigContent, bundleName) {
        var _this = this;
        var self = this;
        return this.getStaticData(appConfigContent, bundleName).map(function (staticdata) {
            var data1 = dynamicData[bundleName];
            var data2 = {};
            if (staticdata['content']) {
                data2 = staticdata['content'][bundleName];
            }
            var data3 = _this.mergeRecursive(data1, data2);
            var finalData = _this.mergeDynamcicContentData(data3);
            self._currentContent = finalData;
            return finalData;
        }, function (err) {
            console.log("Error Retrieving Static Data");
        });
    };
    ContentService.prototype.buildStaticServerUrl = function (appConfigContent, bundleName) {
        var completeStaticUrl = this._appConfigService.getContentServiceConfig().staticBaseUrl + "/" + appConfigContent.businessId + "/" + appConfigContent.locale + "/" + bundleName + ".sc";
        return completeStaticUrl;
    };
    ContentService.prototype.getStaticData = function (appConfigContent, bundleName) {
        if (appConfigContent) {
            return this._http.get(this.buildStaticServerUrl(appConfigContent, bundleName)).map(function (res) { return res.json(); });
        }
        else {
            return rxjs_1.Observable.of({});
        }
    };
    ContentService.prototype.mergeRecursive = function (obj1, obj2) {
        //iterate over all the properties in the object which is being consumed
        for (var p in obj2) {
            // Property in destination object set; update its value.
            if (obj2.hasOwnProperty(p) && typeof obj1[p] !== "undefined") {
                this.mergeRecursive(obj1[p], obj2[p]);
            }
            else {
                //We don't have that level in the heirarchy so add it
                obj1[p] = obj2[p];
            }
        }
        return obj1;
    };
    ContentService.prototype.mergeDynamcicContentData = function (dat) {
        var result = {}; // This will be the merged object
        var keys = Object.keys(dat); // Contains keys
        while (keys.length) {
            var i = 1;
            for (; i < keys.length; i++) {
                if (keys[0] == keys[i] + '$$$d') {
                    result[keys[i]] = dat[keys[i]]; // Copy orig
                    for (var j in dat[keys[0]]) {
                        result[keys[i]][j] = dat[keys[0]][j];
                    }
                    keys.splice(i, 1);
                    keys.shift();
                    i = 0;
                    break;
                }
                else if (keys[i] == keys[0] + '$$$d') {
                    result[keys[0]] = dat[keys[0]];
                    for (var j in dat[keys[i]]) {
                        result[keys[0]][j] = dat[keys[i]][j];
                    }
                    keys.splice(i, 1);
                    keys.shift();
                    i = 0;
                    break;
                }
            }
            if (i > 0) {
                result[keys[0]] = dat[keys[0]];
                keys.shift();
            }
        }
        return result;
    };
    ContentService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http, services_1.AppConfigService])
    ], ContentService);
    return ContentService;
}());
exports.ContentService = ContentService;
//# sourceMappingURL=content.service.js.map