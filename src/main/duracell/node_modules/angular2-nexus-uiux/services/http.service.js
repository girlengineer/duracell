/**
 * @module CoreServicesModule
 **/
/** HttpService **/
"use strict";
var core_1 = require('@angular/core');
var http_1 = require('@angular/http');
var Rx_1 = require('rxjs/Rx');
var content_service_1 = require('../services/content.service');
var ng2_cookies_1 = require('ng2-cookies/ng2-cookies');
var services_1 = require('../services');
var ng2_webstorage_1 = require('ng2-webstorage');
/**
 * The HttpService provides http request behavior.
 *
 * Declare httpService object {HttpServiceConfig} in Application Config
 * <pre>
 * httpService: {
 *  defaultHeaders: [
 *  {
 *    headerName: string;
 *    headerValue: string;
 *  }
 * ];
 * headersToSendFromResponse: [
 *   {
 *     headerNameInResponse: string;
 *     headerNameToSendInRequest: string;
 *   }
 * ];
 * sendSessionCookieValuesInRequestHeaders: boolean;
 * cookieValuesHeaders: [
 *   {
 *     headerName: string;
 *     headerValue: string;
 *   }
 *  ];
 * }
 *</pre>
 * @class HttpService
 * @constructor
 **/
var HttpService = (function () {
    function HttpService(_contentServices, _http, _appConfigService, _sessionStorage) {
        this._contentServices = _contentServices;
        this._http = _http;
        this._appConfigService = _appConfigService;
        this._sessionStorage = _sessionStorage;
    }
    /**
      * The setCustomGlobalErrorHandler method sets the {HttpServiceGlobalErrorHandler} that will handle the http errors.
      *
      * @method setCustomGlobalErrorHandler
      * @public
      * @param globalErrorHandler {HttpServiceGlobalErrorHandler} The global error handler.
      * @returns {void}
   */
    HttpService.prototype.setCustomGlobalErrorHandler = function (globalErrorHandler) {
        this._customGlobalErrorHandler = globalErrorHandler;
    };
    /**
       * The get method is used to send a HTTP GET request.
       * HttpService will add the defaultHeaders from HttpServiceConfig in Application Config.
       * If sendSessionCookieValuesInRequestHeaders in HttpServiceConfig in Application Config is set to true. The HttpService will take create the headers declared in cookieValuesHeaders from HttpServiceConfig. The headerValue will be replaced with cookie values taking "{string}" as the cookie name. This will be used to send the session cookies in the request headers.
       * @method get
       * @public
       * @param url {string} The url path where to send the request. It will appended to the apiServerUrl property from Application Config.
       * @param options {object} Params object to send in the request.
       * @returns {void}
    */
    HttpService.prototype.get = function (url, options) {
        var _this = this;
        return this._http.get(this._appConfigService.getApiServerUrl() + url, this.getOptions(options)).flatMap(function (data) { return _this.extractData(data); }).catch(this.getErrorHandler());
    };
    /**
       * The post method is used to send a HTTP POST request.
       * HttpService will add the defaultHeaders from HttpServiceConfig in Application Config.
       * If sendSessionCookieValuesInRequestHeaders in HttpServiceConfig in Application Config is set to true. The HttpService will take create the headers declared in cookieValuesHeaders from HttpServiceConfig. The headerValue will be replaced with cookie values taking "{string}" as the cookie name. This will be used to send the session cookies in the request headers.
       * @method post
       * @public
       * @param url {string} The url path where to send the request. It will appended to the apiServerUrl property from Application Config.
       * @param body {object} Body object to send in the request.
       * @param options {object} Params object to send in the request.
       * @returns {void}
    */
    HttpService.prototype.post = function (url, body, options) {
        var _this = this;
        return this._http.post(this._appConfigService.getApiServerUrl() + url, body, this.getOptions(options)).flatMap(function (data) { return _this.extractData(data); }).catch(this.getErrorHandler());
    };
    ;
    HttpService.prototype.getOptions = function (options) {
        options = options || {};
        var params = new http_1.URLSearchParams();
        for (var param in options.params) {
            params.set(param, options.params[param]);
        }
        //Set defaultHeaders
        var headersObj = this._appConfigService.getHttpServiceConfig().defaultHeaders;
        Object.assign(headersObj, options.headers);
        //Set headers taking the values from cookies
        if (this._appConfigService.getHttpServiceConfig().sendSessionCookieValuesInRequestHeaders) {
            for (var _i = 0, _a = this._appConfigService.getHttpServiceConfig().cookieValuesHeaders; _i < _a.length; _i++) {
                var cookieValueHeader = _a[_i];
                headersObj[cookieValueHeader.headerName] = this.getHeaderValue(cookieValueHeader.headerValue);
            }
        }
        //Set headers taking the values from previous response headers
        if (this._appConfigService.getHttpServiceConfig().headersToSendFromPreviousResponse) {
            for (var _b = 0, _c = this._appConfigService.getHttpServiceConfig().headersToSendFromPreviousResponse; _b < _c.length; _b++) {
                var headerInfo = _c[_b];
                var value = this._sessionStorage.retrieve(headerInfo.headerNameInPreviousResponse);
                if (value) {
                    headersObj[headerInfo.headerNameToSendInRequest] = value;
                }
            }
            ;
        }
        var headers = new http_1.Headers(headersObj);
        var requestOptions = new http_1.RequestOptions({
            headers: headers,
            search: params
        });
        return requestOptions;
    };
    HttpService.prototype.extractData = function (res) {
        var body = res.json();
        //Save headers in session storage
        if (this._appConfigService.getHttpServiceConfig().headersToSendFromPreviousResponse) {
            for (var _i = 0, _a = this._appConfigService.getHttpServiceConfig().headersToSendFromPreviousResponse; _i < _a.length; _i++) {
                var headerInfo = _a[_i];
                if (res.headers.has(headerInfo.headerNameInPreviousResponse)) {
                    this._sessionStorage.store(headerInfo.headerNameInPreviousResponse, res.headers.get(headerInfo.headerNameInPreviousResponse));
                }
            }
            ;
        }
        //Merge content data
        if (this._appConfigService.getContentServiceConfig()) {
            if (body['content']) {
                var dynamicContent = body['content'];
                var bundleName = Object.keys(dynamicContent)[0];
                var appConfigContent = null;
                if (this._appConfigService.getContentServiceConfig().bundles && this._appConfigService.getContentServiceConfig().bundles[bundleName]) {
                    appConfigContent = this._appConfigService.getContentServiceConfig().bundles[bundleName];
                }
                return this._contentServices.mergeContentData(dynamicContent, appConfigContent, bundleName).map(function (contentData) {
                    body['content'] = contentData;
                    return body;
                });
            }
        }
        return Rx_1.Observable.of(body || {});
    };
    HttpService.prototype.getErrorHandler = function () {
        if (this._customGlobalErrorHandler) {
            return this._customGlobalErrorHandler.handleError;
        }
        else {
            return this.defaultErrorHandler;
        }
    };
    HttpService.prototype.defaultErrorHandler = function (error) {
        var errMsg;
        if (error instanceof http_1.Response) {
            var body = error.json() || '';
            var err = body.error || JSON.stringify(body);
            errMsg = "HttpService: " + error.status + " - " + (error.statusText || '') + " " + err;
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(errMsg);
        return Rx_1.Observable.throw(errMsg);
    };
    HttpService.prototype.getHeaderValue = function (headerValueExp) {
        var headerValue = headerValueExp;
        var cookieNameArr = headerValueExp.match("\{.*?\}");
        if (cookieNameArr) {
            var cookieName = cookieNameArr[0].replace('{', '').replace('}', '');
            var cookieNameRegex = new RegExp('{' + cookieName + '}', 'g');
            headerValue = headerValueExp.replace(cookieNameRegex, ng2_cookies_1.Cookie.get(cookieName));
        }
        return headerValue;
    };
    HttpService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [content_service_1.ContentService, http_1.Http, services_1.AppConfigService, ng2_webstorage_1.SessionStorageService])
    ], HttpService);
    return HttpService;
}());
exports.HttpService = HttpService;
//# sourceMappingURL=http.service.js.map