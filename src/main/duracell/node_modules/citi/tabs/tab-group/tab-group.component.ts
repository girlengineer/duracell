import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';
import { TabComponent } from '../tab/tab.component';

/**
 * @Component: Tab-group
 * @Description: A wrapper for displaying individual tab panels
 */

@Component({
  selector: 'citi-tab-group',
  template: require('./tab-group.component.html')
})
export class TabGroupComponent implements OnInit {

  /**
   * @Property: id
   * @Description: ID attribute of the outer element
   * @Type: String
   */
  @Input() id;

  /**
   * @Property: activeTab
   * @Description: Which tab is initially visible (default is 1, the first tab)
   * @Type: Number
   */
  @Input() activeTab;

  /**
    * @Event: tabChanged
    * @Description: This event that is fired when a tab activates; returns the index of the active tab (first tab is 1)
    * @Return: Number
    */
  @Output() tabChanged: EventEmitter<any> = new EventEmitter();

  private tabs: TabComponent[] = [];
  public defaultTab: number;

  addTab(tab:TabComponent) {
    this.tabs.push(tab);
    return this.tabs.length;
  }
  countTabs() {
    return this.tabs.length;
  }

  constructor() {}
  
  ngOnInit() {
    this.defaultTab = this.activeTab ? Number.parseInt(this.activeTab,10) : 1;
    this.selectTab(this.tabs[this.defaultTab - 1], null);
  }
  
  selectTab(tab: TabComponent, event) {
    if (event) {
      event.preventDefault();
    }
    this.tabs.forEach((tab) => {
      tab.isExpanded = false;
    });
    tab.isExpanded = true;

    // Event emitter
    this.tabChanged.emit(tab.tabIndex);
  }

  public currentTab() {
    this.tabs.forEach((tab) => {
      if (tab.isExpanded) {
        return tab.tabIndex;
      }
    });
    return -1;
  }

}
