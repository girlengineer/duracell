import createNumberMask from 'text-mask-addons/dist/createNumberMask.js'

export class InputSizeCss {
    public static get FullBody(): string {return 'col-lg-12 col-md-12 col-sm-12 col-xs-12 '; }
    public static get Large(): string {return 'col-md-8 col-sm-12 '; }
    public static get Medium(): string {return 'col-md-6 col-sm-9 col-xs-12 '; }
    public static get Small(): string {return 'col-md-4 col-sm-6 col-xs-12 '; }
    public static get Success(): string {return 'validation-input-success '; }
    public static get InputGroup(): string {return 'input-group '; }
    public static get InputGroupFocus(): string {return 'focus-group '; }
    public static get TextRight(): string {return 'text-right '; }
}

export class InputSize {
    public static get FullBody(): string {return 'fullBody'; }
    public static get Large(): string {return 'large'; }
    public static get Medium(): string {return 'medium'; }
    public static get Small(): string {return 'small'; }
    public static get XSmall(): string {return 'xsmall'; }
}

export class InputOffsetCss {
    public static get Large(): string {return 'col-lg-offset-'; }
    public static get Medium(): string {return 'col-md-offset-'; }
    public static get Small(): string {return 'col-sm-offset-'; }
    public static get XSmall(): string {return 'col-xs-offset-'; }
}

export class MaskTypes {
    public static get phoneMask(): any[] { return ['(', /[1-9]/, /\d/, /\d/, ')', ' ', /\d/, /\d/, /\d/, '-', /\d/, /\d/, /\d/, /\d/]; }
    public static get dateMask():any[] { return [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/]; }
    public static get zipcodeMask():any[] { return [/[1-9]/, /\d/, /\d/, /\d/, /\d/]; }
    public static get ssnMask():any[]{ return [/\d/, /\d/, /\d/, "-", /\d/, /\d/, "-", /\d/, /\d/, /\d/, /\d/] }
    public static get dollarMask():any[] {
        return createNumberMask({
            allowDecimal: true
        });
    }
}

export function createSSNPipe(conformedValue:string, config:any) {
    let newString = '';
    for(var i=0; i<conformedValue.length; i++) {
        if(i < 5) {
            newString += '*';
        } else {
            newString += conformedValue[i];
        }
    }

    return {
        newString
    }
}


export class JavascriptMethods {
    public static closestByClass(el, clazz): any {
        while (!el.classList.contains(clazz)) {
            el = el.parentNode;
            if (!el) {
                return null;
            }
        }
        return el;
    }
    public static hasClass(el, className) {
        if (el.classList) {
            return el.classList.contains(className);
        } else {
            return !!el.className.match(new RegExp('(\\s|^)' + className + '(\\s|$)'));
        }
    }

    public static addClass(el, className) {
        if (el.classList) {
            el.classList.add(className);
        } else if (!JavascriptMethods.hasClass(el, className)) {
            el.className += ' ' + className;
        }
    }

    public static removeClass(el, className) {
        if (el.classList) {
            el.classList.remove(className);
        } else if (JavascriptMethods.hasClass(el, className)) {
            let reg = new RegExp('(\\s|^)' + className + '(\\s|$)');
            el.className = el.className.replace(reg, ' ');
        }
    }

    public static addStyle(el, styleMap) {
        for(let style in styleMap){
            el.style[style] = styleMap[style];
        }
    }

   public static isInteger(value){
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    }

    public static isString(value){
      return typeof value === 'string';
    }

    public static isArray(value){
      return typeof value !== 'undefined' && value.constructor === Array;
    }

    public static isSpecified (value) {
        switch (typeof value) {
            case 'number':
                return !isNaN(value);
            case 'object':
               return Object.keys(value).length !== 0;
            case 'string':
                return value.trim() !== '';
            default:
                return false;
        }
    }
}