import { Directive, ElementRef, Input, OnInit, isDevMode } from '@angular/core';

@Directive({ selector: '[inputMask]' })
export class InputMaskDirective implements OnInit {

    constructor(private input: ElementRef) {}

    // Holds the masking array
    mask: any;

    // Gets the mask
    getMask: Function = function(){

        // Get type of mask passed
        var maskType = typeof this.inputMask;

        switch (maskType) {

            // If the passed mask is an array
            case "array":

                // If there is not already a mask
                if (!this.mask){

                    // Get the array
                    var mask = this.inputMask;

                    // If the mask is valid
                    if ( this.isValidMask(mask) ){

                        // Set the mask
                        this.mask = mask;
                    }
                }

                break;

            case "function":

                // Get the value
                var value = this.input.nativeElement.value;

                // Check if we get a value from the passed function
                var mask = this.inputMask();

                // If the mask function returns another function
                if (mask && typeof mask === "function" && value && value.length){
                    this.mask = mask(value);
                }

                // If the mask function returns an array
                if ( mask && typeof mask === "object" && this.isValidMask(mask) ){

                    // If it is set the mask
                    this.mask = mask;
                } else if ( !mask && isDevMode ){

                    // Warn the developer that no mask was provided
                    console.warn("INPUTMASK: no array provided - masking disabled");    
                }

                break;
        }
    }

    // Validates a mask array
    isValidMask: Function = function(mask){

        // If the mask array is defined and has at least one object in it
        if ( mask && mask.length ){

            // If the mask is valid or not
            var isValid = true;

            // Loop over the mask array
            for ( var i=0, j=mask.length; i<j; i++ ){

                // Get the current value
                var value = mask[i];

                // Check if it is valid (either a string or regular expression)
                if ( 
                    (
                        // Is not a regular expression
                        !(value instanceof RegExp) 

                        // And is not a string
                        && !(typeof value === "string")
                    )
                    ||
                    (
                        // Is a string
                        typeof value === "string"

                        // And is longer than one character
                        && value.length > 1
                    )
                ) {

                    // If it isn't invalidate the response
                    isValid = false;

                    if ( isDevMode ){
                        if (
                            // Is not a regular expression
                            !(value instanceof RegExp) 

                            // And is not a string
                            && !(typeof value === "string")
                        ) {
                            var errorType = "invalid type in array"
                        } else if (
                            // Is a string
                            typeof value === "string"

                            // And is longer than one character
                            && value.length > 1
                        ) {
                            var errorType = "long string in array"
                        };

                        // Warn the developer of the problem
                        console.error("INPUTMASK: " + errorType + " - masking disabled");
                    }
                }
            };
            
            // If it is valid
            if ( isValid ){

                // return true
                return true;
            } else {

                // Otherwise return false
                return false;
            }
        } else {

            // Otherwise return false
            return false;
        }
    }

    // Applies the mask
    applyMask: Function = function(){

        // Make sure we have the latest mask
        this.getMask();

        // Get the value
        var value = this.input.nativeElement.value;

        // If there is a value that isn't blank and we have a mask to work with
        if ( value && value.length && this.mask ){

            // loop over the mask array
            for ( var i=0, j=this.mask.length; i<j; i++){

                // Get the mask for this character
                var character = value.charAt(i);

                // Get the regex
                var match = this.mask[i];

                // Will hold the regex
                var regex: RegExp;

                // Get the regex
                if ( typeof match === "string" && match.length === 1 ){
                   regex = new RegExp("\\" + match);
                } else if (typeof match === "string" && match.length > 1) {
                    // If the match was an invalid string, ignore it
                    i++;
                    break;
                } else {
                   regex = match;
                }

                // If we got a valid character and a regex and the character doesn't match the regex
                if ( character && character.length && regex && !character.match(regex) ) {

                    // If the match type was a string and the character didn't match the regex
                    if ( typeof match === "string" && !character.match(regex) ){

                        // Assume the string is required and add it to the value
                        value = [value.slice(0, i), match, value.slice(i)].join('');

                        // Increment j so the loop will complete
                        j++;
                    } else {

                        // Otherwise remove the offending character from the string
                        var temp = value.split('');
                        temp.splice(i, 1);
                        value = temp.join('')

                        // And increment the loop values so the loop will complete
                        i--;
                        j--;
                    }
                }
            }
            
            // Remove extra characters
            if (value.length > this.mask.length){
                value = value.substr(0, this.mask.length);
            }

            // Update the value accordingly
            this.input.nativeElement.value = value;
        }
    };

    ngOnInit(){

        // Get initial mask
        setTimeout( ()=>{
            this.getMask();

            console.log(this.getMask());

            // If we got a valid mask
            if ( this.mask ){

                // Bind to the inputs input event
                this.input.nativeElement.oninput = () => {
                    
                    // And apply the mask accordingly
                    this.applyMask();
                };

                // Do the initial application of the mask
                setTimeout( () => {
                    this.applyMask();
                }, 0 );    
            }
        }, 0)
    }

    @Input() inputMask: any;
}