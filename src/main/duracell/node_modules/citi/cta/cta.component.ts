import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, isDevMode } from '@angular/core';
import { CTASettings } from "./cta.component.settings";

/**
 * @Component: Click to Action
 * @Description: This component generates citi related click to actions like links, buttons, and their
 * various states.
 */
@Component({
    selector: 'citi-cta',
    template: require('./cta.component.html')
})

export class CTAComponent {

    // Reference to the button
    @ViewChild("button") button: ElementRef;

    // CTASettings object to hold the settings for the CTA
    settings: CTASettings = new CTASettings;

    // Classes for buttons
    buttonClasses: any = {
        "primary": "btn btn-primary",
        "secondary": "chevron-link",
        "tertiary": "btn btn-link",
        "icon": "btn-link btn-icon",
        "arrowRight": "arrow-btn next",
        "arrowLeft": "arrow-btn prev",
        "large": "large",
        "small": "small",
        "bold": "bold",
        "disabled": "disabled"
    }
    

    // Sets the CTASetting values with DDL compliance checking
    updateSettings: Function = ( _settings: any ) => {

        //////////////////
        // BUTTON VALUE //
        //////////////////
        if ( "value" in _settings ){

            // Set the value of the button
            this.settings.value = _settings.value;

        }

        ////////////////////
        // DISABLED STATE //
        ////////////////////
        if ( 'disabled' in _settings ){

            // If there is no arrow defined
            // DDL: Buttons with arrows cannot be disabled
            if ( !this.settings.hasArrow ){

                // If the button type is primary
                // DDL: Only primary buttons can be disabled
                if ( this.settings.type.match("primary")){

                    // Set the button to the passed value
                    this.settings.disabled = _settings.disabled;

                } else {

                    if (this.settings.isDisabled){

                        // Otherwise enable the button
                        this.settings.disabled = "";

                        // Timeout allows change cycle to complete before setting new value
                        setTimeout(() => {

                            // Let the parent component know it is enabled
                            this.disabledChange.emit(false);
                        }, 0);

                        // Let the developer know why the button was not disabled
                        if ( isDevMode ){
                            console.error("Only primary buttons can be disabled");
                        }
                    }
                }
            } else {

                if (this.settings.isDisabled){

                    // Otherwise enable the button
                    this.settings.disabled = "";

                    // Timeout allows change cycle to complete before setting new value
                    setTimeout(() => {

                        // Let the parent component know it is enabled
                        this.disabledChange.emit(false);
                    }, 0);

                    // Let the developer know why the button was not disabled
                    if ( isDevMode ){
                        console.error("Buttons with arrows cannot be disabled");
                    }
                }
            }
        }

        /////////////////
        // BUTTON TYPE //
        /////////////////
        if ( "type" in _settings ) {

            if (_settings.type === "primary"){
                this.settings.type = this.buttonClasses.primary;
            } else if (_settings.type === "secondary"){
                this.settings.type = this.buttonClasses.secondary;
            } else if (_settings.type == "tertiary"){
                this.settings.type = this.buttonClasses.tertiary;
            } else if (_settings.type == "icon"){
                this.settings.type = this.buttonClasses.icon;
            } else {
                console.error("Valid button types are primary, secondary, tertiary, and icon");
            }

        }

        /////////////////
        // BUTTON SIZE //
        /////////////////
        if ( "size" in _settings ) {

            // If the button size is primary
            if ( this.settings.type.match("primary") ){
                // If there is no arrow, or there is an arrow and the size is not small
                if ( !this.settings.arrow || this.settings.arrow && _settings.size !== "small" ){

                    // Set the size
                    this.settings.size = _settings.size;
                } else {

                    // Otherwise if the dev mode is enabled
                    if ( isDevMode ){

                        // Let the user know they cant do that
                        console.error("Small button size cannot be used in conjunction with button arrow");
                    }
                }
            } else {
                console.error("Button sizes can only be applied to primary button");
            }
        }


        ///////////////////////
        // BUTTON ARROW TYPE //
        ///////////////////////
        if ( "arrow" in _settings ) {

            // If the cta type is primary
            if ( this.settings.type.match("primary") ){
                
                // If the button size is not small
                if (this.settings.size !== "small"){

                    // Set the arrow property
                    if ( _settings.arrow == "left" ) {
                        this.settings.arrow = this.buttonClasses.arrowLeft;
                        console.log(this.settings.arrow);
                    } else if ( _settings.arrow == "right" ){
                        this.settings.arrow = this.buttonClasses.arrowRight;
                    }

                } else {

                    // Otherwise if dev mode is enabled
                    if ( isDevMode ){

                        // Let the user know they cant do that
                        console.error("Arrows cannot be added to a small size button");
                    }
                }
            } else {

                // Otherwise if dev mode is enabled
                if ( isDevMode ){

                    // Tell the user they cant do that
                    console.error("Arrows can only be added to primary buttons")
                }
            }
        }

        ///////////////////
        // BUTTON TARGET //
        ///////////////////
        if ( "target" in _settings ) {

            // Set the target
            this.settings.target = _settings.target;
        }
    }

    /**
     * @Property: bold
     * @Description: Makes the CTA bold. 
     * @Type: Empty Attribute
     */
    @Input()
    set bold ( bold: any ) {
        this.settings.bold = "bold";
    }

    /**
     * @Property: target
     * @Description: The value of the target attribute for the CTA.
     * @Type: String
     */
    @Input()
    set target ( target: string ){
        if ( typeof target !== "undefined"){
            this.settings.target = target;
        }
    }

    /**
     * @Property: href
     * @Description: The value of the href attribute for the CTA.
     * @Type: String
     */
    @Input()
    set href ( href: string ) {
        if (typeof href !== "undefined"){
            this.settings.href = href;
        }
    }

    /**
     * @Property: value
     * @Description: The text value of the CTA.
     * @Type: String
     */
    @Input()
    set value ( value: string ){

        // If the value is defined
        if ( typeof value !== "undefined" ){

            this.updateSettings({"value": value});
        }
    }

    /**
     * @Property: disabled
     * @Description: Shows the disabled state of the CTA
     * @Type: Boolean
     * @Two-way: true
     */
    @Input()
    set disabled( disabled: String | Boolean ){

        // If disabled is defined
        if ( typeof disabled !== "undefined" ){

            if ( disabled === "true" || disabled === true ){
                this.settings.isDisabled = true;
                this.updateSettings({"disabled": "disabled"})
            } else if ( disabled === "false" || disabled === false ) {
                this.settings.isDisabled = false;
                this.updateSettings({"disabled": ""});
            };
        }
    }

    @Output() disabledChange = new EventEmitter();

    /**
     * @Property: type
     * @Description: Determines the type of CTA to be displayed.  Valid options include
     * primary, secondary, tertiary, or icon.
     * @Type: String
     */
    @Input()
    set type ( type: string ){
        
        // If the type is defined
        if ( typeof type !== "undefined" ){

            this.updateSettings({"type": type});

        }
    }

    /**
     * @Property: size
     * @Description: Determines the size of CTA to be displayed.  Valid options include
     * large and small.  Can only be applied to primary buttons. 
     * @Type: String
     */
    @Input()
    set size ( size: string ) {

        // If the sizes is defined
        if ( typeof size !== "undefined" ){

            this.updateSettings({"size": size});

        }
    }

    /**
     * @Property: arrow
     * @Description: Determines whether the CTA should have an arrow or not.  Valid options
     * include left or right.  Arrows can only be given to primary buttons and buttons that are not small.
     * @Type: String
     */
    @Input()
    set arrow( arrow: string ){

        // If arrow is defined
        if ( typeof arrow !== "undefined" ) {

            this.settings.hasArrow = true;
            this.updateSettings({"arrow": arrow});

        }
    }

    /**
     * @Property: buttonType
     * @Description: This is the type property for the button 
     * @Type: String
     */
    @Input()
    set buttonType( type: string ){
         if (typeof type !== "undefined"){
             this.settings.buttonType = type;
         }
    }
}