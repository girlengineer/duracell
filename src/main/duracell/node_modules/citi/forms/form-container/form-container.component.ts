import { Component, Input } from '@angular/core';
import { FormContainerSettings } from './form-container.settings';

/**
 * @Component: Form Container
 * @Description: This is the container for forms and provides common funcionality for all DDL based forms.
 * from Bootstrap.
*/
@Component({
  selector: 'citi-form-container',
  template: require('./form-container.component.html')
})
export class FormContainerComponent {
  constructor() { }

  /**
   * @Property: requiredText
   * @Description: The text to display at the top of the form indicating that all form elements
   * are required or not.
   * @Type: String
  */
  @Input()
  set requiredText ( requiredText: string ){
      // If the value is defined
      if ( typeof requiredText !== "undefined" ){
          this.updateSettings({"requiredText": requiredText});
      }
  }
  /**
   * @Property: pageError
   * @Description: The error to display at the top of the form.
   * @Type: String
  */
  @Input()
  set pageError ( pageError: string ){
      // If the value is defined
      if ( typeof pageError !== "undefined" ){
          this.updateSettings({"pageError": pageError});
      }
  }
  /**
   * @Property: steps
   * @Description: The steps that will be passed to the form progress bar.
   * @Type: String[]
  */
  @Input()
  set steps ( steps: string ){
      // If the value is defined
      if ( typeof steps !== "undefined" ){
          this.updateSettings({"steps": steps});
      }
  }
  /**
   * @Property: currentStep
   * @Description: The step to show in the active state for the form progress bar.
   * @Type: Number
  */
  @Input()
  set currentStep ( currentStep: string ){
      // If the value is defined
      if ( typeof currentStep !== "undefined" ){
          this.updateSettings({"currentStep": currentStep});
      }
  }
  /**
   * @Property: formHeader
   * @Description: The main header for the form.
   * @Type: String
  */
  @Input()
  set formHeader ( formHeader: string ){
      // If the value is defined
      if ( typeof formHeader !== "undefined" ){
          this.updateSettings({"formHeader": formHeader});
      }
  }
  /**
   * @Property: formName
   * @Description: The name attribute for the form element.
   * @Type: String
  */
  @Input()
  set formName ( formName: string ){
      // If the value is defined
      if ( typeof formName !== "undefined" ){
          this.updateSettings({"formName": formName});
      }
  }

  // SimpleLayoutSettings object to hold the settings for the CTA
  settings: FormContainerSettings = new FormContainerSettings;

  // Sets the SimpleLayoutSettings values with DDL compliance checking
  updateSettings: Function = ( _settings: any ) => {
      if ( "requiredText" in _settings ) {
        this.settings.requiredText = _settings.requiredText;
      }      
      if ( "pageError" in _settings ) {
        this.settings.pageError = _settings.pageError;
      }      
      if ( "steps" in _settings ) {
        this.settings.steps = _settings.steps;
      }      
      if ( "currentStep" in _settings ) {
        this.settings.currentStep = _settings.currentStep;
      }     
      if ( "formHeader" in _settings ) {
        this.settings.formHeader = _settings.formHeader;
      }     
      if ( "formName" in _settings ) {
        this.settings.formName = _settings.formName;
      }
  }
}
