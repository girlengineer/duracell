import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef, isDevMode } from '@angular/core';
import { MaskingService } from '../../utility/services/masking.service';

import { DateModel, CalendarDate } from './date-input.component.classes';
import * as moment from 'moment';

import { ValidationService } from "../validation/validation.service";

/**
 * @Component: Date Input
 * @Description: Creates a date input (simple or calendar)
*/
@Component({
    selector: 'citi-date-input',
    template: require('./date-input.component.html'),
    styleUrls: ['./date-input.component.css'],
    providers: [MaskingService, ValidationService]
})

export class DateInputComponent implements OnInit {

    // Constructor
    constructor(private maskingService: MaskingService, private validationService: ValidationService){};

    // Reference to the input
    @ViewChild("input") input: ElementRef;

    // Placeholder
    placeholder = "Date dd/mm/yyyy";

    // Formatting text
    formattingText = "dd/mm/yyyy";

    // The size of the input
    inputSize: string = "large";

    // Date mask
    dateMask: any[] = this.maskingService.getDateMask();

    // Date String Mask
    dateStringMask: any[] = [/./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./, /./];

    // The mask for the input
    inputMask: any[] = this.dateMask;

    // Classes to be applied to the wrapper
    wrapperClasses: any = {
        "has-value": false,
        "is-focused": false,
        "form-group": true,
        "datepicker-container": true,
        "u-is-unselectable": true
    };

    // Classes to be applied to the input
    inputClasses: any = {
        "form-control": true,
        "formatted": false,
        "validation-input-danger": false
    };

    // Classes for the sizes of input, also applied to the wrapper
    sizes: any = {
        large: 'col-md-8 col-sm-12',
        medium: 'col-md-6 col-sm-9 col-xs-12',
        small: 'col-md-4 col-sm-6 col-xs-12',
        xsmall: 'col-md-2 col-sm-3 col-xs-6',
        none: ''
    };

    // Month names for simple date input type
    monthNames: string[] = ["January","Februrary","March","April","May","June","July","August","September","October","November","December"];

    // Day Names for the simple date input type
    dayNames: string[] = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

    // Whether or not the dropdown has an error
    private error: boolean = false;

    // Whether or not the dropdown is required
    private isRequired: boolean = false;


    opened: boolean;
    currentDate: moment.Moment;
    days: CalendarDate[];
    years: number[];
    yearPicker: boolean;

    // Gets the date suffix for the date in the simple date input
    getDateSuffix: Function = function(date){
        if ( date > 3 && date < 21) return "th";
        switch ( date % 10 ){
            case 1: return "st";
            case 2: return "nd";
            case 3: return "rd";
            default: return "th";
        }
    }

    // Moves focus to the input
    focusInput: Function = function(){
        this.input.nativeElement.focus();
    }

    // On focus
    onFocus: Function = function () {

        // Set the focused class
        this.wrapperClasses['is-focused'] = true;
    };

    getMask: Function = (value) => {
        return this.inputMask;
    };

    // On Blur
    onBlur: Function = function () {

        // Set the focused class
        this.wrapperClasses['is-focused'] = false;

        // Get the current value
        var value = this.input.nativeElement.value;

        // If there is a value and it is exactly 10 characters long (full date)
        if ( value && value.length === 10 ){

            // Get all of the date information to build the string
            var date = new Date(value);
            
            var day = this.dayNames[date.getDay()];
            var month = this.monthNames[date.getMonth()];
            var dateNum = date.getDate();
            var dateSuffix = this.getDateSuffix(dateNum);
            var year = date.getFullYear();

            // Build the string
            var dateString = day + " " + month + " " + dateNum + dateSuffix + ", " + year;
            
            // Set the input mask so the date can display
            this.inputMask = this.dateStringMask;
            
            // Update the value
            if(date.toString() == 'Invalid Date') {
                this.value = "";
                this.wrapperClasses["has-value"] = false;
                this.error = true;
                this.inputClasses["validation-input-danger"] = true;    
                this.errorMessage = "Invalid date";
            } else {
                this.value = dateString;
            }
            
        } else {
            //reset the input if not enough characters
            this.value = "";
            this.wrapperClasses["has-value"] = false;
            // If the input is required and there is no value
            if ( this.isRequired && ( !this.value || this.value == "undefined" ) ){        
                // Let the input know there is an error
                this.error = true;
                this.inputClasses["validation-input-danger"] = true;            
                this.errorMessage = "Input is required";
            }
        }

        

    };


    // Returns the value of the input on key up
    onInput: Function = function () {

        // Set the has-value class
        this.value.length
            ? this.wrapperClasses["has-value"] = true
            : this.wrapperClasses["has-value"] = false;

        // Set the mask
        this.inputMask = this.dateMask

        // Report the change
        this.valueChange.emit(this.value);

        // If the input is required and there is no value
        if ( this.isRequired && ( !this.value || this.value == "undefined" ) ){
        
            // Let input input know there is an error
            this.error = true;
            this.inputClasses["validation-input-danger"] = true;

        } else if ( this.error && this.value && this.value != "undefined" ){

            // Clear the error
            this.error = false;
            this.inputClasses["validation-input-danger"] = false;
        }
    };

    //validate input
    validate: Function = function() {

        // Get the current value
        var value = this.input.nativeElement.value;

        // If there is a value and it is exactly 10 characters long (full date)
        if ( value && value.length === 10 ){

            // Get all of the date information to build the string
            var date = new Date(value);
            
            var day = this.dayNames[date.getDay()];
            var month = this.monthNames[date.getMonth()];
            var dateNum = date.getDate();
            var dateSuffix = this.getDateSuffix(dateNum);
            var year = date.getFullYear();

            // Build the string
            var dateString = day + " " + month + " " + dateNum + dateSuffix + ", " + year;
            
            // Set the input mask so the date can display
            this.inputMask = this.dateStringMask;
            
            // Update the value
            if(date.toString() == 'Invalid Date') {
                this.value = "";
                this.wrapperClasses["has-value"] = false;
                this.error = true;
                this.inputClasses["validation-input-danger"] = true;    
                this.errorMessage = "Invalid date";
            } else {
                this.value = dateString;
            }
            
        } else {
            //reset the input if not enough characters
            this.value = "";
            this.wrapperClasses["has-value"] = false;
            // If the input is required and there is no value
            if ( this.isRequired && ( !this.value || this.value == "undefined" ) ){        
                // Let the input know there is an error
                this.error = true;
                this.inputClasses["validation-input-danger"] = true;            
                this.errorMessage = "Input is required";
            }
        }


        if(this.error) {
            this.validationService.addError({
                'error_type': 'required',
                'input_type': 'text',
                'error_message': this.errorMessage,
                'input_name': this.name
            });
        }
    };

    ngOnInit(){
        this.validationService.validateNow.subscribe(() => {
            this.validate();
        });
    };

    /**
      * @Property: idStr 
      * @Description: This defines the id of the input.
      * @Type: String
    */
    @Input() idStr: string;

    /**
      * @Property: name 
      * @Description: This defines the name of the input
      * @Type: String
    */
    @Input() name: string;

    /**
      * @Property: label 
      * @Description: This defines the label text of the input
      * @Type: String
    */
    @Input() label: string;

    /**
      * @Property: value 
      * @Description: This defines the value of the input. Can be two-way bound through [(value)]="myValueVar"
      * @Type: Any
    */
    @Input() value: string;

    /**
      * @Event: valueChange
      * @Description: This event that is fired when the value of the input changes. Can be bound to with (valueChange)="myFunction($event)"
      * @Return: Object
    */
    @Output() valueChange = new EventEmitter();

    /**
      * @Property: size 
      * @Description: This defines the size of the input, which changes the bootstrap classes.
      * @Type: String ('large', 'medium', 'small', 'xsmall', 'none'), defaults to large.
    */
    @Input() 
    set size( size: string) {

        // Define the valid sizes
        var validSizes: string[] = [ "large", "medium", "small", "xsmall", "none" ];

        // If there is a size and it is valid
        if (size && validSizes.indexOf(size) !== -1){

            // Set the input size
            this.inputSize = size;
        } else if ( isDevMode ){
            console.error("CITI-INPUT - SIZE: Caught '" + size + "'. Valid sizes are: " + validSizes);
        }
    };

    /**
      * @Property: tooltipTitle 
      * @Description: This defines the title of the input tooltip
      * @Type: String
    */
    @Input() tooltipTitle: string;

    /**
      * @Property: tooltipTitle 
      * @Description: This defines the body text of the input tooltip
      * @Type: String
    */
    @Input() tooltipBody: string;

    /**
      * @Property: datepicker 
      * @Description: This defines if the component has a datepicker icon and popup or not
      * @Type: Boolean
    */
    @Input() datepicker: boolean = false;

    /**
      * @Property: viewFormat 
      * @Description: This defines the format of the date
      * @Type: String
    */
    @Input() viewFormat: string;

    /**
      * @Property: prePopulateDate 
      * @Description: This defines the prepoluated date
      * @Type: String
    */
    @Input() prePopulateDate: string;

    /**
      * @Property: required 
      * @Description: whether the dropdown is required or not
      * @Type: boolean 
    */
    @Input()
    set required ( required: boolean | string ){
        if ( required == true || required == "true" ){
        this.isRequired = true;
        }
    }

    /**
     * @Property: errorMessage 
    * @Description: error message to be displayed when no value is selected
    * @Type: string 
    */
    @Input() errorMessage: string;
}