import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { DropdownService } from "./dropdown-service/dropdown.service";

/**
 * @Component: Dropdown
 * @Description: This is the dropdown component and is used to create reusable dropdown field
 * from Bootstrap.
*/
@Component({
  selector: 'citi-dropdown',
  template: require('./dropdown.component.html'),
  providers: [ DropdownService ]
})
export class DropdownComponent implements OnInit {

  constructor(private dropdownService: DropdownService){}

  // Strings for the different sizes of dropdown
  private sizeClasses: Object = {
    large: 'col-md-8 col-sm-12',
    medium: 'col-md-6 col-sm-9 col-xs-12',
    small: 'col-md-4 col-sm-6 col-xs-12',
    xsmall: 'col-md-2 col-sm-3 col-xs-6'
  }

  // Classes to be applied to the dropdown
  private classes: any = {
    focus: '',
    size: ''
  }

  // Value of the dropdown
  private selectedValue: string;

  // Array to hold the options as they are added
  private options: any[] = [];

  // Whether or not the dropdown is hidden
  private hidden: boolean = false;

  // Whether or not the dropdown has an error
  private error: boolean = false;

  // Whether the dropdown should have auto focus or not
  private hasAutoFocus: boolean = false;

  // Whether or not the dropdown is required
  private isRequired: boolean = false;

  // Whether or not the dropdown has a tooltip
  private dropdownHasTooltip: boolean = false;

  // On Focus
  onFocus: Function = function(){

    // Add the is-focused class
    this.classes.focus = "is-focused";
  }

  // On Blur
  onBlur: Function = function(){

    // If the dropdown is required and there is no selected value
    if ( this.isRequired && ( !this.selectedValue || this.selectedValue == "undefined" ) ){
      
      // Let the dropdown know there is an error
      this.error = true;
    }

    // Remove the is-focused class
    this.classes.focus = '';
  }

  // On Change
  onDropdownChange: Function = function(){

    // If the dropdown is required and there is no selected value
    if ( this.isRequired && ( !this.selectedValue || this.selectedValue == "undefined" ) ){
      
      // Let the dropdown know there is an error
      this.error = true;

    } else if ( this.error && this.selectedValue && this.selectedValue != "undefined" ){

      // Clear the error
      this.error = false;
    }

    // If there is a change function
    if (this.change){

      // Call it and pass the currently selected value
      this.change.emit(this.selectedValue);
    }
  }

  // OnInit
  ngOnInit(){

    // Set the appropriate size class
    this.classes.size = this.sizeClasses[this.size];
    
    // Listen for options to be added
    this.dropdownService.optionAdded.subscribe( option => {
      
      // Add the option to the options array
      this.options.push(option);

      // If the option should be selected
      if (option.isSelected){

        // Set the selected value to this options value
        // Note that if multiple options are set as selected, 
        // the last set as selected will be selected
        this.selectedValue = option.value;

        // Call on change to update parent component
        this.onDropdownChange()
      }
    })
  }

  /**
  * @Property: change 
  * @Description: takes a function to be called when the value of the dropdown is change.
  * @Type: Function
  */
  @Output() change: EventEmitter<any> = new EventEmitter();

  /**
  * @Property: idStr
  * @Description: id for the dropdown
  * @Type: string 
  */
  @Input() idStr: string;

  /**
  * @Property: name 
  * @Description: name for the dropdown
  * @Type: string 
  */
  @Input() name: string;

  /**
  * @Property: size 
  * @Description: size for the dropdown (large, medium, small, xsmall)
  * @Type: string 
  */
  @Input() size: string = "large";

  /**
  * @Property: label 
  * @Description: label for the dropdown
  * @Type: string 
  */
  @Input() label: string;

  /**
  * @Property: hidden 
  * @Description: whether the dropdown is hidden or not
  * @Type: boolean 
  */
  @Input()
  set isHidden ( hidden: boolean | string ){
    if (hidden == true || hidden == "true"){
      this.isHidden = true;
    }
  }

  /**
  * @Property: required 
  * @Description: whether the dropdown is required or not
  * @Type: boolean 
  */
  @Input()
  set required ( required: boolean | string ){
    if ( required == true || required == "true" ){
      this.isRequired = true;
    }
  }
  /**
  * @Property: autofocus 
  * @Description: whether the dropdown should be focused automatically on page load
  * @Type: boolean 
  */
  @Input()
  set autofocus ( autofocus: boolean | string ){
    if ( autofocus == true || autofocus == "true" ){
      this.hasAutoFocus = true;
    }
  }

  /**
  * @Property: errorMessage 
  * @Description: error message to be displayed when no value is selected
  * @Type: string 
  */
  @Input() errorMessage: string;

  /**
  * @Property: hasTooltip 
  * @Description: whether the dropdown has a tooltip or not
  * @Type: boolean 
  */
  @Input()
  set hasTooltip ( tooltip: boolean | string ){
    if (tooltip == true || tooltip == "true"){
      this.dropdownHasTooltip = true;
    }
  }

  /**
  * @Property: tooltipTitle 
  * @Description: title for the dropdown tooltip
  * @Type: string 
  */
  @Input() tooltipTitle: string;

  /**
  * @Property: tooltipBody 
  * @Description: body text for the dropdown tooltip
  * @Type: string 
  */
  @Input() tooltipBody: string;

  /**
  * @Property: tooltipPosition 
  * @Description: Position for the dropdown tooltip (top, bottom, left, right, auto)
  * @Type: string 
  */
  @Input() tooltipPosition: string = "auto";
}
