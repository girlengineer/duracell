import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef, isDevMode } from '@angular/core';
import { MaskingService } from '../../utility/services/masking.service';

/**
 * @Component: Input
 * @Description: This is the input component and is used to generate text inputs
*/
@Component({
    selector: 'citi-input',
    template: require('./input.component.html'),
    styles: [ require("./input.component.scss") ],
    providers: [MaskingService]
})

export class InputComponent implements OnInit {

    // Constructor
    constructor(private maskingService: MaskingService){};

    // Reference to the input
    @ViewChild("input") input: ElementRef;

    // Reference to the value of the input
    inputValue: string;

    // The size of the input
    inputSize: string = "large";

    // The type of the input
    inputType: string = "standard";

    // The mask type for the input
    inputMask: string = "none";

    // The actual mask array for masking the input
    inputMaskArray: any[];

    // If the input is required
    isRequired: boolean = false;

    // Classes to be applied to the wrapper
    wrapperClasses: any = {
        "has-value": false,
        "is-focused": false,
        "form-group": true
    };

    // Classes for the sizes of input, also applied to the wrapper
    sizes: any = {
        large: 'col-md-8 col-sm-12',
        medium: 'col-md-6 col-sm-9 col-xs-12',
        small: 'col-md-4 col-sm-6 col-xs-12',
        xsmall: 'col-md-2 col-sm-3 col-xs-6',
        none: ''
    };

    // Classes to be applied to the input group
    groupClasses: any = {
        "tooltip-input-group": false,
        "input-group": false,
        "combo-group": false,
        "focus-group": false
    };

    // Classes to be applied to the input
    inputClasses: any = {
        "form-control": true,
        "formatted": false
    };

    // Moves focus to the input
    focusInput: Function = function(){
        this.input.nativeElement.focus();
    }

    // On focus
    onFocus: Function = function () {

        // Set the focused class
        this.wrapperClasses['is-focused'] = true;
    };

    getMask: Function = (value) => {

        return this.inputMaskArray;
    };

    // On Blur
    onBlur: Function = function () {

        // Set the focused class
        this.wrapperClasses['is-focused'] = false;
    };

    // Returns the value of the input on key up
    onInput: Function = function () {

        // Set the has-value class
        this.value.length
            ? this.wrapperClasses["has-value"] = true
            : this.wrapperClasses["has-value"] = false;

        // Report the change
        this.valueChange.emit(this.value);
    };

    // OnInit
    ngOnInit() {}

    /**
      * @Property: idStr 
      * @Description: This defines the id of the input.
      * @Type: String
    */
    @Input() idStr: string;

    /**
      * @Property: name 
      * @Description: This defines the name of the input
      * @Type: String
    */
    @Input() name: string;

    /**
      * @Property: label 
      * @Description: This defines the label text of the input
      * @Type: String
    */
    @Input() label: string;

    /**
      * @Property: value 
      * @Description: This defines the value of the input. Can be two-way bound through [(value)]="myValueVar"
      * @Type: Any
    */
    @Input() value: string;

    /**
      * @Event: valueChange
      * @Description: This event that is fired when the value of the input changes. Can be bound to with (valueChange)="myFunction($event)"
      * @Return: Object
    */
    @Output() valueChange = new EventEmitter();

    /**
      * @Property: placeHolderText 
      * @Description: This defines the placeHolderText of the input.
      * @Type: String
    */
    @Input() placeholder: string;

    /**
      * @Property: type 
      * @Description: This defines the type of the input, which changes which kind of input is displayed.
      * @Type: String ('standard', 'password', 'dateSimple', 'email', 'url', 'phoneNumber', 'phoneCountry', 'phoneArea', 'readOnly', 'ssn'), defaults to standard.
    */
    @Input()
    set type ( type: string ){

        // Define the valid types
        var validTypes: string[] = ['standard', 'password', 'email', 'url', 'phoneNumber', 'phoneCountry', 'phoneArea', 'readOnly', 'ssn'];

        // If there is a type and it is valid
        if ( type && validTypes.indexOf(type) !== -1){

            // Set the input type
            this.inputType = type;

            // Get the correct mask
            this.mask = this.maskingService.getMask(type);

        } else if (isDevMode){
            console.error("CITI-INPUT - TYPE: Caught '" + type + "'. Valid types are: " + validTypes)
        }
    }

    /**
      * @Property: size 
      * @Description: This defines the size of the input, which changes the bootstrap classes.
      * @Type: String ('large', 'medium', 'small', 'xsmall', 'none'), defaults to large.
    */
    @Input() 
    set size( size: string) {

        // Define the valid sizes
        var validSizes: string[] = [ "large", "medium", "small", "xsmall", "none" ];

        // If there is a size and it is valid
        if (size && validSizes.indexOf(size) !== -1){

            // Set the input size
            this.inputSize = size;
        } else if ( isDevMode ){
            console.error("CITI-INPUT - SIZE: Caught '" + size + "'. Valid sizes are: " + validSizes);
        }
    };

    /**
      * @Property: mask 
      * @Description: This defines the mask of the input, which changes the input text masking on character input.
      * @Type: String ('none', 'phone', 'date', 'zipcode', 'dollar', 'email'), defaults to none.
    */
    @Input()
    set mask ( mask: string ){

        // Define valid mask types
        var validMasks: string[] = ['none', 'phone', 'zipcode', 'dollar', 'email', 'ssn'];

        // If there is a mask and it is a valid mask
        if (mask && validMasks.indexOf(mask) !== -1){

            // If the mask type is not none (handled internally)
            if (mask !== "none"){

                // Set the input mask type
                this.inputMask = mask;

                // Set the mask array from the masking service
                this.inputMaskArray = this.maskingService.getMask(mask);
            }
        } else if ( mask && validMasks.indexOf(mask) === -1 && isDevMode ){
            console.error("CITI-CTI - MASK: Caught '" + mask +  "'. Valid values are: " + validMasks);
        }
    }

    /**
      * @Property: tooltipTitle 
      * @Description: This defines the title of the input tooltip
      * @Type: String
    */
    @Input() tooltipTitle: string;

    /**
      * @Property: tooltipTitle 
      * @Description: This defines the body text of the input tooltip
      * @Type: String
    */
    @Input() tooltipBody: string;

    /**
      * @Property: currency 
      * @Description: This defines the type of the currency being input
      * @Type: String
    */
    @Input() currency: string = 'dollar';

    /**
      * @Property: maxlength 
      * @Description: This defines the maximum character length of the input
      * @Type: String
    */
    @Input() maxlength: number;

    @Input()
    set required(required: any){
        if ( required === true || required === "true" ){
            this.isRequired = true;
        } else {
            this.isRequired = true;
        }
    }
}
