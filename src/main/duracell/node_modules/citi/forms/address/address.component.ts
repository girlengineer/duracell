import { Component, OnInit, Input } from '@angular/core';

/**
 * @Component: Address
 * @Description: This is the address component and is used to create reusable address
 * from Bootstrap.
*/
@Component({
  selector: 'citi-address',
  template: require('./address.component.html'),
  styles: [ require('./address.component.css') ]
})
export class AddressComponent implements OnInit {
 
  private isHeaderTextRequired:boolean = false;
  /**
    * @Property: idStr 
    * @Description: This defines the id of the address component
    * @Type: string 
   */  
  @Input() idStr:string;
  /**
    * @Property: headerText 
    * @Description: This defines the title of the address component
    * @Type: string 
   */
  @Input() headerText:string;
  /**
    * @Property: streetLabel 
    * @Description: This defines the street label of the address component
    * @Type: string 
   */
  @Input() streetLabel:string;
  /**
    * @Property: aptLabel 
    * @Description: This defines the apt label of the address component
    * @Type: string 
   */
  @Input() aptLabel:string;
  /**
    * @Property: cityLabel 
    * @Description: This defines the city label of the address component
    * @Type: string 
   */
  @Input() cityLabel:string;
  /**
    * @Property: stateLabel 
    * @Description: This defines the state label of the address component
    * @Type: string 
   */
  @Input() stateLabel:string;
  /**
    * @Property: zipCodeLabel 
    * @Description: This defines the zip code label of the address component
    * @Type: string 
   */
  @Input() zipCodeLabel:string;
  /**
    * @Property: homePhoneNoLabel 
    * @Description: This defines the home phone label of the address component
    * @Type: string 
   */
  @Input() homePhoneNoLabel:string;
  /**
    * @Property: workPhoneNoLabel 
    * @Description: This defines the work phone label of the address component
    * @Type: string 
   */
  @Input() workPhoneNoLabel:string;
  /**
    * @Property: stateList 
    * @Description: This defines the state list of the address component
    * @Type: Object (//format will be {"key":"value"},{}) 
   */
  @Input() stateList:Object;
  /**
    * @Property: isStreetHidden 
    * @Description: This defines to hide the street field
    * @Type: boolean 
   */
  @Input() isStreetHidden:boolean = false;
  /**
    * @Property: isAptHidden 
    * @Description: This defines to hide the apt field
    * @Type: boolean 
   */
  @Input() isAptHidden:boolean = false;
  /**
    * @Property: isCityHidden 
    * @Description: This defines to hide the city field
    * @Type: boolean 
   */
  @Input() isCityHidden:boolean = false;
   /**
    * @Property: isStateHidden 
    * @Description: This defines to hide the state field
    * @Type: boolean 
   */
  @Input() isStateHidden:boolean = false;
  /**
    * @Property: isZipcodeHidden 
    * @Description: This defines to hide the zipcode field
    * @Type: boolean 
   */
  @Input() isZipcodeHidden:boolean = false;
  /**
    * @Property: isHomePhoneHidden 
    * @Description: This defines to hide the home phone field
    * @Type: boolean 
   */
  @Input() isHomePhoneHidden:boolean = false;
  /**
    * @Property: isWorkPhoneHidden 
    * @Description: This defines to hide the work home field
    * @Type: boolean 
   */
  @Input() isWorkPhoneHidden:boolean = false;
  /**
    * @Property: streetValue 
    * @Description: This defines the street value
    * @Type: boolean 
   */
  @Input() streetValue:string;
  /**
    * @Property: aptValue 
    * @Description: This defines the apt value
    * @Type: boolean 
   */
  @Input() aptValue:string;
  /**
    * @Property: cityValue 
    * @Description: This defines the city value
    * @Type: boolean 
   */
  @Input() cityValue:string;
  /**
    * @Property: stateValue 
    * @Description: This defines the state value
    * @Type: boolean 
   */
  @Input() stateValue:string;
  /**
    * @Property: zipcodeValue 
    * @Description: This defines the zip cide value
    * @Type: boolean 
   */
  @Input() zipcodeValue:string;
  /**
    * @Property: homephoneValue 
    * @Description: This defines the home phone value
    * @Type: boolean 
   */
  @Input() homephoneValue:string;
  /**
    * @Property: workphoneValue 
    * @Description: This defines the work phone value
    * @Type: boolean 
   */
  @Input() workphoneValue:string;

  constructor() { }

  ngOnInit() {
    if(this.headerText!= ""){
      this.isHeaderTextRequired=true;
    }
  }

}
