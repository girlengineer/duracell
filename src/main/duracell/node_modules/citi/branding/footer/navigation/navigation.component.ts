import { Component, Input } from '@angular/core';
import { Utils } from "../../utils.class";

/**
 * @Component: Footer Navigation
 * @Description: This component generates the navigation and location finder section of the footer.
 */
@Component({
    selector: 'citi-footer-navigation',
    template: require('./navigation.component.html'),
    styles: [ require("./navigation.component.scss") ],
    providers: [ Utils ]
})

export class FooterNavigationComponent {

    constructor( private utils: Utils ){};

    // This variable will cover the actual DOM logic
    config: any;

    // Array that holds if a section should be open or not
    sections: boolean[] = [];

    // Toggles a section to be open or not
    toggleSection: Function = function(index){
        this.sections[index] = !this.sections[index];
    }

    // This function takes the BrandingConfig object and translates it to config DOM
    // This step is not necessary, but keeps the DOM markup semantic and un-bloated
    // and keeps most of the logic in the controller instead of the view
    setNavigationConfig = function( _config: any ){

        // Set up config object to temporarily hold our calculated values
        var navigationConfig: any = {};

        // If there is a valid config and a footer object is defined
        if ( _config && _config.footer ){

            // If the butler bar should be shown
            if ( _config.footer.navigation 
                 && _config.footer.navigation.show
            ){

                // If there is a footer navigation sections array and it has at least one section
                if ( _config.footer.navigation.sections && _config.footer.navigation.sections.length ){
                    
                    // Provide the sections to the config object
                    navigationConfig.sections = _config.footer.navigation.sections;
                }
            }

            // If the butler bar should be shown
            if ( _config.footer.locationFinder 
                 && _config.footer.locationFinder.show
            ){

              if ( _config.footer.locationFinder.action && _config.footer.locationFinder.placeholder ){
                  navigationConfig.show = true;
                  navigationConfig.action = _config.footer.locationFinder.action;
                  navigationConfig.placeholder = _config.footer.locationFinder.placeholder;
              }
            }

            // Set the config for use by the dom (DOM will not show until this is set);
            this.config = navigationConfig;
        }
    }

    /**
     * @Property: brandingConfig
     * @Description: This is a reference to the branding config JSON object retrieved from the branding API.
     * @Type: String
     */
    @Input()
    set brandingConfig( _config: any ){
        if ( _config ){
            this.setNavigationConfig( _config );
        }
    }
}