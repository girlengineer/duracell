import { Component, Input } from '@angular/core';

/**
 * @Component: Footer Sub Navigation
 * @Description: This component generates the secondary navigation, country selector, and feedback section of the footer.
 */
@Component({
    selector: 'citi-footer-sub-navigation',
    template: require('./sub-navigation.component.html'),
    styles: [ require("./sub-navigation.component.scss") ]
})

export class SubNavigationComponent {

    // Holds the currently selected country url
    countryUrl: string;

    // This variable will cover the actual DOM logic
    config: any;

    // Array that holds if a section should be open or not
    sections: boolean[] = [];

    // Toggles a section to be open or not
    toggleSection: Function = function(index){
        this.sections[index] = !this.sections[index];
    }

    // Submits the country finder
    submit: Function = () => {
        window.location.href = this.countryUrl;
    }

    // This function takes the BrandingConfig object and translates it to config DOM
    // This step is not necessary, but keeps the DOM markup semantic and un-bloated
    // and keeps most of the logic in the controller instead of the view
    setNavigationConfig = function( _config: any ){

        // Set up config object to temporarily hold our calculated values
        var subNavigationConfig: any = {};

        // If there is a valid config and a footer object is defined
        if ( _config && _config.footer ){

            // If the butler bar should be shown
            if ( _config.footer.subNavigation 
                 && _config.footer.subNavigation.show
            ){

                // Set the Sub Navigation to show
                subNavigationConfig.showSubNavigation = true;

                // Copyright Logic
                if ( _config.footer.subNavigation.copyright
                     && _config.footer.subNavigation.copyright.show
                     && typeof _config.footer.subNavigation.copyright.text !== "undefined"
                ) {

                    // Set the copyright to show
                    subNavigationConfig.showCopyright = true;

                    // Provide the copyright text
                    subNavigationConfig.copyright = _config.footer.subNavigation.copyright.text;
                }

                // Navigation Logic
                if ( _config.footer.subNavigation.navigation
                     && _config.footer.subNavigation.navigation.show
                     && typeof _config.footer.subNavigation.navigation.links !== "undefined"
                     && _config.footer.subNavigation.navigation.links.length
                ) {

                    // Set the navigation to show
                    subNavigationConfig.showNavigation = true;

                    // Provide the links
                    subNavigationConfig.links = _config.footer.subNavigation.navigation.links;
                }

                // Country Selector Logic
                if ( _config.footer.subNavigation.countrySelector
                     && _config.footer.subNavigation.countrySelector.show
                     && typeof _config.footer.subNavigation.countrySelector.text !== "undefined"
                     && typeof _config.footer.subNavigation.countrySelector.title !== "undefined"
                     && typeof _config.footer.subNavigation.countrySelector.currentCountry !== "undefined"
                     && typeof _config.footer.subNavigation.countrySelector.countries !== "undefined"
                     && _config.footer.subNavigation.countrySelector.countries.length
                ) {

                    // Set the country selector to show
                    subNavigationConfig.showCountrySelector = true;

                    // Provide the title
                    subNavigationConfig.countrySelectorTitle = _config.footer.subNavigation.countrySelector.title;

                    // Provide the text
                    subNavigationConfig.countrySelectorText = _config.footer.subNavigation.countrySelector.text;

                    // Provide the current country
                    subNavigationConfig.country = _config.footer.subNavigation.countrySelector.currentCountry;

                    // Provide the list of countries to choose from
                    subNavigationConfig.countrySelectorCountries = _config.footer.subNavigation.countrySelector.countries;
                
                    // Look for the current country and set it appropriately
                    for (var i=0, j=subNavigationConfig.countrySelectorCountries.length; i<j; i++){
                        
                        // If the current country title in the loop matches the current session country
                        if (subNavigationConfig.countrySelectorCountries[i].title === subNavigationConfig.country){
                            
                            // Set the country url to the appropriate country's url
                            this.countryUrl = subNavigationConfig.countrySelectorCountries[i].url;
                        }
                    }
                }

                // Feedback Logic
                if ( _config.footer.subNavigation.showFeedback ){
                    
                    // Set the feedback button to show
                    subNavigationConfig.showFeedback = true;
                }
            }

            // Set the config for use by the dom (DOM will not show until this is set);
            this.config = subNavigationConfig;
        }
    }

    /**
     * @Property: brandingConfig
     * @Description: This is a reference to the branding config JSON object retrieved from the branding API.
     * @Type: String
     */
    @Input()
    set brandingConfig( _config: any ){
        if ( _config ){
            this.setNavigationConfig( _config );
        }
    }
}