import { Component, Input } from '@angular/core';
import { Utils } from "../../utils.class";

/**
 * @Component: Footer Butler Bar
 * @Description: This component generates the butler bar (logo and social links) in the footer.
 */
@Component({
    selector: 'citi-footer-butler-bar',
    template: require('./butler.component.html'),
    styles: [ require("./butler.component.scss").toString() ],
    providers: [ Utils ]
})

export class FooterButlerBarComponent {

    constructor( private utils: Utils ){};

    onShowChange: Function = function(){
        console.log("Bob");
    }

    // This variable will cover the actual DOM logic
    config: any;

    // This variable defines which modals should be shown
    showModal: any = [];

    // This function takes the BrandingConfig object and translates it to config DOM
    // This step is not necessary, but keeps the DOM markup semantic and un-bloated
    // and keeps most of the logic in the controller instead of the view
    setButlerConfig = function( _config: any ){

        // Set up config object to temporarily hold our calculated values
        var butlerConfig: any = {};

        // If there is a valid config and a footer object is defined
        if ( _config && _config.footer ){

            // If the butler bar should be shown
            if ( _config.footer.butler 
                 && _config.footer.butler.show
            ){

                // Set the butler bar to show
                butlerConfig.showButlerBar = true;

                // If the config contains a logo object and it should be shown
                if ( _config.footer.butler.logo 
                     && _config.footer.butler.logo.show
                     && this.utils.isValidString( _config.footer.butler.logo.url )
                ){

                    // Set the logo to show
                    butlerConfig.showLogo = true;

                    // And provide the url for the logo
                    butlerConfig.logoUrl = _config.footer.butler.logo.url
                }

                // If the config contains a social object and it should be shown
                if ( _config.footer.butler.social && _config.footer.butler.social.show ) {

                    // If there is a valid facebook, twitter, or youtube object
                    if ( this.utils.hasValidSocialObject(_config.footer.butler.social) ) {

                        // Get the keys so we can loop over the object
                        var socialKeys = Object.keys(_config.footer.butler.social);

                        // Loop over the object
                        for (var i=0, j=socialKeys.length; i<j; i++){

                            // Get a reference to the social object
                            var socialObject = _config.footer.butler.social[socialKeys[i]];

                            // If it is a valid social object
                            if (this.utils.isValidSocialObject(socialObject)){

                                // If there is no socialLinks array, add one
                                !butlerConfig.socialLinks ? butlerConfig.socialLinks = [] : false;

                                // Create a reference to a new social object using the old one
                                var _socialObject = socialObject;
                                
                                // Remove show since we don't need it
                                delete socialObject.show;

                                // Add the name
                                socialObject.name = socialKeys[i]

                                // Push it to the array of social links
                                butlerConfig.socialLinks.push(_socialObject);
                            }                            
                        }
                    }
                }
            }

            // Set the config for use by the dom (DOM will not show until this is set);
            this.config = butlerConfig;
        }
    }

    /**
   * @Property: brandingConfig
   * @Description: This is a reference to the branding config JSON object retrieved from the branding API.
   * @Type: String
   */
    @Input()
    set brandingConfig( _config: any ){
        if ( _config ){
            this.setButlerConfig( _config );
        }
    }
}