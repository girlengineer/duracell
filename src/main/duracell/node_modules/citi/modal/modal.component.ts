import { Component, OnInit, Input, Output, EventEmitter, HostListener, ElementRef, ViewChild } from '@angular/core';
import { ModalSettings } from "./modal.component.settings";

/**
 * @Component: Modal
 * @Description: This component generates a modal
 */
@Component({
    selector: 'citi-modal',
    template: require('./modal.component.html'),
    styles: [ require("./modal.component.scss") ]
})

export class ModalComponent implements OnInit {

    // Reference to the modal
    @ViewChild("modal") modal: ElementRef;

    // Reference to the close button
    @ViewChild("closeButton") closeButton: ElementRef;

    // Reference to the primary button
    @ViewChild("primaryButton") primaryButton: any;

    // Reference to the cancel button
    @ViewChild("secondaryButton") secondaryButton: any;

    // Reference to the button that opened the modal
    openButton: Element;

    // Settings Object
    settings: ModalSettings = new ModalSettings;

    // The OnInit function handles capturing tab order
    ngOnInit (){

        // Wait for the lifecycle to finish
        setTimeout(() => {

            // Listen for keydown events on the modal
            this.modal.nativeElement.addEventListener("keydown", (e: any) => {

                // If the key pressed was the tab button
                if ( e.keyCode === 9 && !e.shiftKey ) {

                    // If the currently active element is the last button
                    if (this.secondaryButton.button.nativeElement && document.activeElement == this.secondaryButton.button.nativeElement
                        ||
                        !this.secondaryButton.button.nativeElement && document.activeElement == this.primaryButton.button.nativeElement
                    ){

                        // Prevent default action
                        e.preventDefault();

                        // Put focus on the close button
                        this.closeButton.nativeElement.focus();
                    }
                } else if ( e.keyCode === 9 && e.shiftKey === true ){

                    // If the key pressed was shift+tab
                    // And the currently active button is the close button
                    if ( document.activeElement == this.closeButton.nativeElement ){

                        // Prevent Default
                        e.preventDefault();

                        // Focus the last button
                        if (this.secondaryButton.button.nativeElement){
                            this.secondaryButton.button.nativeElement.focus();
                        } else {
                            this.primaryButton.button.nativeElement.focus();
                        }
                    }
                }
            })
        },0)
    }

    // Function to open/close modal
    toggleModal = function(show: Boolean){

        // If the modal should be shown
        if (show === true){

            // Create a reference to the button that opened the modal
            this.openButton = document.activeElement;

            // Take display:none off the modal
            this.settings.hideModal = false;

            // Wait for hideModal to be set
            setTimeout(() => {

                // Fade in the modal
                this.settings.showModal = true;

                // Focus modal container
                this.modal.nativeElement.focus();

                // Let the parent component know the module is open
                // This is technically redundant since only the parent can
                // set this in the first place, but you know, semantics
                this.showChange.emit(true);
            }, 0)
        } else {

            // Otherwise fade out the modal
            this.settings.showModal = false;

            // Wait for the modal to fade out
            // The delay should match the CSS transition speed
            setTimeout(() => {

                // Set display: none on the modal
                this.settings.hideModal = true;

                // Let the parent know the modal is closed
                this.showChange.emit(false);

                // Focus the button that originally opened the modal
                this.openButton.focus();

            }, 150)
        }
    }

    /**
     * @Property: show
     * @Description: Whether the modal should be open or not
     * @Type: boolean
     */
    @Input()
    set show( _show: boolean ){

        // If _show is defined
        if(typeof _show !== "undefined"){

            // Use the value to toggle the modal
            this.toggleModal(_show);
        }
    }

    @Output() showChange = new EventEmitter();

    /**
     * @Property: title
     * @Description: the title text for the modal
     * @Type: string
     */
    @Input()
    set title( title: string ){
        if (typeof title === "string"){
            this.settings.title = title;
        } else {
            console.error("The value passed to title should be a string");
        }
    }

    /**
     * @Property: primaryButtonUrl
     * @Description: The url for the primary button
     * @Type: string
     */
    @Input()
    set primaryButtonUrl( url: string ){
        if (typeof url === "string"){
            this.settings.primaryButtonUrl = url;
        } else {
            console.error("The value passed to primaryButtonUrl should be a string");
        }
    }

    /**
     * @Property: primaryButtonTarget
     * @Description: The target for the primary button
     * @Type: string
     */
    @Input()
    set primaryButtonTarget( target: "_blank" | "_self" ){
        if (target === "_blank" || target === "_self"){
            this.settings.primaryButtonTarget = target;
        } else {
            console.error("The value passed to primaryButtonTarget should be either '_blank' or '_self'")
        }
    }

    /**
     * @Property: primaryButtonText
     * @Description: The value (display text) of the primary button
     * @Type: string
     */
    @Input()
    set primaryButtonText( text: string ){
        if (typeof text === "string"){
            this.settings.primaryButtonText = text;
        } else {
            console.error("The value passed to primaryButtonText should be a string");
        }
    }

    /**
     * @Property: showCancelButton
     * @Description: Whether or not the cancel button should be shown
     * @Type: boolean
     */
    @Input()
    set showCancelButton( show: "true" | "false" | boolean ){

        if ( show === "true"){
            this.settings.showCancelButton = true;
        } else if ( show === "false" ){
            this.settings.showCancelButton = false;
        } else if ( typeof show === "boolean"){
            this.settings.showCancelButton = show;
        } else [
            console.error("The value passed to showCancelButton should be a boolean")
        ]
    }
    
    /**
     * @Property: cancelButtonText
     * @Description: The value (display text) for the cancel button
     * @Type: string
     */
    @Input()
    set cancelButtonText( text: string ){
        if (typeof text === "string"){
            this.settings.cancelButtonText = text;
        } else {
            console.error("the value passsed to cancelButtonText should be a string")
        }
    }

    /**
     * @Property: primaryButtonClick
     * @Description: A callback function for when the primary button is cleaned. 
     * Call like ([primaryButtonClick]="myFunction"). 
     * Do not add parenthesis.
     * @Type: string
     */
    @Input()
    set primaryButtonClick ( onClick: Function ){
        setTimeout(
            () => {
                this.primaryButton.button.nativeElement.addEventListener("click", (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    onClick();
                })
            }, 0
        )
    }

    @HostListener('window:keydown', ["$event"])
    onEscape(event:any){
        if(this.settings.showModal && event.key === "Escape"){
            this.toggleModal(false);
        }
    }
}