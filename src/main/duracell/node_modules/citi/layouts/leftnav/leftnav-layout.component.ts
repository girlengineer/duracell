import { Component, Input, OnInit, AfterViewChecked, ElementRef } from '@angular/core';
import { LeftNavLayoutSettings } from './leftnav-layout.settings';

/**
 * @Component: Left Nav Layout
 * @Description: This is the layout component that allows you to create a layout with a leftnav content area.
 * This allows developers to transclude their left nav and content areas seperately.  {{ '<' }}div left ...{{ '>' }}...{{ '<' }}/div{{ '>' }}
 * and {{ '<' }}div main ...{{ '>' }}...{{ '<' }}/div{{ '>' }} are the two containers that are used to put the content into each area respectively.
*/
@Component({
  selector: 'citi-leftnav-layout',
  template: require('./leftnav-layout.component.html')
})
export class LeftNavLayoutComponent {

  /**
   * @Property: theme
   * @Description: The theme that should be applied for DDL, light or gray.
   * @Type: String (light | gray)
   */
  @Input()
  set theme ( theme: string ){
      // If the value is defined
      if ( typeof theme !== "undefined" ){
          this.updateSettings({"theme": theme});
      }
  }
  /**
   * @Property: customerType
   * @Description: The customer type for the customer, blue or gold.
   * @Type: String (blue | gold)
   */
  @Input()
  set customerType ( customerType: string ){
      // If the value is defined
      if ( typeof customerType !== "undefined" ){
          this.updateSettings({"customerType": customerType});
      }
  }

  
  private containerClasses: string[] = ['citi-container', 'cbolui-ddl', 'container-fluid'];
  
  constructor() { }

  ngOnInit(): void {
    this.settings.theme == 'light' ? this.containerClasses.push('theme-light') : null;
    this.settings.theme == 'gray' ? this.containerClasses.push('theme-gray') : null;
    this.settings.customerType == 'blue' ? this.containerClasses.push('citi-blue') : null;
    this.settings.customerType == 'gold' ? this.containerClasses.push('citi-gold') : null;
  }
  // SimpleLayoutSettings object to hold the settings for the CTA
  settings: LeftNavLayoutSettings = new LeftNavLayoutSettings;

  // Sets the SimpleLayoutSettings values with DDL compliance checking
  updateSettings: Function = ( _settings: any ) => {
      /* Theme */
      if ( "theme" in _settings ) {
          if (_settings.theme === "light"){
              this.settings.theme = "light";
          } else if (_settings.theme === "gray"){
              this.settings.theme = "gray";
          } else {
              console.error("Valid theme types are light or gray");
          }
      }
      /* Customer Type */
      if ( "customerType" in _settings ) {
          if (_settings.customerType === "blue"){
              this.settings.customerType = "blue";
          } else if (_settings.customerType === "gold"){
              this.settings.customerType = "gold";
          } else {
              console.error("Valid theme types are gold or blue");
          }
      }
  }


  elementsFound: boolean = false;

  ngAfterViewChecked(){

    // THIS IS A GLOBAL FUNCTION TO REMOVE OUTLINE FROM ALL CLICKED BUTTONS AND ANCHORS
    // THIS IS TO COMPLY WITH DDL DESIGN STANDARDS

    // If no elements have been found
    if (!this.elementsFound){
      // MEASURED PERFORMANCE: 0.25ms AVERAGE EXECUTION TIME
      // PLEASE MEASURE ALL CHANGES AGAINST THIS TO ENSURE FAST EXECUTION OF FUNCTION

      // Get all of the buttons in an array of HTML elements
      var buttons: HTMLElement[] = [].slice.call(document.getElementsByTagName("button"));

      // Get all of the anchors in an array of HTML elements
      var anchors: HTMLElement[] = [].slice.call(document.getElementsByTagName("a"));

      // Create an array with all buttons and anchors
      var elements = buttons.concat(anchors);

      // If we found some elements
      if (elements.length){

        // Let the function know we found some elements so it doesnt keep looking
        this.elementsFound = true;

        // Loop over all of our elements (do NOT use a for each here please)
        for (var i=0, j=elements.length; i<j; i++){
          
          // Attach an event listener for mouseup to each of the elements
          elements[i].addEventListener("mouseup", function(){

            // Set the outline to none
            this.style.outline = "none";
          })
        }
      }
    }
  }
}
