import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';
import {Progress} from "./progress";
import {Step} from "./step";
import {Observable, Observer} from "rxjs";
import {JavascriptMethods} from "../utility/utility.classes";

/**
 * @Component: Progress
 * @Description: This is a progress indicator component developed by adapting the DDL specification
 */
@Component({
  selector: 'citi-progress',
  template: require('./progress.component.html'),
  styles: [ require('./progress.component.css') ]
})
export class ProgressComponent implements OnInit {

  /**
   * @Property: steps
   * @Description: A list of steps of a process to be displayed
   * @Type: Array
   */
  @Input() set steps(stepList){
    this.progress.clearAllSteps();
    if(JavascriptMethods.isArray(stepList)){
      var stepListSize = stepList.length;
      if(stepList.length > 0){
        for(var index = 0; index < stepListSize; index++ ){
          this.addNewStep(stepList[index]);
        }
      }
    }
  }

  /**
   * @Property: progress
   * @Description: A progress object
   * @Type: Progress
   */
  @Input() public progress: Progress;

  /**
   * @Event: onActiveStepChanged
   * @Description: Emitted when an active step is altered
   * @Return: Object
   * @Type {EventEmitter}
   */
  @Output() onActiveStepChanged: EventEmitter<Step[]> = new EventEmitter() as EventEmitter<Step[]>;

  /**
   * @Property: currentStep
   * @Description: Sets the active step for the progress indicator with specified index
   * @Param: (Number) - newStepIndex - Index of the active step
   * @Type: Number
   */
  @Input() set currentStep(newStepIndex){
    this.progress.setStepActive(newStepIndex);
  }

  /**
   * @Property: currentStep
   * @Description: Gets the index of the active step for the progress indicator
   * @Type: Number
   */
  get currentStep(){
    return this.progress.currentStepIndex;
  }

  constructor() {
    this.progress = new Progress();
    this.onActiveStepChanged = this.progress.onActiveStepChanged;
  }

  /**
   * @Function: setStepActive
   * @Description: Set a specific step as the active step
   * @Param: (Number) - stepIndex - Index of a step (0-based index)
   * @Return: void
   */
  public setStepActive(stepIndex: number) {
    this.progress.setStepActive(stepIndex);
  }

  /**
   * @Function: addNewStep
   * @Description: Adds new step to the current progress
   * @Param: (String) - text - Displayed text for a step
   * @Param: (Boolean) - isActive - Set the new step to be the active step if set to true
   * @Return: void
   */
  public addNewStep(text?: string, isActive: boolean = false) {
    let newStep = null;
    if (typeof text === 'undefined') {
      let charCode = Math.random() * 26 + 65;
      newStep = new Step(String.fromCharCode(charCode));
    }
    else {
      newStep = new Step(text);
    }
    this.progress.addStep(newStep, null, isActive);
  }

  /**
   * @Function: addNewStepAtIndex
   * @Description: Adds new steps at a specific index, optional to set the new step the active step
   * @Param: (String) - text - Displayed text for a step
   * @Param: (Number) - index - Index indicates position where the new step should be inserted
   * @Param: (Boolean) - isActive - Sets the new step is the active step if set to true
   * @Return: void
   */
  public addNewStepAtIndex(text: string, index: number, isActive: boolean = false) {
    let newStep = new Step(text);
    this.progress.addStep(newStep, index, isActive);
  }

  /**
   * @Function: removeLastStep
   * @Description: Removes the last step in the progress
   * @Return: void
   */
  public removeLastStep() {
    this.progress.removeAStep();
  }

  /**
   * @Function: removeAStep
   * @Description: Removes a step at a specific index
   * @Return: void
   */
  public removeAStep(index: number) {
    this.progress.removeAStep(index);
  }

  /**
   * @Function: removeAStep
   * @Description: Removes a step at a specific index
   * @Return: void
   */
  public removeAStepAtIndex(index: number) {
    if (typeof index === "number" && isFinite(index) && Math.floor(index) === index) {
      this.progress.removeAStep(index);
    }
  }

  /**
   * @Function: subscribeToObservable
   * @Description: Subscribes to a user-defined observable. All callback are called with the progress indicator as
   * the context
   * @Param: (Observable) - observer - Observable provided by developer, should return a string as parameter
   * @Param: (Function) - onNext - Callback for 'Next' event
   * @Param: (Function) - onError - Callback for 'Error' event
   * @Param: (Function) - onComplete - Callback for 'Complete' event
   * @Return: void
   */
  public subscribeToObservable(observer: Observable<string>, onNext: Function, onError?: Function,
                               onComplete?: Function) {
    let functionArray = [];

    if (typeof onNext === 'function') {
      functionArray.push(onNext.bind(this));
    }
    else{
      functionArray.push(null);
    }

    if (typeof onError === 'function') {
      functionArray.push(onError.bind(this));
    }
    else{
      functionArray.push(null);
    }

    if (typeof onComplete === 'function') {
      functionArray.push(onComplete.bind(this));
    }
    else{
      functionArray.push(null);
    }

    return observer.subscribe.apply(observer, functionArray);
  }

  /**
   * @Function: subscribeToObservable
   * @Description: Subscribes to a user-defined observable. All callback are called with the progress indicator as
   * the context
   * @Param: (Observable) - observer - Observable provided by developer, should return a string as parameter
   * @Param: (Function) - onNext - Callback for 'Next' event
   * @Param: (Function) - onError - Callback for 'Error' event
   * @Param: (Function) - onComplete - Callback for 'Complete' event
   * @Return: void
   */
  public getActiveStep(): Step {
    return this.progress.currentStep;
  }

  /**
   * @Function: getCurrentStepIndex
   * @Description: Gets the current step index from the progress indicator
   * @Return: Number
   */
  public getCurrentStepIndex(): number {
    return this.progress.currentStepIndex;
  }

  /**
   * @Function: getNumberOfSteps
   * @Description: Gets number of steps of the progress indicator
   * @Return: Number
   */
  public getNumberOfSteps(): number {
    return this.progress.numberOfSteps;
  }

  /**
   * @Function: getCurrentStep
   * @Description: Gets the current step of a progress indicator
   * @Return: Number
   */
  public getCurrentStep(): Step {
    return this.progress.currentStep;
  }

  /**
   * @Function: hasActiveStep
   * @Description: Checks if a progress indicator has active step
   * @Return: Boolean
   */
  public hasActiveStep(){
    return this.progress.hasActiveStep;
  }

  /**
   * @Function: clearAllSteps
   * @Description: Clears all steps in the content of a progress indicator
   * @Return: void
   */
  public clearAllSteps(){
    this.progress.clearAllSteps();
  }

  /**
   * @Function: setNextNthStepActive
   * @Description: Moves active step to n step forward
   * @Param: (number) - n - Number of steps to move forward
   * @Return: void
   */
  public setNextNthStepActive(n: number){
    if(JavascriptMethods.isInteger(n)){
      this.progress.setStepActive(this.progress.currentStepIndex + n);
    }
    else{
      console.warn('Wrong off-set value provided');
    }
  }

  /**
   * @Function: setNextStepActive
   * @Description: Moves active step to next step
   * @Return: void
   */
  public setNextStepActive(){
    this.setNextNthStepActive(1)
  }

  /**
   * @Function: setPreviousStepActive
   * @Description: Moves active step to previous step
   * @Return: void
   */
  public setPreviousStepActive(){
    this.setPreviousNthStepActive(1);
  }

  /**
   * @Function: setPreviousNthStepActive
   * @Description: Moves active step to n previous step
   * @Param: (number) - n - Number of steps to move back
   * @Return: void
   */
  public setPreviousNthStepActive(n: number){
    this.setNextNthStepActive(n * -1);
  }

  /**
   * @Function: isAtLastStep
   * @Description: Checks if the active step is at the last step in the progress indicator
   * @Return: void
   */
  get isAtLastStep(){
    return this.progress.isAtLastStep;
  }

  /**
   * @Function: isAtFirstStep
   * @Description: Checks if the active step is at the first step in the progress indicator
   * @Return: void
   */
  get isAtFirstStep(){
    return this.progress.isAtFirstStep;
  }

  ngOnInit() {

  }
}
