import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';
import {Observable, Observer} from "rxjs";

/**
 * @Component: Percentage Progress
 * @Description: This component displays percentage progress indicator
 */

@Component({
  selector: 'citi-percentage',
  template: require('./percentageProgress.component.html'),
  styles: [ require('./progress.component.css') ]
})
export class PercentageProgressComponent implements OnInit {

  private _current: number = 0.0;

  private _min: number = 0;

  private _max: number = 100;

  private _description: string = '';

  /**
   * @Event: onPercentageChanged
   * @Description: This event that is fired when the current percentage changed
   * @Return: Array
   */
  @Output() onPercentageChanged: EventEmitter<number[]> = new EventEmitter() as EventEmitter<number[]>;

  /**
   * @Event: onMinValueChanged
   * @Description: This event that is fired when the minimum value changed
   * @Return: Number
   */
  @Output() onMinValueChanged: EventEmitter<number[]> = new EventEmitter() as EventEmitter<number[]>;

  /**
   * @Event: onMaxValueChanged
   * @Description: This event that is fired when the maximum value changed
   * @Return: Number
   */
  @Output() onMaxValueChanged: EventEmitter<number[]> = new EventEmitter() as EventEmitter<number[]>;

  /**
   * @Property: description
   * @Description: Sets the description text for the progress bar
   * @Type: (String) - newDescription - New description text
   */
  @Input() set description(newDescription){
    this._description = newDescription;
  }

  /**
   * @Property: min
   * @Description: Sets the minimum value for the progress bar
   * @Type: (Number) - newValue - New minimum value
   */
  @Input() set min(newValue){
    if(!isNaN(newValue)){
      var values = [];
      values.push(this._min);
      this._min = newValue;
      values.push(this._min);
      this.onMinValueChanged.emit(values);
    }
    else{
      console.warn('Provided value is not a valid number');
    }
  }

  /**
   * @Property: max
   * @Description: Sets the maximum value for the progress bar
   * @Type: Number
   */
  @Input() set max(newValue){
    if(!isNaN(newValue)){
      var values = [];
      values.push(this._max);
      this._max = newValue;
      values.push(this._max);
      this.onMaxValueChanged.emit(values);
    }
    else{
      console.warn('Provided value is not a valid number');
    }
  }

  /**
   * @Property: current
   * @Description: Sets the current value for the progress bar
   * @Type: Number
   */
  @Input() set current(newValue){
    if(!isNaN(newValue)){
      if(newValue >= this._min && newValue <= this._max){
        var values = [];
        values.push(this._current);
        this._current = (newValue/this._max) * 100;
        values.push(this._current);
        this.onPercentageChanged.emit(values);
      }
      else{
        console.warn('Current value is out of specified range');
      }
    }
    else{
      console.warn('Current value is not a valid number');
    }
  }

  private observer: Observer<string>;

  constructor() {}
  /**
   * @Function: subscribeToObservable
   * @Description: Subscribes to a user-defined observable. All callback are called with the progress indicator as
   * the context
   * @Param: (Observable) - observer - Observable provided by developer, should return a string as parameter
   * @Param: (Function) - onNext - Callback for 'Next' event
   * @Param: (Function) - onError - Callback for 'Error' event
   * @Param: (Function) - onComplete - Callback for 'Complete' event
   * @Return: void
   */
  public subscribeToObservable(observer: Observable<string>, onNext: Function, onError?: Function, onComplete?: Function) {
    var functionArray = [];

    if (typeof onNext === 'function') {
      functionArray.push(onNext.bind(this));
    }
    else{
      functionArray.push(null);
    }

    if (typeof onError === 'function') {
      functionArray.push(onError.bind(this));
    }
    else{
      functionArray.push(null);
    }

    if (typeof onComplete === 'function') {
      functionArray.push(onComplete.bind(this));
    }
    else{
      functionArray.push(null);
    }

    return observer.subscribe.apply(observer, functionArray);
  }
  /**
   * @Function: setCurrentValue
   * @Description: Sets the current percentage for the percentage indicator
   * @Param: (Number) - percentage - Percentage to set the bar to.
   * @Return: void
   */
  public setCurrentValue(value){
    if(!isNaN(value)){
      this.current = value;
    }
  }

  /**
   * @Property: description
   * @Description: Description text for displaying
   * @Type: String
   */
  get description(){
    return this._description;
  }

  /**
   * @Function: resetPercentage
   * @Description: Sets the percentage indicator to original value
   * @Return: void
   */
  public resetPercentage(){
    if(isNaN(this._min)){
      this._min = 0;
    }
  }
  ngOnInit() {

  }
}
