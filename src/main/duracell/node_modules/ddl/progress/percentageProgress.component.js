"use strict";
var core_1 = require('@angular/core');
/**
 * @Component: Percentage Progress
 * @Description: This component displays percentage progress indicator
 */
var PercentageProgressComponent = (function () {
    function PercentageProgressComponent() {
        this._current = 0.0;
        this._min = 0;
        this._max = 100;
        this._description = '';
        /**
         * @Event: onPercentageChanged
         * @Description: This event that is fired when the current percentage changed
         * @Return: Array
         */
        this.onPercentageChanged = new core_1.EventEmitter();
        /**
         * @Event: onMinValueChanged
         * @Description: This event that is fired when the minimum value changed
         * @Return: Number
         */
        this.onMinValueChanged = new core_1.EventEmitter();
        /**
         * @Event: onMaxValueChanged
         * @Description: This event that is fired when the maximum value changed
         * @Return: Number
         */
        this.onMaxValueChanged = new core_1.EventEmitter();
    }
    Object.defineProperty(PercentageProgressComponent.prototype, "description", {
        /**
         * @Property: description
         * @Description: Description text for displaying
         * @Type: String
         */
        get: function () {
            return this._description;
        },
        /**
         * @Property: description
         * @Description: Sets the description text for the progress bar
         * @Type: (String) - newDescription - New description text
         */
        set: function (newDescription) {
            this._description = newDescription;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PercentageProgressComponent.prototype, "min", {
        /**
         * @Property: min
         * @Description: Sets the minimum value for the progress bar
         * @Type: (Number) - newValue - New minimum value
         */
        set: function (newValue) {
            if (!isNaN(newValue)) {
                var values = [];
                values.push(this._min);
                this._min = newValue;
                values.push(this._min);
                this.onMinValueChanged.emit(values);
            }
            else {
                console.warn('Provided value is not a valid number');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PercentageProgressComponent.prototype, "max", {
        /**
         * @Property: max
         * @Description: Sets the maximum value for the progress bar
         * @Type: Number
         */
        set: function (newValue) {
            if (!isNaN(newValue)) {
                var values = [];
                values.push(this._max);
                this._max = newValue;
                values.push(this._max);
                this.onMaxValueChanged.emit(values);
            }
            else {
                console.warn('Provided value is not a valid number');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PercentageProgressComponent.prototype, "current", {
        /**
         * @Property: current
         * @Description: Sets the current value for the progress bar
         * @Type: Number
         */
        set: function (newValue) {
            if (!isNaN(newValue)) {
                if (newValue >= this._min && newValue <= this._max) {
                    var values = [];
                    values.push(this._current);
                    this._current = (newValue / this._max) * 100;
                    values.push(this._current);
                    this.onPercentageChanged.emit(values);
                }
                else {
                    console.warn('Current value is out of specified range');
                }
            }
            else {
                console.warn('Current value is not a valid number');
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @Function: subscribeToObservable
     * @Description: Subscribes to a user-defined observable. All callback are called with the progress indicator as
     * the context
     * @Param: (Observable) - observer - Observable provided by developer, should return a string as parameter
     * @Param: (Function) - onNext - Callback for 'Next' event
     * @Param: (Function) - onError - Callback for 'Error' event
     * @Param: (Function) - onComplete - Callback for 'Complete' event
     * @Return: void
     */
    PercentageProgressComponent.prototype.subscribeToObservable = function (observer, onNext, onError, onComplete) {
        var functionArray = [];
        if (typeof onNext === 'function') {
            functionArray.push(onNext.bind(this));
        }
        else {
            functionArray.push(null);
        }
        if (typeof onError === 'function') {
            functionArray.push(onError.bind(this));
        }
        else {
            functionArray.push(null);
        }
        if (typeof onComplete === 'function') {
            functionArray.push(onComplete.bind(this));
        }
        else {
            functionArray.push(null);
        }
        return observer.subscribe.apply(observer, functionArray);
    };
    /**
     * @Function: setCurrentValue
     * @Description: Sets the current percentage for the percentage indicator
     * @Param: (Number) - percentage - Percentage to set the bar to.
     * @Return: void
     */
    PercentageProgressComponent.prototype.setCurrentValue = function (value) {
        if (!isNaN(value)) {
            this.current = value;
        }
    };
    /**
     * @Function: resetPercentage
     * @Description: Sets the percentage indicator to original value
     * @Return: void
     */
    PercentageProgressComponent.prototype.resetPercentage = function () {
        if (isNaN(this._min)) {
            this._min = 0;
        }
    };
    PercentageProgressComponent.prototype.ngOnInit = function () {
    };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], PercentageProgressComponent.prototype, "onPercentageChanged", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], PercentageProgressComponent.prototype, "onMinValueChanged", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], PercentageProgressComponent.prototype, "onMaxValueChanged", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], PercentageProgressComponent.prototype, "description", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], PercentageProgressComponent.prototype, "min", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], PercentageProgressComponent.prototype, "max", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], PercentageProgressComponent.prototype, "current", null);
    PercentageProgressComponent = __decorate([
        core_1.Component({
            selector: 'citi-percentage',
            template: require('./percentageProgress.component.html'),
            styles: [require('./progress.component.css')]
        }), 
        __metadata('design:paramtypes', [])
    ], PercentageProgressComponent);
    return PercentageProgressComponent;
}());
exports.PercentageProgressComponent = PercentageProgressComponent;
//# sourceMappingURL=percentageProgress.component.js.map