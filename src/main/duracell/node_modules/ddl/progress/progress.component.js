"use strict";
var core_1 = require('@angular/core');
var progress_1 = require("./progress");
var step_1 = require("./step");
var utility_classes_1 = require("../utility/utility.classes");
/**
 * @Component: Progress
 * @Section: Forms
 * @Description: This is a progress indicator component developed by adapting the DDL specification
 */
var ProgressComponent = (function () {
    function ProgressComponent() {
        /**
         * @Event: onActiveStepChanged
         * @Description: Emitted when an active step is altered
         * @Return: Object
         * @Type {EventEmitter}
         */
        this.onActiveStepChanged = new core_1.EventEmitter();
        this.progress = new progress_1.Progress();
        this.onActiveStepChanged = this.progress.onActiveStepChanged;
    }
    Object.defineProperty(ProgressComponent.prototype, "steps", {
        /**
         * @Property: steps
         * @Description: A list of steps of a process to be displayed
         * @Type: Array
         */
        set: function (stepList) {
            this.progress.clearAllSteps();
            if (utility_classes_1.JavascriptMethods.isArray(stepList)) {
                var stepListSize = stepList.length;
                if (stepList.length > 0) {
                    for (var index = 0; index < stepListSize; index++) {
                        this.addNewStep(stepList[index]);
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressComponent.prototype, "currentStep", {
        /**
         * @Property: currentStep
         * @Description: Gets the index of the active step for the progress indicator
         * @Type: Number
         */
        get: function () {
            return this.progress.currentStepIndex;
        },
        /**
         * @Property: currentStep
         * @Description: Sets the active step for the progress indicator with specified index
         * @Param: (Number) - newStepIndex - Index of the active step
         * @Type: Number
         */
        set: function (newStepIndex) {
            this.progress.setStepActive(newStepIndex);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @Function: setStepActive
     * @Description: Set a specific step as the active step
     * @Param: (Number) - stepIndex - Index of a step (0-based index)
     * @Return: void
     */
    ProgressComponent.prototype.setStepActive = function (stepIndex) {
        this.progress.setStepActive(stepIndex);
    };
    /**
     * @Function: addNewStep
     * @Description: Adds new step to the current progress
     * @Param: (String) - text - Displayed text for a step
     * @Param: (Boolean) - isActive - Set the new step to be the active step if set to true
     * @Return: void
     */
    ProgressComponent.prototype.addNewStep = function (text, isActive) {
        if (isActive === void 0) { isActive = false; }
        var newStep = null;
        if (typeof text === 'undefined') {
            var charCode = Math.random() * 26 + 65;
            newStep = new step_1.Step(String.fromCharCode(charCode));
        }
        else {
            newStep = new step_1.Step(text);
        }
        this.progress.addStep(newStep, null, isActive);
    };
    /**
     * @Function: addNewStepAtIndex
     * @Description: Adds new steps at a specific index, optional to set the new step the active step
     * @Param: (String) - text - Displayed text for a step
     * @Param: (Number) - index - Index indicates position where the new step should be inserted
     * @Param: (Boolean) - isActive - Sets the new step is the active step if set to true
     * @Return: void
     */
    ProgressComponent.prototype.addNewStepAtIndex = function (text, index, isActive) {
        if (isActive === void 0) { isActive = false; }
        var newStep = new step_1.Step(text);
        this.progress.addStep(newStep, index, isActive);
    };
    /**
     * @Function: removeLastStep
     * @Description: Removes the last step in the progress
     * @Return: void
     */
    ProgressComponent.prototype.removeLastStep = function () {
        this.progress.removeAStep();
    };
    /**
     * @Function: removeAStep
     * @Description: Removes a step at a specific index
     * @Return: void
     */
    ProgressComponent.prototype.removeAStep = function (index) {
        this.progress.removeAStep(index);
    };
    /**
     * @Function: removeAStep
     * @Description: Removes a step at a specific index
     * @Return: void
     */
    ProgressComponent.prototype.removeAStepAtIndex = function (index) {
        if (typeof index === "number" && isFinite(index) && Math.floor(index) === index) {
            this.progress.removeAStep(index);
        }
    };
    /**
     * @Function: subscribeToObservable
     * @Description: Subscribes to a user-defined observable. All callback are called with the progress indicator as
     * the context
     * @Param: (Observable) - observer - Observable provided by developer, should return a string as parameter
     * @Param: (Function) - onNext - Callback for 'Next' event
     * @Param: (Function) - onError - Callback for 'Error' event
     * @Param: (Function) - onComplete - Callback for 'Complete' event
     * @Return: void
     */
    ProgressComponent.prototype.subscribeToObservable = function (observer, onNext, onError, onComplete) {
        var functionArray = [];
        if (typeof onNext === 'function') {
            functionArray.push(onNext.bind(this));
        }
        else {
            functionArray.push(null);
        }
        if (typeof onError === 'function') {
            functionArray.push(onError.bind(this));
        }
        else {
            functionArray.push(null);
        }
        if (typeof onComplete === 'function') {
            functionArray.push(onComplete.bind(this));
        }
        else {
            functionArray.push(null);
        }
        return observer.subscribe.apply(observer, functionArray);
    };
    /**
     * @Function: subscribeToObservable
     * @Description: Subscribes to a user-defined observable. All callback are called with the progress indicator as
     * the context
     * @Param: (Observable) - observer - Observable provided by developer, should return a string as parameter
     * @Param: (Function) - onNext - Callback for 'Next' event
     * @Param: (Function) - onError - Callback for 'Error' event
     * @Param: (Function) - onComplete - Callback for 'Complete' event
     * @Return: void
     */
    ProgressComponent.prototype.getActiveStep = function () {
        return this.progress.currentStep;
    };
    /**
     * @Function: getCurrentStepIndex
     * @Description: Gets the current step index from the progress indicator
     * @Return: Number
     */
    ProgressComponent.prototype.getCurrentStepIndex = function () {
        return this.progress.currentStepIndex;
    };
    /**
     * @Function: getNumberOfSteps
     * @Description: Gets number of steps of the progress indicator
     * @Return: Number
     */
    ProgressComponent.prototype.getNumberOfSteps = function () {
        return this.progress.numberOfSteps;
    };
    /**
     * @Function: getCurrentStep
     * @Description: Gets the current step of a progress indicator
     * @Return: Number
     */
    ProgressComponent.prototype.getCurrentStep = function () {
        return this.progress.currentStep;
    };
    /**
     * @Function: hasActiveStep
     * @Description: Checks if a progress indicator has active step
     * @Return: Boolean
     */
    ProgressComponent.prototype.hasActiveStep = function () {
        return this.progress.hasActiveStep;
    };
    /**
     * @Function: clearAllSteps
     * @Description: Clears all steps in the content of a progress indicator
     * @Return: void
     */
    ProgressComponent.prototype.clearAllSteps = function () {
        this.progress.clearAllSteps();
    };
    /**
     * @Function: setNextNthStepActive
     * @Description: Moves active step to n step forward
     * @Param: (number) - n - Number of steps to move forward
     * @Return: void
     */
    ProgressComponent.prototype.setNextNthStepActive = function (n) {
        if (utility_classes_1.JavascriptMethods.isInteger(n)) {
            this.progress.setStepActive(this.progress.currentStepIndex + n);
        }
        else {
            console.warn('Wrong off-set value provided');
        }
    };
    /**
     * @Function: setNextStepActive
     * @Description: Moves active step to next step
     * @Return: void
     */
    ProgressComponent.prototype.setNextStepActive = function () {
        this.setNextNthStepActive(1);
    };
    /**
     * @Function: setPreviousStepActive
     * @Description: Moves active step to previous step
     * @Return: void
     */
    ProgressComponent.prototype.setPreviousStepActive = function () {
        this.setPreviousNthStepActive(1);
    };
    /**
     * @Function: setPreviousNthStepActive
     * @Description: Moves active step to n previous step
     * @Param: (number) - n - Number of steps to move back
     * @Return: void
     */
    ProgressComponent.prototype.setPreviousNthStepActive = function (n) {
        this.setNextNthStepActive(n * -1);
    };
    Object.defineProperty(ProgressComponent.prototype, "isAtLastStep", {
        /**
         * @Function: isAtLastStep
         * @Description: Checks if the active step is at the last step in the progress indicator
         * @Return: void
         */
        get: function () {
            return this.progress.isAtLastStep;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressComponent.prototype, "isAtFirstStep", {
        /**
         * @Function: isAtFirstStep
         * @Description: Checks if the active step is at the first step in the progress indicator
         * @Return: void
         */
        get: function () {
            return this.progress.isAtFirstStep;
        },
        enumerable: true,
        configurable: true
    });
    ProgressComponent.prototype.ngOnInit = function () {
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], ProgressComponent.prototype, "steps", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', progress_1.Progress)
    ], ProgressComponent.prototype, "progress", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], ProgressComponent.prototype, "onActiveStepChanged", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], ProgressComponent.prototype, "currentStep", null);
    ProgressComponent = __decorate([
        core_1.Component({
            selector: 'citi-progress',
            template: require('./progress.component.html'),
            styles: [require('./progress.component.css')]
        }), 
        __metadata('design:paramtypes', [])
    ], ProgressComponent);
    return ProgressComponent;
}());
exports.ProgressComponent = ProgressComponent;
//# sourceMappingURL=progress.component.js.map