import { OnInit, EventEmitter } from '@angular/core';
import { Observable } from "rxjs";
/**
 * @Component: Percentage Progress
 * @Description: This component displays percentage progress indicator
 */
export declare class PercentageProgressComponent implements OnInit {
    private _current;
    private _min;
    private _max;
    private _description;
    /**
     * @Event: onPercentageChanged
     * @Description: This event that is fired when the current percentage changed
     * @Return: Array
     */
    onPercentageChanged: EventEmitter<number[]>;
    /**
     * @Event: onMinValueChanged
     * @Description: This event that is fired when the minimum value changed
     * @Return: Number
     */
    onMinValueChanged: EventEmitter<number[]>;
    /**
     * @Event: onMaxValueChanged
     * @Description: This event that is fired when the maximum value changed
     * @Return: Number
     */
    onMaxValueChanged: EventEmitter<number[]>;
    /**
     * @Property: description
     * @Description: Description text for displaying
     * @Type: String
     */
    /**
     * @Property: description
     * @Description: Sets the description text for the progress bar
     * @Type: (String) - newDescription - New description text
     */
    description: string;
    /**
     * @Property: min
     * @Description: Sets the minimum value for the progress bar
     * @Type: (Number) - newValue - New minimum value
     */
    min: any;
    /**
     * @Property: max
     * @Description: Sets the maximum value for the progress bar
     * @Type: Number
     */
    max: any;
    /**
     * @Property: current
     * @Description: Sets the current value for the progress bar
     * @Type: Number
     */
    current: any;
    private observer;
    constructor();
    /**
     * @Function: subscribeToObservable
     * @Description: Subscribes to a user-defined observable. All callback are called with the progress indicator as
     * the context
     * @Param: (Observable) - observer - Observable provided by developer, should return a string as parameter
     * @Param: (Function) - onNext - Callback for 'Next' event
     * @Param: (Function) - onError - Callback for 'Error' event
     * @Param: (Function) - onComplete - Callback for 'Complete' event
     * @Return: void
     */
    subscribeToObservable(observer: Observable<string>, onNext: Function, onError?: Function, onComplete?: Function): any;
    /**
     * @Function: setCurrentValue
     * @Description: Sets the current percentage for the percentage indicator
     * @Param: (Number) - percentage - Percentage to set the bar to.
     * @Return: void
     */
    setCurrentValue(value: any): void;
    /**
     * @Function: resetPercentage
     * @Description: Sets the percentage indicator to original value
     * @Return: void
     */
    resetPercentage(): void;
    ngOnInit(): void;
}
