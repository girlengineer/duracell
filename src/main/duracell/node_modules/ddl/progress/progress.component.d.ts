import { OnInit, EventEmitter } from '@angular/core';
import { Progress } from "./progress";
import { Step } from "./step";
import { Observable } from "rxjs";
/**
 * @Component: Progress
 * @Section: Forms
 * @Description: This is a progress indicator component developed by adapting the DDL specification
 */
export declare class ProgressComponent implements OnInit {
    /**
     * @Property: steps
     * @Description: A list of steps of a process to be displayed
     * @Type: Array
     */
    steps: any;
    /**
     * @Property: progress
     * @Description: A progress object
     * @Type: Progress
     */
    progress: Progress;
    /**
     * @Event: onActiveStepChanged
     * @Description: Emitted when an active step is altered
     * @Return: Object
     * @Type {EventEmitter}
     */
    onActiveStepChanged: EventEmitter<Step[]>;
    /**
     * @Property: currentStep
     * @Description: Gets the index of the active step for the progress indicator
     * @Type: Number
     */
    /**
     * @Property: currentStep
     * @Description: Sets the active step for the progress indicator with specified index
     * @Param: (Number) - newStepIndex - Index of the active step
     * @Type: Number
     */
    currentStep: number;
    constructor();
    /**
     * @Function: setStepActive
     * @Description: Set a specific step as the active step
     * @Param: (Number) - stepIndex - Index of a step (0-based index)
     * @Return: void
     */
    setStepActive(stepIndex: number): void;
    /**
     * @Function: addNewStep
     * @Description: Adds new step to the current progress
     * @Param: (String) - text - Displayed text for a step
     * @Param: (Boolean) - isActive - Set the new step to be the active step if set to true
     * @Return: void
     */
    addNewStep(text?: string, isActive?: boolean): void;
    /**
     * @Function: addNewStepAtIndex
     * @Description: Adds new steps at a specific index, optional to set the new step the active step
     * @Param: (String) - text - Displayed text for a step
     * @Param: (Number) - index - Index indicates position where the new step should be inserted
     * @Param: (Boolean) - isActive - Sets the new step is the active step if set to true
     * @Return: void
     */
    addNewStepAtIndex(text: string, index: number, isActive?: boolean): void;
    /**
     * @Function: removeLastStep
     * @Description: Removes the last step in the progress
     * @Return: void
     */
    removeLastStep(): void;
    /**
     * @Function: removeAStep
     * @Description: Removes a step at a specific index
     * @Return: void
     */
    removeAStep(index: number): void;
    /**
     * @Function: removeAStep
     * @Description: Removes a step at a specific index
     * @Return: void
     */
    removeAStepAtIndex(index: number): void;
    /**
     * @Function: subscribeToObservable
     * @Description: Subscribes to a user-defined observable. All callback are called with the progress indicator as
     * the context
     * @Param: (Observable) - observer - Observable provided by developer, should return a string as parameter
     * @Param: (Function) - onNext - Callback for 'Next' event
     * @Param: (Function) - onError - Callback for 'Error' event
     * @Param: (Function) - onComplete - Callback for 'Complete' event
     * @Return: void
     */
    subscribeToObservable(observer: Observable<string>, onNext: Function, onError?: Function, onComplete?: Function): any;
    /**
     * @Function: subscribeToObservable
     * @Description: Subscribes to a user-defined observable. All callback are called with the progress indicator as
     * the context
     * @Param: (Observable) - observer - Observable provided by developer, should return a string as parameter
     * @Param: (Function) - onNext - Callback for 'Next' event
     * @Param: (Function) - onError - Callback for 'Error' event
     * @Param: (Function) - onComplete - Callback for 'Complete' event
     * @Return: void
     */
    getActiveStep(): Step;
    /**
     * @Function: getCurrentStepIndex
     * @Description: Gets the current step index from the progress indicator
     * @Return: Number
     */
    getCurrentStepIndex(): number;
    /**
     * @Function: getNumberOfSteps
     * @Description: Gets number of steps of the progress indicator
     * @Return: Number
     */
    getNumberOfSteps(): number;
    /**
     * @Function: getCurrentStep
     * @Description: Gets the current step of a progress indicator
     * @Return: Number
     */
    getCurrentStep(): Step;
    /**
     * @Function: hasActiveStep
     * @Description: Checks if a progress indicator has active step
     * @Return: Boolean
     */
    hasActiveStep(): boolean;
    /**
     * @Function: clearAllSteps
     * @Description: Clears all steps in the content of a progress indicator
     * @Return: void
     */
    clearAllSteps(): void;
    /**
     * @Function: setNextNthStepActive
     * @Description: Moves active step to n step forward
     * @Param: (number) - n - Number of steps to move forward
     * @Return: void
     */
    setNextNthStepActive(n: number): void;
    /**
     * @Function: setNextStepActive
     * @Description: Moves active step to next step
     * @Return: void
     */
    setNextStepActive(): void;
    /**
     * @Function: setPreviousStepActive
     * @Description: Moves active step to previous step
     * @Return: void
     */
    setPreviousStepActive(): void;
    /**
     * @Function: setPreviousNthStepActive
     * @Description: Moves active step to n previous step
     * @Param: (number) - n - Number of steps to move back
     * @Return: void
     */
    setPreviousNthStepActive(n: number): void;
    /**
     * @Function: isAtLastStep
     * @Description: Checks if the active step is at the last step in the progress indicator
     * @Return: void
     */
    readonly isAtLastStep: boolean;
    /**
     * @Function: isAtFirstStep
     * @Description: Checks if the active step is at the first step in the progress indicator
     * @Return: void
     */
    readonly isAtFirstStep: boolean;
    ngOnInit(): void;
}
