"use strict";
var core_1 = require('@angular/core');
/**
 * @Component: Text Header
 * @Description: This component generates a text header (H1, H2, etc).
 */
var TextHeaderComponent = (function () {
    function TextHeaderComponent() {
    }
    TextHeaderComponent.prototype.ngAfterContentChecked = function () {
        // Get the innerHTML
        var innerHtml = this.contentElement.nativeElement.innerHTML.toString();
        // If we got anything back
        if (innerHtml.length) {
            // Set it to display in the header tag
            this.contentHtml = innerHtml;
        }
    };
    Object.defineProperty(TextHeaderComponent.prototype, "level", {
        /**
         * @Property: level
         * @Description: What level the header should be. This should be heirarchical to other headers in the document starting at h2.
         * @Type: number
         */
        set: function (level) {
            var _level = parseInt(level.toString()) | 0;
            if (_level !== 0) {
                this.headerLevel = level;
            }
            else {
                if (core_1.isDevMode) {
                    console.error("TEXT_HEADER: The value passed to level should be a number between 1 and 6");
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextHeaderComponent.prototype, "style", {
        /**
         * @Property: level
         * @Description: Number corresponding to the level of header whose style you want to use. Not heirarchical.
         * @Type: number
         */
        set: function (level) {
            var _level = parseInt(level.toString()) | 0;
            if (_level !== 0) {
                this.styleLevel = level;
            }
            else {
                if (core_1.isDevMode) {
                    console.error("TEXT_HEADER: The value passed to style should be a number between 1 and 6 and correspond to the header level whose style you want to use.");
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextHeaderComponent.prototype, "bold", {
        /**
         * @Property: level
         * @Description: If the header should be bold.
         * @Type: Empty Attribute
         */
        set: function (bold) {
            this.isBold = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextHeaderComponent.prototype, "class", {
        /**
         * @Property: class
         * @Description: Adds the given string as a class to the text header
         * @Type: string
         */
        set: function (_class) {
            this.classString = _class;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.ViewChild("content"), 
        __metadata('design:type', core_1.ElementRef)
    ], TextHeaderComponent.prototype, "contentElement", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number), 
        __metadata('design:paramtypes', [Number])
    ], TextHeaderComponent.prototype, "level", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number), 
        __metadata('design:paramtypes', [Number])
    ], TextHeaderComponent.prototype, "style", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], TextHeaderComponent.prototype, "bold", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TextHeaderComponent.prototype, "class", null);
    TextHeaderComponent = __decorate([
        core_1.Component({
            selector: 'citi-text-header',
            template: require('./text-header.component.html'),
            styles: [require("./text-header.component.scss")]
        }), 
        __metadata('design:paramtypes', [])
    ], TextHeaderComponent);
    return TextHeaderComponent;
}());
exports.TextHeaderComponent = TextHeaderComponent;
//# sourceMappingURL=text-header.component.js.map