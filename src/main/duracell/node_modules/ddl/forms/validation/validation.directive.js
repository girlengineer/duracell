"use strict";
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
/** A hero's name can't match the given regular expression */
function forbiddenNameValidator(nameRe) {
    return function (control) {
        var name = control.value;
        var no = nameRe.test(name);
        return no ? { 'forbiddenName': { name: name } } : null;
    };
}
exports.forbiddenNameValidator = forbiddenNameValidator;
var ValidationDirective = (function () {
    function ValidationDirective() {
        this.valFn = forms_1.Validators.nullValidator;
    }
    ValidationDirective.prototype.ngOnChanges = function (changes) {
        console.log('here');
        var change = changes['forbiddenName'];
        if (change) {
            var val = change.currentValue;
            var re = val instanceof RegExp ? val : new RegExp(val, 'i');
            this.valFn = forbiddenNameValidator(re);
        }
        else {
            this.valFn = forms_1.Validators.nullValidator;
        }
    };
    ValidationDirective.prototype.validate = function (control) {
        console.log('here2');
        return this.valFn(control);
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], ValidationDirective.prototype, "forbiddenName", void 0);
    ValidationDirective = __decorate([
        core_1.Directive({
            selector: '[forbiddenName]',
            providers: [{ provide: forms_1.NG_VALIDATORS, useExisting: ValidationDirective, multi: true }]
        }), 
        __metadata('design:paramtypes', [])
    ], ValidationDirective);
    return ValidationDirective;
}());
exports.ValidationDirective = ValidationDirective;
//# sourceMappingURL=validation.directive.js.map