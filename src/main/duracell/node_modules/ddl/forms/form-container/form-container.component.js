"use strict";
var core_1 = require('@angular/core');
var form_container_settings_1 = require('./form-container.settings');
var validation_service_1 = require("../../utility/services/validation.service");
/**
 * @Component: Form Container
 * @Section: Forms
 * @Description: This is the container for forms and provides common funcionality for all DDL based forms.
 * from Bootstrap.
*/
var FormContainerComponent = (function () {
    function FormContainerComponent(validationService) {
        var _this = this;
        this.validationService = validationService;
        //validate inputs with validation service
        this.validate = function () {
            _this.validationService.validate();
        };
        // SimpleLayoutSettings object to hold the settings for the CTA
        this.settings = new form_container_settings_1.FormContainerSettings;
        // Sets the SimpleLayoutSettings values with DDL compliance checking
        this.updateSettings = function (_settings) {
            if ("requiredText" in _settings) {
                _this.settings.requiredText = _settings.requiredText;
            }
            if ("pageError" in _settings) {
                _this.settings.pageError = _settings.pageError;
            }
            if ("steps" in _settings) {
                _this.settings.steps = _settings.steps;
            }
            if ("currentStep" in _settings) {
                _this.settings.currentStep = _settings.currentStep;
            }
            if ("formHeader" in _settings) {
                _this.settings.formHeader = _settings.formHeader;
            }
            if ("formName" in _settings) {
                _this.settings.formName = _settings.formName;
            }
            if ("formAction" in _settings) {
                _this.settings.formAction = _settings.formAction;
            }
        };
    }
    Object.defineProperty(FormContainerComponent.prototype, "requiredText", {
        /**
         * @Property: requiredText
         * @Description: The text to display at the top of the form indicating that all form elements
         * are required or not.
         * @Type: String
        */
        set: function (requiredText) {
            // If the value is defined
            if (typeof requiredText !== "undefined") {
                this.updateSettings({ "requiredText": requiredText });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormContainerComponent.prototype, "pageError", {
        /**
         * @Property: pageError
         * @Description: The error to display at the top of the form.
         * @Type: String
        */
        set: function (pageError) {
            // If the value is defined
            if (typeof pageError !== "undefined") {
                this.updateSettings({ "pageError": pageError });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormContainerComponent.prototype, "steps", {
        /**
         * @Property: steps
         * @Description: The steps that will be passed to the form progress bar.
         * @Type: String[]
        */
        set: function (steps) {
            // If the value is defined
            if (typeof steps !== "undefined") {
                this.updateSettings({ "steps": steps });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormContainerComponent.prototype, "currentStep", {
        /**
         * @Property: currentStep
         * @Description: The step to show in the active state for the form progress bar.
         * @Type: Number
        */
        set: function (currentStep) {
            // If the value is defined
            if (typeof currentStep !== "undefined") {
                this.updateSettings({ "currentStep": currentStep });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormContainerComponent.prototype, "formHeader", {
        /**
         * @Property: formHeader
         * @Description: The main header for the form.
         * @Type: String
        */
        set: function (formHeader) {
            // If the value is defined
            if (typeof formHeader !== "undefined") {
                this.updateSettings({ "formHeader": formHeader });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormContainerComponent.prototype, "formName", {
        /**
         * @Property: formName
         * @Description: The name attribute for the form element.
         * @Type: String
        */
        set: function (formName) {
            // If the value is defined
            if (typeof formName !== "undefined") {
                this.updateSettings({ "formName": formName });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormContainerComponent.prototype, "formAction", {
        /**
         * @Property: formAction
         * @Description: The action attribute for the form.
         * @Type: String
        */
        set: function (action) {
            // If the value is defined
            if (typeof action !== "undefined") {
                this.updateSettings({ "formAction": action });
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.ViewChild("form"), 
        __metadata('design:type', core_1.ElementRef)
    ], FormContainerComponent.prototype, "form", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], FormContainerComponent.prototype, "requiredText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], FormContainerComponent.prototype, "pageError", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], FormContainerComponent.prototype, "steps", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], FormContainerComponent.prototype, "currentStep", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], FormContainerComponent.prototype, "formHeader", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], FormContainerComponent.prototype, "formName", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], FormContainerComponent.prototype, "formAction", null);
    FormContainerComponent = __decorate([
        core_1.Component({
            selector: 'citi-form-container',
            template: require('./form-container.component.html'),
            providers: [validation_service_1.ValidationService]
        }), 
        __metadata('design:paramtypes', [validation_service_1.ValidationService])
    ], FormContainerComponent);
    return FormContainerComponent;
}());
exports.FormContainerComponent = FormContainerComponent;
//# sourceMappingURL=form-container.component.js.map