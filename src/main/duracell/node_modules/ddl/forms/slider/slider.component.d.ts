import { ElementRef, OnInit, EventEmitter } from '@angular/core';
import { ISliderOptions } from './slider.component.options';
/**
  * @Component: Slider
  * @Section: Forms
  * @Description: This is the slider component and is used slide a specific numeric value selection visually.
  * The slider component also supports a range selection.
*/
export declare class SliderComponent implements OnInit {
    element: ElementRef;
    elementRef: ElementRef;
    slideValue: number;
    handleClicked: boolean;
    side: 'left' | 'right';
    paddClass: string;
    mousedrag: any;
    mousedragrange: any;
    mouseup: EventEmitter<{}>;
    mousedown: EventEmitter<{}>;
    mousemove: EventEmitter<{}>;
    mouseuprange: EventEmitter<{}>;
    mousedownrange: EventEmitter<{}>;
    mousemoverange: EventEmitter<{}>;
    pos: number;
    posStr: string;
    posLeftStr: string;
    posRightStr: string;
    lineWidth: string;
    lineLeft: string;
    lineRight: string;
    rangeBool: boolean;
    posRange: number;
    posLeftRangeStr: string;
    slideLine: any;
    startInput: any;
    endInput: any;
    /**
      * @Property: minValue
      * @Description: This defines the minimum value selectable by the slider
      * @Type: Number (Integer)
    */
    minValue: number;
    /**
      * @Property: maxValue
      * @Description: This defines the maximum value selectable by the slider
      * @Type: Number (Integer)
    */
    maxValue: number;
    /**
      * @Property: curValue
      * @Description: This defines the current value of the slider
      * @Type: Number (Integer)
    */
    curValue: number;
    /**
      * @Property: width
      * @Description: This defines the width of the slider component
      * @Type: Number (pixels)
    */
    width: number;
    /**
      * @Property: displayValues
      * @Description: This defines the visibility of the slider min and max labels
      * @Type: Boolean
    */
    displayValues: boolean;
    /**
      * @Property: legendText
      * @Description: This defines the text of the slider legend above the inputs
      * @Type: String
    */
    legendText: string;
    /**
      * @Property: legendSRText
      * @Description: This defines the text of the slider legend for screen readers only
      * @Type: String
    */
    legendSRText: string;
    /**
      * @Property: minimumText
      * @Description: This defines the text of the minimum input label
      * @Type: String
    */
    minimumText: string;
    /**
      * @Property: maximumText
      * @Description: This defines the text of the maximum input label
      * @Type: String
    */
    maximumText: string;
    /**
      * @Property: direction
      * @Description: This defines the direction of the slider handle when the user drags a selection
      * @Type: String ('left' or 'right')
    */
    direction: any;
    /**
      * @Property: range
      * @Description: This defines if the slider is a range. A range slider has two handles.
      * @Type: Boolean
    */
    range: any;
    /**
      * @Property: rangeStart
      * @Description: This defines the start value of the left handle if the slider is set to be a range.
      * @Type: Number (Integer)
    */
    rangeStart: number;
    /**
      * @Property: rangeEnd
      * @Description: This defines the end value of the left handle if the slider is set to be a range.
      * @Type: Number (Integer)
    */
    rangeEnd: number;
    /**
      * @Property: options
      * @Description: This object defines all of the inputs to configure the slider component.
      * @Type: ISliderOptions
    */
    options: ISliderOptions;
    /**
      * @Event: curValueChange
      * @Description: This event is fired when the value of the slider changes (only when not a range slider). The event is returned.
      * @Return: Object
    */
    curValueChange: EventEmitter<{}>;
    /**
      * @Event: rangeStartChange
      * @Description: This event is fired when the start value of the range slider changes (only when a range slider). The event is returned.
      * @Return: Object
    */
    rangeStartChange: EventEmitter<{}>;
    /**
      * @Event: rangeEndChange
      * @Description: This event is fired when the end value of the range slider changes (only when a range slider). The event is returned.
      * @Return: Object
    */
    rangeEndChange: EventEmitter<{}>;
    onMouseup(event: MouseEvent): void;
    /**
      * @Function: setStart
      * @Description: This function sets the start value of a range slider.
      * @Param: (Event) - value - Value to set start.
      * @Return: Void
    */
    setStart(event: any): void;
    /**
      * @Function: setEnd
      * @Description: This function sets the end value of a range slider.
      * @Param: (Event) - value - Value to set end.
      * @Return: Void
    */
    setEnd(event: any): void;
    onMouseDown(event: any): void;
    onMouseDownRange(event: any): void;
    onMouseMove(event: any): void;
    onResize(event: any): void;
    constructor(element: ElementRef);
    onHandleKey(event: any): void;
    onRangeHandleKey(event: any): void;
    slideClick(event: any): void;
    getNewSliderValue(position: number): number;
    /**
      * @Function: setSliderPosition
      * @Description: This function sets the position of the slider (when not a range).
      * @Param: (Number) - value - Value to set the position of the slider (pixels).
      * @Return: Void
    */
    setSliderPosition(value: number): void;
    /**
      * @Function: setSliderRangePosition
      * @Description: This function sets the position of the slider when it's a range.
      * @Param: (Boolean) - left - Boolean to set the position of the left or right side of the range.
      * True sets the position of the left side of the range, false sets the position of the right side of the range.
      * @Param: (Number) - value - Value to set the position of the slider (pixels).
      * @Return: Void
    */
    setSliderRangePosition(left: boolean, value: number): void;
    ngAfterViewInit(): void;
    ngOnInit(): void;
}
