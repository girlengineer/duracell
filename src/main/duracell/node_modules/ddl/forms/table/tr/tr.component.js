"use strict";
var core_1 = require('@angular/core');
var tr_component_props_1 = require('./tr.component.props');
var utility_classes_1 = require('../../../utility/utility.classes');
var TrComponent = (function () {
    function TrComponent(elm) {
        this.props = new tr_component_props_1.TrProperties();
        this.rowType = 'tablebody';
        this.parentElment = elm;
    }
    Object.defineProperty(TrComponent.prototype, "isExpanded", {
        get: function () {
            return this.props.isExpanded;
        },
        set: function (value) {
            this.props.isExpanded = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrComponent.prototype, "type", {
        set: function (properties) {
            this.props = properties;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrComponent.prototype, "id", {
        set: function (id) {
            this.props.id = id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrComponent.prototype, "additionalClasses", {
        set: function (additionalClasses) {
            this.props.additionalClasses = additionalClasses;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrComponent.prototype, "isTableHeaderRow", {
        set: function (isTableHeaderRow) {
            this.props.isTableHeaderRow = isTableHeaderRow;
            if (isTableHeaderRow === true) {
                this.rowType = 'tableheader';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrComponent.prototype, "isSubRow", {
        set: function (isSubRow) {
            this.props.isSubRow = isSubRow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrComponent.prototype, "isDetailRow", {
        set: function (isDetailRow) {
            this.props.isDetailRow = isDetailRow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrComponent.prototype, "additionalAttributes", {
        set: function (additionalAttributes) {
            this.props.additionalAttributes = additionalAttributes;
        },
        enumerable: true,
        configurable: true
    });
    TrComponent.prototype.generateClass = function () {
        var _this = this;
        this.parentElment.nativeElement.className = '';
        var cl = [];
        cl.push('cbolui-table-' + this.rowType + '-row');
        if (this.props.isSubRow !== null && this.props.isSubRow !== false) {
            cl.push(' cbolui-table-' + this.rowType + '-row-subrow tablesorter-childRow');
        }
        if (this.props.additionalClasses) {
            cl.push(this.props.additionalClasses);
        }
        if (this.props.isDetailRow) {
            cl.push('expandable-row');
        }
        if (this.props.isDetailRow && this.isExpanded) {
            cl.push('is-expanded');
        }
        else {
            if (this.props.isDetailRow) {
                cl.push('is-collapsed');
            }
        }
        cl.forEach(function (cla) {
            utility_classes_1.JavascriptMethods.addClass(_this.parentElment.nativeElement, cla);
        });
    };
    TrComponent.prototype.ngOnInit = function () {
    };
    TrComponent.prototype.ngAfterViewInit = function () {
        this.generateClass();
        this.parentElment.nativeElement.id = this.props.id;
    };
    TrComponent.prototype.ngOnChanges = function (changes) {
        if (changes.hasOwnProperty('isSubRow') || changes.hasOwnProperty('rowType')
            || changes.hasOwnProperty('isExpanded') || changes.hasOwnProperty('additionalClasses')
            || changes.hasOwnProperty('isDetailRow')) {
            this.generateClass();
        }
    };
    TrComponent.prototype.ngAfterContentChecked = function () {
        this.generateClass();
    };
    TrComponent.prototype.onClickBtn = function (btn) {
        if (btn.tagName === 'SPAN' && (' ' + btn.className + ' ').indexOf(' btn-link ') > -1) {
            this.props.isExpanded = !this.props.isExpanded;
        }
    };
    __decorate([
        core_1.ViewChild('wrapper'), 
        __metadata('design:type', core_1.ElementRef)
    ], TrComponent.prototype, "wrapper", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TrComponent.prototype, "isExpanded", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', tr_component_props_1.TrProperties), 
        __metadata('design:paramtypes', [tr_component_props_1.TrProperties])
    ], TrComponent.prototype, "type", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TrComponent.prototype, "id", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TrComponent.prototype, "additionalClasses", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TrComponent.prototype, "isTableHeaderRow", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TrComponent.prototype, "isSubRow", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TrComponent.prototype, "isDetailRow", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TrComponent.prototype, "additionalAttributes", null);
    __decorate([
        core_1.HostListener('click', ['$event.target']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Object]), 
        __metadata('design:returntype', void 0)
    ], TrComponent.prototype, "onClickBtn", null);
    TrComponent = __decorate([
        core_1.Component({
            selector: '[citi-tr]',
            template: require('./tr.component.html')
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], TrComponent);
    return TrComponent;
}());
exports.TrComponent = TrComponent;
//# sourceMappingURL=tr.component.js.map