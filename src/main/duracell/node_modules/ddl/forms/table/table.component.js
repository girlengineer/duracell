"use strict";
var core_1 = require('@angular/core');
var table_component_props_1 = require('./table.component.props');
var TableComponent = (function () {
    function TableComponent() {
        this.props = new table_component_props_1.TableProperties();
        this.isExpandedValue = false;
        this.showMoreButtonClicked = new core_1.EventEmitter();
    }
    Object.defineProperty(TableComponent.prototype, "isZebraTable", {
        get: function () {
            return this.props.isZebraTable;
        },
        set: function (value) {
            this.props.isZebraTable = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "loadButtonText", {
        get: function () {
            return this.props.loadButtonText;
        },
        set: function (value) {
            this.props.loadButtonText = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "itemDetailCollapses", {
        get: function () {
            return this.props.itemDetailCollapses;
        },
        set: function (newValues) {
            this.props.itemDetailCollapses = newValues.slice(0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "defaultNumberOfVisibleRecords", {
        get: function () {
            return this.props.defaultNumberOfVisibleRecords;
        },
        set: function (value) {
            this.props.defaultNumberOfVisibleRecords = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "isInfiniteScrollEnabled", {
        get: function () {
            return this.props.isInfiniteScrollEnabled;
        },
        set: function (value) {
            this.props.isInfiniteScrollEnabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "displayedHeaders", {
        get: function () {
            return this.props.displayedHeaders;
        },
        set: function (headerList) {
            this.props.displayedHeaders = headerList.slice(0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "data", {
        get: function () {
            return this.props.data;
        },
        set: function (source) {
            this.props.data = source.slice(0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "type", {
        set: function (properties) {
            this.props = properties;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "id", {
        set: function (id) {
            this.props.id = id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "caption", {
        set: function (caption) {
            this.props.caption = caption;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "hideCaption", {
        set: function (hideCaption) {
            this.props.hideCaption = hideCaption;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "summary", {
        set: function (summary) {
            this.props.summary = summary;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "tableTooltip", {
        set: function (tableTooltip) {
            this.props.tableTooltip = tableTooltip;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "isSortable", {
        get: function () {
            return this.props.isSortable;
        },
        set: function (isSortable) {
            this.props.isSortable = isSortable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "isAutoInitTableSorter", {
        set: function (isAutoInitTableSorter) {
            this.props.isAutoInitTableSorter = isAutoInitTableSorter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "beforeTableSorterInitialization", {
        set: function (beforeTableSorterInitialization) {
            this.props.beforeTableSorterInitialization = beforeTableSorterInitialization;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "sorterConfig", {
        set: function (sorterConfig) {
            this.props.sorterConfig = sorterConfig;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "filterContent", {
        set: function (filterContent) {
            this.props.filterContent = filterContent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "filterAligned", {
        set: function (filterAligned) {
            this.props.filterAligned = filterAligned;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "viewMore", {
        set: function (viewMore) {
            this.props.viewMore = viewMore;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "isExpandable", {
        get: function () {
            return this.props.isExpandable;
        },
        set: function (isExpandable) {
            this.props.isExpandable = isExpandable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "isExpanded", {
        set: function (isExpanded) {
            this.props.isExpanded = isExpanded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "hasMasterDetailsRows", {
        set: function (hasMasterDetailsRows) {
            this.props.hasMasterDetailsRows = hasMasterDetailsRows;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "noTopMargin", {
        set: function (noTopMargin) {
            this.props.noTopMargin = noTopMargin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "isFixedLayout", {
        set: function (isFixedLayout) {
            this.props.isFixedLayout = isFixedLayout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "ctaText", {
        set: function (ctaText) {
            this.props.ctaText = ctaText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "ctaTooltipTitle", {
        set: function (ctaTooltipTitle) {
            this.props.ctaTooltipTitle = ctaTooltipTitle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "ctaTooltipBody", {
        set: function (ctaTooltipBody) {
            this.props.ctaTooltipBody = ctaTooltipBody;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "isExpandableRow", {
        set: function (isExpandableRow) {
            this.props.isExpandableRow = isExpandableRow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "expandDetailsHeader", {
        set: function (expandDetailsHeader) {
            this.props.expandDetailsHeader = expandDetailsHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "collapseDetailsHeader", {
        set: function (collapseDetailsHeader) {
            this.props.collapseDetailsHeader = collapseDetailsHeader;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "tableType", {
        set: function (tableType) {
            this.props.tableType = tableType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "isFixedColumnTable", {
        set: function (isFixedColumnTable) {
            this.props.isFixedColumnTable = isFixedColumnTable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "bodyText", {
        set: function (bodyText) {
            this.props.bodyText = bodyText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "loadingText", {
        get: function () {
            return this.props.loadingText;
        },
        set: function (newText) {
            this.props.loadingText = newText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "isLoadingMoreData", {
        get: function () {
            return this.props.isLoadingMoreData;
        },
        set: function (value) {
            this.props.isLoadingMoreData = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "visibleRows", {
        get: function () {
            return this.props.visibleRows;
        },
        set: function (rows) {
            this.props.visibleRows = rows.slice(0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "defaultAdditionalRecords", {
        get: function () {
            return this.props.defaultAdditionalRecords;
        },
        set: function (numberOfRecords) {
            this.props.defaultAdditionalRecords = numberOfRecords;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "currentNumberOfVisibleRecords", {
        get: function () {
            return this.props.currentNumberOfVisibleRecords;
        },
        set: function (numberOfRecords) {
            this.props.currentNumberOfVisibleRecords = numberOfRecords;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "expandButtonTextClose", {
        get: function () {
            return this.props.expandButtonTextClose;
        },
        set: function (newText) {
            this.props.expandButtonTextClose = newText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "expandButtonTextOpen", {
        get: function () {
            return this.props.expandButtonTextOpen;
        },
        set: function (newText) {
            this.props.expandButtonTextOpen = newText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableComponent.prototype, "canLoadMoreData", {
        get: function () {
            return this.isInfiniteScrollEnabled && (this.data.length - this.currentNumberOfVisibleRecords > 0);
        },
        enumerable: true,
        configurable: true
    });
    TableComponent.prototype.ngOnInit = function () {
        this.updateNumberOfVisibleRecords();
        this.itemDetailCollapses = Array.apply(null, Array(this.data.length)).map(function () { return true; });
    };
    TableComponent.prototype.updateNumberOfVisibleRecords = function () {
        if (this.isInfiniteScrollEnabled) {
            if (this.canLoadMoreData) {
                if (this.currentNumberOfVisibleRecords > 0) {
                    this.currentNumberOfVisibleRecords = this.currentNumberOfVisibleRecords + this.defaultAdditionalRecords;
                }
                else {
                    this.currentNumberOfVisibleRecords = this.defaultNumberOfVisibleRecords;
                }
                this.visibleRows = this.data.slice(0, this.currentNumberOfVisibleRecords);
            }
        }
        else {
            this.visibleRows = this.data.slice(0, this.data.length);
        }
    };
    TableComponent.prototype.isCurrentVisible = function (currentIndex) {
        if (this.isInfiniteScrollEnabled) {
            return this.defaultNumberOfVisibleRecords > currentIndex;
        }
        return true;
    };
    TableComponent.prototype.loadMoreButtonClicked = function () {
        this.isLoadingMoreData = true;
        setTimeout(function () {
            this.isLoadingMoreData = false;
        }.bind(this), 700);
    };
    TableComponent.prototype.detailButtonClicked = function (index) {
        var newFlagValues = this.itemDetailCollapses.slice(0);
        newFlagValues[index] = !newFlagValues[index];
        this.itemDetailCollapses = newFlagValues;
    };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], TableComponent.prototype, "showMoreButtonClicked", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "isZebraTable", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "loadButtonText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Array), 
        __metadata('design:paramtypes', [Array])
    ], TableComponent.prototype, "itemDetailCollapses", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number), 
        __metadata('design:paramtypes', [Number])
    ], TableComponent.prototype, "defaultNumberOfVisibleRecords", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "isInfiniteScrollEnabled", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Array), 
        __metadata('design:paramtypes', [Array])
    ], TableComponent.prototype, "displayedHeaders", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Array), 
        __metadata('design:paramtypes', [Array])
    ], TableComponent.prototype, "data", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', table_component_props_1.TableProperties), 
        __metadata('design:paramtypes', [table_component_props_1.TableProperties])
    ], TableComponent.prototype, "type", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "id", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "caption", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "hideCaption", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "summary", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "tableTooltip", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "isSortable", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "isAutoInitTableSorter", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "beforeTableSorterInitialization", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "sorterConfig", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "filterContent", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "filterAligned", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "viewMore", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "isExpandable", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "isExpanded", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "hasMasterDetailsRows", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "noTopMargin", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "isFixedLayout", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "ctaText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "ctaTooltipTitle", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "ctaTooltipBody", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "isExpandableRow", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "expandDetailsHeader", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "collapseDetailsHeader", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "tableType", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "isFixedColumnTable", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "bodyText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "loadingText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], TableComponent.prototype, "isLoadingMoreData", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Array), 
        __metadata('design:paramtypes', [Array])
    ], TableComponent.prototype, "visibleRows", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number), 
        __metadata('design:paramtypes', [Number])
    ], TableComponent.prototype, "defaultAdditionalRecords", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Number), 
        __metadata('design:paramtypes', [Number])
    ], TableComponent.prototype, "currentNumberOfVisibleRecords", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "expandButtonTextClose", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], TableComponent.prototype, "expandButtonTextOpen", null);
    TableComponent = __decorate([
        core_1.Component({
            selector: 'citi-table',
            template: require('./table.component.html'),
            //styleUrls: ['./table.component.css']
            styles: [require('./table.component.css')]
        }), 
        __metadata('design:paramtypes', [])
    ], TableComponent);
    return TableComponent;
}());
exports.TableComponent = TableComponent;
//# sourceMappingURL=table.component.js.map