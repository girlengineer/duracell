"use strict";
var core_1 = require('@angular/core');
var password_strength_control_component_Settings_1 = require('./password-strength-control.component.Settings');
var utility_classes_1 = require('../../utility/utility.classes');
var PasswordStrengthControlComponent = (function () {
    function PasswordStrengthControlComponent() {
        this.settings = new password_strength_control_component_Settings_1.PasswordStrengthControlSettings();
        this.generatedCSS = 'form-group ';
        this.active = true;
        this.customStatusText = '';
        this.generatedValidationHTML = '';
        this.isValid = false;
        this.error = false;
        this.psiValue = '';
        this.validators = [];
        this.hideTooltip = true;
        this.isFocusTriggered = false;
        this.formGroupEl = undefined;
        this.popoverSettings = new password_strength_control_component_Settings_1.PopoverSettings();
        this.zIndex = '-1';
    }
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "type", {
        set: function (settings) {
            this.settings = settings;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "inputSize", {
        set: function (inputSize) {
            this.settings.inputSize = inputSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "id", {
        set: function (id) {
            this.settings.id = id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "labelText", {
        set: function (labelText) {
            this.settings.labelText = labelText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "errorText", {
        set: function (errorText) {
            this.settings.errorText = errorText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "validStatusText", {
        set: function (validStatusText) {
            this.settings.validStatusText = validStatusText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "invalidStatusText", {
        set: function (invalidStatusText) {
            this.settings.invalidStatusText = invalidStatusText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "initialStatusText", {
        set: function (initialStatusText) {
            this.settings.initialStatusText = initialStatusText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "rulesHeaderText", {
        set: function (rulesHeaderText) {
            this.settings.rulesHeaderText = rulesHeaderText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "userIDFieldID", {
        set: function (userIDFieldID) {
            this.settings.userIDFieldID = userIDFieldID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "userIDCheckMessage", {
        set: function (userIDCheckMessage) {
            this.settings.userIDCheckMessage = userIDCheckMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "spaceCheckMessage", {
        set: function (spaceCheckMessage) {
            this.settings.spaceCheckMessage = spaceCheckMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "letterCheckMessage", {
        set: function (letterCheckMessage) {
            this.settings.letterCheckMessage = letterCheckMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "numberCheckMessage", {
        set: function (numberCheckMessage) {
            this.settings.numberCheckMessage = numberCheckMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "lengthCheckMessage", {
        set: function (lengthCheckMessage) {
            this.settings.lengthCheckMessage = lengthCheckMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "minLength", {
        set: function (minLength) {
            this.settings.minLength = minLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "maxLength", {
        set: function (maxLength) {
            this.settings.maxLength = maxLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "placeholder", {
        set: function (placeholder) {
            this.settings.placeholder = placeholder;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "isHidden", {
        set: function (isHidden) {
            this.settings.isHidden = isHidden;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "offsetLG", {
        set: function (offsetLG) {
            this.settings.offsetLG = offsetLG;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "offsetMD", {
        set: function (offsetMD) {
            this.settings.offsetMD = offsetMD;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "offsetSM", {
        set: function (offsetSM) {
            this.settings.offsetSM = offsetSM;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "offsetXS", {
        set: function (offsetXS) {
            this.settings.offsetXS = offsetXS;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "hasHelpIcon", {
        set: function (hasHelpIcon) {
            this.settings.hasHelpIcon = hasHelpIcon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordStrengthControlComponent.prototype, "popoverPosition", {
        set: function (popoverPosition) {
            this.popoverSettings.popoverPosition = popoverPosition;
        },
        enumerable: true,
        configurable: true
    });
    PasswordStrengthControlComponent.prototype.ngOnInit = function () {
        var _this = this;
        var _setting = this.settings;
        switch (_setting.inputSize) {
            case utility_classes_1.InputSize.FullBody:
                this.generatedCSS += utility_classes_1.InputSizeCss.FullBody;
                break;
            case utility_classes_1.InputSize.Large:
                this.generatedCSS += utility_classes_1.InputSizeCss.Large;
                break;
            case utility_classes_1.InputSize.Medium:
                this.generatedCSS += utility_classes_1.InputSizeCss.Medium;
                break;
            case utility_classes_1.InputSize.Small:
                this.generatedCSS += utility_classes_1.InputSizeCss.Small;
                break;
            case utility_classes_1.InputSize.XSmall:
                this.generatedCSS += utility_classes_1.InputSizeCss.Small;
                break;
            default:
                console.log(_setting.inputSize);
        }
        if (_setting.offsetXS !== '') {
            this.generatedCSS += utility_classes_1.InputOffsetCss.XSmall + _setting.offsetXS + ' ';
        }
        if (_setting.offsetSM !== '') {
            this.generatedCSS += utility_classes_1.InputOffsetCss.Small + _setting.offsetSM + ' ';
        }
        if (_setting.offsetMD !== '') {
            this.generatedCSS += utility_classes_1.InputOffsetCss.Medium + _setting.offsetMD + ' ';
        }
        if (_setting.offsetLG !== '') {
            this.generatedCSS += utility_classes_1.InputOffsetCss.Large + _setting.offsetLG + ' ';
        }
        if (_setting.userIDCheckMessage !== '' && _setting.userIDFieldID !== '') {
            this.validators.push({
                message: _setting.userIDCheckMessage,
                isValid: function (value) {
                    return value !== '';
                }
            });
        }
        if (_setting.spaceCheckMessage !== '') {
            this.validators.push({
                message: _setting.spaceCheckMessage,
                isValid: function (value) {
                    return value.indexOf(' ') === -1;
                }
            });
        }
        if (_setting.letterCheckMessage !== '') {
            this.validators.push({
                message: _setting.letterCheckMessage,
                isValid: function (value) {
                    return value.match(/[a-z]/i) !== null;
                }
            });
        }
        if (_setting.numberCheckMessage !== '') {
            this.validators.push({
                message: _setting.numberCheckMessage,
                isValid: function (value) {
                    return value.match(/\d/) !== null;
                }
            });
        }
        if (_setting.lengthCheckMessage !== '') {
            this.validators.push({
                message: _setting.lengthCheckMessage,
                isValid: function (value) {
                    return value.length >= _this.settings.minLength && value.length <= _this.settings.maxLength;
                }
            });
        }
    };
    PasswordStrengthControlComponent.prototype.psiBlur = function () {
        if (this.formGroupEl === undefined) {
            this.formGroupEl = utility_classes_1.JavascriptMethods.closestByClass(this.psiInput.nativeElement, 'form-group');
        }
        utility_classes_1.JavascriptMethods.removeClass(this.formGroupEl, 'is-focused');
        this.blurListener();
    };
    PasswordStrengthControlComponent.prototype.blurListener = function () {
        var _this = this;
        this.isFocusTriggered = false;
        setTimeout(function () {
            if (!_this.isFocusTriggered) {
                _this.error = !_this.isValid;
                _this.hideTooltip = true;
                _this.popoverSettings.popupOpacity = 0;
                _this.zIndex = '-1';
            }
        }, 150);
    };
    PasswordStrengthControlComponent.prototype.psiFocus = function () {
        if (this.formGroupEl === undefined) {
            this.formGroupEl = utility_classes_1.JavascriptMethods.closestByClass(this.psiInput.nativeElement, 'form-group');
        }
        utility_classes_1.JavascriptMethods.addClass(this.formGroupEl, 'is-focused');
        this.focusListener();
    };
    PasswordStrengthControlComponent.prototype.focusListener = function () {
        this.isFocusTriggered = true;
        this.hideTooltip = false;
        this.createPasswordValidatorHTML(this.psiInput.nativeElement.className.indexOf('ng-pristine') !== -1, false);
        this.popoverSettings.popupOpacity = 1;
        this.zIndex = '1060';
    };
    PasswordStrengthControlComponent.prototype.psiKeyUp = function (e) {
        if (e.keyCode !== 9 && e.keyCode !== 13 && e.keyCode !== 16) {
            this.error = false;
            this.createPasswordValidatorHTML(false, false);
        }
    };
    PasswordStrengthControlComponent.prototype.psiChange = function () {
        if (this.formGroupEl === undefined) {
            this.formGroupEl = utility_classes_1.JavascriptMethods.closestByClass(this.psiInput.nativeElement, 'form-group');
        }
        if (this.psiInput.nativeElement.value !== '') {
            utility_classes_1.JavascriptMethods.addClass(this.formGroupEl, 'has-value');
        }
        else {
            utility_classes_1.JavascriptMethods.removeClass(this.formGroupEl, 'has-value');
        }
    };
    PasswordStrengthControlComponent.prototype.createPasswordValidatorHTML = function (isInitial, isExternalError) {
        if (isInitial === void 0) { isInitial = false; }
        if (isExternalError === void 0) { isExternalError = false; }
        var validators = this.validators, passwordValue = this.psiValue, validationHTML = [], isValid = true, generatedValidationHTML = '';
        if (passwordValue === undefined) {
            isInitial = true;
        }
        for (var i = 0, len = validators.length; i < len; i++) {
            if (isInitial) {
                validationHTML.push("<li>" + validators[i].message + "</li>");
            }
            else if (validators[i].isValid(passwordValue)) {
                validationHTML.push("<li class=\"check-mark\">\n                                  " + validators[i].message + "\n                                </li>");
            }
            else {
                isValid = false;
                validationHTML.push("<li class=\"x-mark\">\n                                  " + validators[i].message + "\n                                </li>");
            }
        }
        if (isInitial) {
            generatedValidationHTML = "<span class=\"password-status\">" + this.settings.initialStatusText + "</span>\n                                    <h3 class=\"popover-title\">" + this.settings.rulesHeaderText + "</h3>\n                                    <ul>" + validationHTML.join('') + "</ul>";
        }
        else if (isValid) {
            var txt = isExternalError ? this.customStatusText : this.settings.validStatusText;
            generatedValidationHTML = "<span class=\"password-status is-passing \">" + txt + "</span>\n                                    <h3 class=\"popover-title\">" + this.settings.rulesHeaderText + "</h3>\n                                    <ul>" + validationHTML.join('') + "</ul>";
        }
        else {
            var txt = isExternalError ? this.customStatusText : this.settings.invalidStatusText;
            generatedValidationHTML = "<span class=\"password-status is-passing \">" + txt + "</span>\n                                    <h3 class=\"popover-title\">" + this.settings.rulesHeaderText + "</h3>\n                                    <ul>" + validationHTML.join('') + "</ul>";
        }
        this.generatedValidationHTML = generatedValidationHTML;
        this.isValid = isValid;
    };
    PasswordStrengthControlComponent.prototype.getPopoverPosition = function () {
        var element = this.settings.hasHelpIcon ? this.psiHelp : this.psiInput;
        if (element) {
            if (this.popoverSettings.popoverPosition === 'auto') {
                this.popoverSettings.popoverPosition = this.b('right auto', element.nativeElement);
            }
            return this.popoverSettings.popoverPosition;
        }
        return '';
    };
    PasswordStrengthControlComponent.prototype.getPopoverXYPosition = function () {
        var element = this.settings.hasHelpIcon ? this.psiHelp : this.psiInput;
        if (element) {
            var bodyRect = document.body.getBoundingClientRect(), elemRect = element.nativeElement.getBoundingClientRect(), verticalOffset = void 0, horizontalOffset = void 0;
            switch (this.popoverSettings.popoverPosition) {
                case 'top':
                    verticalOffset = elemRect.top - bodyRect.top - this.popover.nativeElement.offsetHeight;
                    horizontalOffset = elemRect.left - bodyRect.left + element.nativeElement.offsetWidth / 2 - this.popover.nativeElement.offsetWidth / 2;
                    break;
                case 'bottom':
                    verticalOffset = elemRect.top - bodyRect.top + element.nativeElement.offsetHeight;
                    horizontalOffset = elemRect.left - bodyRect.left + element.nativeElement.offsetWidth / 2 - this.popover.nativeElement.offsetWidth / 2;
                    break;
                case 'right':
                    verticalOffset = elemRect.top - bodyRect.top - (this.popover.nativeElement.offsetHeight / 2) + element.nativeElement.offsetHeight / 2;
                    horizontalOffset = elemRect.left - bodyRect.left + element.nativeElement.offsetWidth;
                    break;
                case 'left':
                    verticalOffset = elemRect.top - bodyRect.top - (this.popover.nativeElement.offsetHeight / 2) + element.nativeElement.offsetHeight / 2;
                    horizontalOffset = elemRect.left - bodyRect.left - this.popover.nativeElement.offsetWidth;
                    break;
            }
            return { 'display': 'block', 'top': verticalOffset + 'px', 'left': horizontalOffset + 'px' };
        }
        else {
            return '';
        }
    };
    PasswordStrengthControlComponent.prototype.b = function (a, b) {
        var windowDimention = {
            width: window.innerWidth,
            height: window.innerHeight
        }, elementRect = b.getBoundingClientRect(), positionArr = {
            right: function () {
                return windowDimention.width - (elementRect.width + elementRect.left);
            },
            left: function () {
                return elementRect.left;
            },
            bottom: function () {
                return windowDimention.height - (elementRect.height + elementRect.top);
            }
        }, e = a.replace(/ *auto */i, ''), position = {
            pos: e,
            size: 0
        }, maxWidth = 340;
        if (positionArr[e]() <= maxWidth) {
            for (var side in positionArr) {
                var i = positionArr[side]();
                if (i >= maxWidth) {
                    e = side;
                    break;
                }
                i > position.size && (position.size = i, position.pos = side);
            }
        }
        e = (positionArr[e]() <= maxWidth) ? 'bottom' : e;
        return e;
    };
    PasswordStrengthControlComponent.prototype.addCustomPasswordValidators = function (validators) {
        this.validators.concat(validators);
        this.createPasswordValidatorHTML(this.psiInput.nativeElement.className.indexOf('ng-pristine') !== -1, false);
    };
    PasswordStrengthControlComponent.prototype.setCustomPasswordValidators = function (validators) {
        this.validators = validators;
        this.createPasswordValidatorHTML(this.psiInput.nativeElement.className.indexOf('ng-pristine') !== -1, false);
    };
    PasswordStrengthControlComponent.prototype.triggerCheck = function () {
        this.psiFocus();
    };
    PasswordStrengthControlComponent.prototype.resetIndicator = function () {
        var _this = this;
        this.generatedValidationHTML = '';
        this.isValid = false;
        this.error = false;
        this.psiValue = '';
        this.customStatusText = '';
        this.isFocusTriggered = false;
        this.active = false;
        setTimeout(function () { return _this.active = true; }, 0);
    };
    __decorate([
        core_1.ViewChild('psiInput'), 
        __metadata('design:type', core_1.ElementRef)
    ], PasswordStrengthControlComponent.prototype, "psiInput", void 0);
    __decorate([
        core_1.ViewChild('psiHelp'), 
        __metadata('design:type', core_1.ElementRef)
    ], PasswordStrengthControlComponent.prototype, "psiHelp", void 0);
    __decorate([
        core_1.ViewChild('popover'), 
        __metadata('design:type', core_1.ElementRef)
    ], PasswordStrengthControlComponent.prototype, "popover", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', password_strength_control_component_Settings_1.PasswordStrengthControlSettings), 
        __metadata('design:paramtypes', [password_strength_control_component_Settings_1.PasswordStrengthControlSettings])
    ], PasswordStrengthControlComponent.prototype, "type", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], PasswordStrengthControlComponent.prototype, "inputSize", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "id", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "labelText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "errorText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "validStatusText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "invalidStatusText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "initialStatusText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "rulesHeaderText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "userIDFieldID", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "userIDCheckMessage", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "spaceCheckMessage", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "letterCheckMessage", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "numberCheckMessage", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "lengthCheckMessage", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "minLength", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "maxLength", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "placeholder", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], PasswordStrengthControlComponent.prototype, "isHidden", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "offsetLG", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "offsetMD", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "offsetSM", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "offsetXS", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], PasswordStrengthControlComponent.prototype, "hasHelpIcon", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], PasswordStrengthControlComponent.prototype, "popoverPosition", null);
    PasswordStrengthControlComponent = __decorate([
        core_1.Component({
            selector: 'citi-password-strength-control',
            template: require('./password-strength-control.component.html')
        }), 
        __metadata('design:paramtypes', [])
    ], PasswordStrengthControlComponent);
    return PasswordStrengthControlComponent;
}());
exports.PasswordStrengthControlComponent = PasswordStrengthControlComponent;
//# sourceMappingURL=password-strength-control.component.js.map