"use strict";
var core_1 = require('@angular/core');
var input_service_1 = require('../input.service');
var validation_service_1 = require('../../../utility/services/validation.service');
/**
 * @Component: Input Group
 * @Section: Forms
 * @Description: This component generates a group of checkboxes or radio boxes
 */
var InputGroupComponent = (function () {
    function InputGroupComponent(inputService, validationService) {
        this.inputService = inputService;
        this.validationService = validationService;
        // Clears an error state on the input. Takes a type of error
        this.toggleError = function (errorType, isErrored) {
            // Clear the error state
            this.error = isErrored;
            // Set the error on the validation service
            if (isErrored) {
                // Add the error type
                this.errorType = errorType;
                // Add the error to the validation service
                this.validationService.addError(this);
            }
            else {
                // Remove the error type
                this.errorType = null;
                // Remove the error from the validation service
                this.validationService.removeError(this);
            }
            // Emit the change to the error
            this.errorChange.emit();
        };
        // Function to validate the input group
        this.validate = function () {
            // If this input group is required
            if (this.required) {
                // If the input group is valid or not
                var valid = false;
                // Loop over all the inputs that are a part of this input group
                for (var i = 0, j = this.inputService.inputs.length; i < j; i++) {
                    // Get a  reference to the current input
                    var input = this.inputService.inputs[i].input.nativeElement;
                    // If it is checked, then the input group is valid
                    input.checked
                        ? valid = true
                        : null;
                }
                // Set the error type if needed
                !valid
                    ? this.toggleError("required", true)
                    : null;
            }
        };
        /**
         * @Property: required
         * @Description: If the input group is required
         * @Type: Boolean
         */
        this.required = false;
        /**
         * @Property: error
         * @Description: If the input group is in an error state
         * @Type: Boolean
         */
        this.error = false;
        this.errorChange = new core_1.EventEmitter();
        /**
         * @Property: errorMessage
         * @Description: Error message to display while the input group is in an error state
         * @Type: String
         */
        this.errorMessage = "Error";
    }
    ;
    // On init
    InputGroupComponent.prototype.ngOnInit = function () {
        var _this = this;
        // Subscribe to validateNow on the validation service
        this.validationService.validateNow.subscribe(function (validate) {
            _this.validate();
        });
        // Subscribe to the inputService and set the error state when an error is added
        this.inputService.errorAdded.subscribe(function (error) {
            _this.toggleError("input", true);
        });
        // Subscribe to the inputService and remove the error state if there are no errors
        this.inputService.errorRemoved.subscribe(function (error) {
            if (!_this.inputService.errors.length) {
                _this.toggleError("input", false);
            }
        });
        // Catch any initial errors in the error service and set the error state if needed
        setTimeout(function () {
            if (_this.inputService.errors.length) {
                _this.toggleError("input", true);
            }
        });
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], InputGroupComponent.prototype, "title", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], InputGroupComponent.prototype, "required", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], InputGroupComponent.prototype, "error", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], InputGroupComponent.prototype, "errorChange", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], InputGroupComponent.prototype, "errorMessage", void 0);
    InputGroupComponent = __decorate([
        core_1.Component({
            selector: 'citi-input-group',
            template: require('./input-group.component.html'),
            styles: [require('./input-group.component.css')],
            providers: [input_service_1.InputService]
        }), 
        __metadata('design:paramtypes', [input_service_1.InputService, validation_service_1.ValidationService])
    ], InputGroupComponent);
    return InputGroupComponent;
}());
exports.InputGroupComponent = InputGroupComponent;
//# sourceMappingURL=input-group.component.js.map