"use strict";
var core_1 = require('@angular/core');
var input_service_1 = require('../input.service');
var validation_service_1 = require('../../../utility/services/validation.service');
/**
 * @Component: Radio
 * @Section: Forms
 * @Description: This component generates a radio button
 */
var RadioComponent = (function () {
    function RadioComponent(inputService, validationService) {
        this.inputService = inputService;
        this.validationService = validationService;
        // Whether or not this radio button is a content addition
        this.isContentAddition = false;
        // Function to validate the radio
        this.validate = function () {
            if (this.required && !this.input.nativeElement.checked) {
                this.toggleError("required", true);
            }
            else if (this.error) {
                this.toggleError("custom", true);
            }
            else {
                this.toggleError(false);
            }
        };
        // Clears an error state on the input. Takes a type of error
        this.toggleError = function (errorType, isErrored) {
            // Clear the error state
            this.error = isErrored;
            // Set the error on the validation service
            if (isErrored) {
                // Add the error type
                this.errorType = errorType;
                // Add the error to the validation service
                this.validationService.addError(this);
                // Add the error to the group
                this.inputService.addError(this);
            }
            else {
                // Remove the error type
                this.errorType = null;
                // Remove the error from the validation service
                this.validationService.removeError(this);
                // Remove the error from the group
                this.inputService.removeError(this);
            }
            // Emit the change to the error
            this.errorChange.emit();
        };
        this.errorChange = new core_1.EventEmitter();
    }
    ;
    // OnInit
    RadioComponent.prototype.ngOnInit = function () {
        var _this = this;
        // Tell the input service that a checkbox was added
        this.inputService.addInput(this);
        // Subscribe to the validation services validateNow emitter and validate as needed
        this.validationService.validateNow.subscribe(function (validate) {
            _this.validate();
        });
        // Run the initial validation
        this.validate();
    };
    Object.defineProperty(RadioComponent.prototype, "contentAddition", {
        /**
         * @Property: contentAddition
         * @Description: Where the checkbox is a content addition or not.
         * @Type: String
         */
        set: function (any) {
            this.isContentAddition = true;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.ViewChild("input"), 
        __metadata('design:type', core_1.ElementRef)
    ], RadioComponent.prototype, "input", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], RadioComponent.prototype, "contentAddition", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], RadioComponent.prototype, "idStr", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], RadioComponent.prototype, "name", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], RadioComponent.prototype, "value", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], RadioComponent.prototype, "label", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], RadioComponent.prototype, "disabled", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], RadioComponent.prototype, "checked", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], RadioComponent.prototype, "error", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], RadioComponent.prototype, "errorChange", void 0);
    RadioComponent = __decorate([
        core_1.Component({
            selector: 'citi-radio',
            template: require('./radio.component.html'),
            styles: [require("./radio.component.scss")]
        }), 
        __metadata('design:paramtypes', [input_service_1.InputService, validation_service_1.ValidationService])
    ], RadioComponent);
    return RadioComponent;
}());
exports.RadioComponent = RadioComponent;
//# sourceMappingURL=radio.component.js.map