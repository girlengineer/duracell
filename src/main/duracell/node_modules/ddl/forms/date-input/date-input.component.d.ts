import { OnInit, EventEmitter, ElementRef } from '@angular/core';
import { MaskingService } from '../../utility/services/masking.service';
import { CalendarDate } from './date-input.component.classes';
import * as moment from 'moment';
import { ValidationService } from "../../utility/services/validation.service";
/**
 * @Component: Date Input
 * @Section: Forms
 * @Description: Creates a date input (simple or calendar)
*/
export declare class DateInputComponent implements OnInit {
    private maskingService;
    private validationService;
    constructor(maskingService: MaskingService, validationService: ValidationService);
    input: ElementRef;
    placeholder: string;
    formattingText: string;
    inputSize: string;
    labelId: string;
    dateMask: any[];
    errorType: string;
    dateStringMask: any[];
    inputMask: any[];
    wrapperClasses: any;
    inputClasses: any;
    sizes: any;
    monthNames: string[];
    dayNames: string[];
    private hasFormat;
    opened: boolean;
    currentDate: moment.Moment;
    days: CalendarDate[];
    years: number[];
    yearPicker: boolean;
    getDateSuffix: Function;
    focusInput: Function;
    onFocus: Function;
    getMask: Function;
    onBlur: Function;
    onInput: Function;
    errors: any;
    toggleError: Function;
    validate: Function;
    ngOnInit(): void;
    /**
      * @Property: idStr
      * @Description: This defines the id of the input.
      * @Type: String
    */
    idStr: string;
    /**
      * @Property: name
      * @Description: This defines the name of the input
      * @Type: String
    */
    name: string;
    /**
      * @Property: label
      * @Description: This defines the label text of the input
      * @Type: String
    */
    label: string;
    /**
      * @Property: value
      * @Description: This defines the value of the input. Can be two-way bound through [(value)]="myValueVar"
      * @Type: Any
    */
    value: string;
    /**
      * @Event: valueChange
      * @Description: This event that is fired when the value of the input changes. Can be bound to with (valueChange)="myFunction($event)"
      * @Return: Object
    */
    valueChange: EventEmitter<{}>;
    /**
      * @Property: size
      * @Description: This defines the size of the input, which changes the bootstrap classes.
      * @Type: String ('large', 'medium', 'small', 'xsmall', 'none'), defaults to large.
    */
    size: string;
    tooltipTitle: string;
    tooltipBody: string;
    datepicker: boolean;
    /**
      * @Property: viewFormat
      * @Description: This defines the format of the date
      * @Type: String
    */
    viewFormat: string;
    /**
      * @Property: prePopulateDate
      * @Description: This defines the prepoluated date
      * @Type: String
    */
    prePopulateDate: string;
    /**
      * @Property: required
      * @Description: This defines the required validation on the input
      * @Type: String
    */
    required: boolean;
    /**
      * @Property: errorMessage
      * @Description: error message to be displayed when no value is selected
      * @Type: string
    */
    errorMessage: string;
    /**
      * @Property: error
      * @Description: This defines the error state on the input
      * @Type: String
    */
    error: boolean;
    errorChange: EventEmitter<any>;
    /**
      * @Property: requiredError
      * @Description: Text to be displayed when the input is required and no value was entered
      * @Type: String
    */
    requiredError: string;
}
