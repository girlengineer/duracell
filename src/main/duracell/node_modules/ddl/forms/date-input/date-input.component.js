"use strict";
var core_1 = require('@angular/core');
var masking_service_1 = require('../../utility/services/masking.service');
var validation_service_1 = require("../../utility/services/validation.service");
/**
 * @Component: Date Input
 * @Section: Forms
 * @Description: Creates a date input (simple or calendar)
*/
var DateInputComponent = (function () {
    // Constructor
    function DateInputComponent(maskingService, validationService) {
        var _this = this;
        this.maskingService = maskingService;
        this.validationService = validationService;
        // Placeholder
        this.placeholder = "Date dd/mm/yyyy";
        // Formatting text
        this.formattingText = "dd/mm/yyyy";
        // The size of the input
        this.inputSize = "large";
        // Date mask
        this.dateMask = this.maskingService.getDateMask();
        // Date String Mask
        this.dateStringMask = [
            /./, /./, /./, /./, /./, /./, /./, /./, /./, /./,
            /./, /./, /./, /./, /./, /./, /./, /./, /./, /./,
            /./, /./, /./, /./, /./, /./, /./, /./, /./, /./
        ];
        // The mask for the input
        this.inputMask = this.dateMask;
        // Classes to be applied to the wrapper
        this.wrapperClasses = {
            "has-value": false,
            "is-focused": false,
            "form-group": true,
            "datepicker-container": true,
            "u-is-unselectable": true
        };
        // Classes to be applied to the input
        this.inputClasses = {
            "form-control": true,
            "formatted": false,
            "validation-input-danger": false
        };
        // Classes for the sizes of input, also applied to the wrapper
        this.sizes = {
            large: 'col-md-8 col-sm-12',
            medium: 'col-md-6 col-sm-9 col-xs-12',
            small: 'col-md-4 col-sm-6 col-xs-12',
            xsmall: 'col-md-2 col-sm-3 col-xs-6',
            none: ''
        };
        // Month names for simple date input type
        this.monthNames = ["January", "Februrary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        // Day Names for the simple date input type
        this.dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        // Whether the date has been formatted
        this.hasFormat = false;
        // Gets the date suffix for the date in the simple date input
        this.getDateSuffix = function (date) {
            if (date > 3 && date < 21)
                return "th";
            switch (date % 10) {
                case 1: return "st";
                case 2: return "nd";
                case 3: return "rd";
                default: return "th";
            }
        };
        // Moves focus to the input
        this.focusInput = function () {
            this.input.nativeElement.focus();
        };
        // On focus
        this.onFocus = function () {
            // Set the focused class
            this.wrapperClasses['is-focused'] = true;
        };
        this.getMask = function (value) {
            return _this.inputMask;
        };
        // On Blur
        this.onBlur = function () {
            // Set the focused class
            this.wrapperClasses['is-focused'] = false;
            // Validate the input
            this.validate();
        };
        // Returns the value of the input on key up
        this.onInput = function () {
            // Set the has-value class
            this.value.length
                ? this.wrapperClasses["has-value"] = true
                : this.wrapperClasses["has-value"] = false;
            // Set the mask
            this.inputMask = this.dateMask;
            // Report the change
            this.valueChange.emit(this.value);
        };
        // Clears an error state on the input. Takes a type of error
        this.toggleError = function (errorType, isErrored) {
            // Clear the error state
            this.error = isErrored;
            // Clear the error class
            this.inputClasses['validation-input-danger'] = isErrored;
            // Set the error on the validation service
            if (isErrored) {
                // Add the error type
                this.errorType = errorType;
                // Add the error to the validation service
                this.validationService.addError(this);
            }
            else {
                // Remove the error type
                this.errorType = null;
                // Remove the error from the validation service
                this.validationService.removeError(this);
            }
            // Emit the change to the error
            this.errorChange.emit();
        };
        // validate input
        this.validate = function () {
            // Get the current value
            var value = this.input.nativeElement.value;
            // If we got a value
            if (value) {
                // If the input is required
                if (this.required) {
                    // Clear the required error state
                    this.toggleError('required', false);
                }
                // If the input length is 10 and it's unformatted
                if (value.length === 10 && !this.hasFormat) {
                    // Get all of the date information to build the string
                    var date = new Date(value);
                    var day = this.dayNames[date.getDay()];
                    var month = this.monthNames[date.getMonth()];
                    var dateNum = date.getDate();
                    var dateSuffix = this.getDateSuffix(dateNum);
                    var year = date.getFullYear();
                    // Build the string
                    var dateString = day + ' ' + month + ' ' + dateNum + dateSuffix + ', ' + year;
                    if (date.toString() === 'Invalid Date') {
                        // Set the error message
                        this.errorMessage = this.errors['invalidDate'];
                        // Set the error state
                        this.toggleError('invalidDate', true);
                    }
                    else {
                        // Set the input mask so the date can display
                        this.inputMask = this.dateStringMask;
                        this.hasFormat = true;
                        this.value = dateString;
                        this.toggleError('invalidDate', false);
                    }
                }
                else if (!this.hasFormat) {
                    // Set the error message
                    this.errorMessage = this.errors['invalidDate'];
                    // Set the error state
                    this.toggleError('invalidDate', true);
                }
                else if (this.hasFormat) {
                    // reset the input if not enough characters
                    this.hasFormat = false;
                    this.value = '';
                    this.wrapperClasses['has-value'] = false;
                    if (this.required) {
                        // Set the error message
                        this.errorMessage = this.requiredError || this.errors['required'];
                        // And set the required error state
                        this.toggleError('required', true);
                    }
                }
            }
            else {
                // Otherwise if there was no value and the input is required
                if (this.required && (!this.value || this.value === 'undefined')) {
                    // Set the error message
                    this.errorMessage = this.requiredError || this.errors['required'];
                    // And set the required error state
                    this.toggleError('required', true);
                }
            }
        };
        /**
          * @Event: valueChange
          * @Description: This event that is fired when the value of the input changes. Can be bound to with (valueChange)="myFunction($event)"
          * @Return: Object
        */
        this.valueChange = new core_1.EventEmitter();
        // Datepicker disabled for now
        this.datepicker = false;
        /**
          * @Property: errorMessage
          * @Description: error message to be displayed when no value is selected
          * @Type: string
        */
        this.errorMessage = 'Error';
        /**
          * @Property: error
          * @Description: This defines the error state on the input
          * @Type: String
        */
        this.error = false;
        this.errorChange = new core_1.EventEmitter;
    }
    ;
    DateInputComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.labelId = this.idStr + 'label';
        // Subscribe to the validation to validate the input on request of the service
        this.validationService.validateNow.subscribe(function () {
            _this.validate();
        });
        // Set the error messages
        this.errors = {
            required: 'Input is required',
            invalidDate: 'Date is invalid'
        };
    };
    ;
    Object.defineProperty(DateInputComponent.prototype, "size", {
        /**
          * @Property: size
          * @Description: This defines the size of the input, which changes the bootstrap classes.
          * @Type: String ('large', 'medium', 'small', 'xsmall', 'none'), defaults to large.
        */
        set: function (size) {
            // Define the valid sizes
            var validSizes = ["large", "medium", "small", "xsmall", "none"];
            // If there is a size and it is valid
            if (size && validSizes.indexOf(size) !== -1) {
                // Set the input size
                this.inputSize = size;
            }
            else if (core_1.isDevMode) {
                console.error("CITI-INPUT - SIZE: Caught '" + size + "'. Valid sizes are: " + validSizes);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    __decorate([
        core_1.ViewChild("input"), 
        __metadata('design:type', core_1.ElementRef)
    ], DateInputComponent.prototype, "input", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DateInputComponent.prototype, "idStr", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DateInputComponent.prototype, "name", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DateInputComponent.prototype, "label", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DateInputComponent.prototype, "value", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], DateInputComponent.prototype, "valueChange", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], DateInputComponent.prototype, "size", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DateInputComponent.prototype, "tooltipTitle", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DateInputComponent.prototype, "tooltipBody", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], DateInputComponent.prototype, "datepicker", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DateInputComponent.prototype, "viewFormat", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DateInputComponent.prototype, "prePopulateDate", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], DateInputComponent.prototype, "required", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DateInputComponent.prototype, "errorMessage", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], DateInputComponent.prototype, "error", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], DateInputComponent.prototype, "errorChange", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DateInputComponent.prototype, "requiredError", void 0);
    DateInputComponent = __decorate([
        core_1.Component({
            selector: 'citi-date-input',
            template: require('./date-input.component.html'),
            //styleUrls: ['./date-input.component.css'],
            styles: [require('./date-input.component.css')],
            providers: [masking_service_1.MaskingService]
        }), 
        __metadata('design:paramtypes', [masking_service_1.MaskingService, validation_service_1.ValidationService])
    ], DateInputComponent);
    return DateInputComponent;
}());
exports.DateInputComponent = DateInputComponent;
//# sourceMappingURL=date-input.component.js.map