"use strict";
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var _1 = require('../classes/');
var moment = require('moment');
var validation_service_1 = require("../../../../../utility/services/validation.service");
var Moment = moment.default || moment;
exports.CALENDAR_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return DatePickerComponent; }),
    multi: true
};
var DatePickerComponent = (function () {
    function DatePickerComponent(el, validationService) {
        this.el = el;
        this.validationService = validationService;
        this.errorMessage = 'Error';
        this.error = false;
        // Whether or not the input is required
        this.isRequired = false;
        this.inputClasses = {
            "form-control": true,
            "validation-input-danger": false
        };
        this.onTouchedCallback = function () { };
        this.onChangeCallback = function () { };
        // Clears an error state on the input. Takes a type of error
        this.toggleError = function (errorType, isErrored) {
            // Clear the error state
            this.error = isErrored;
            // Clear the error class
            this.inputClasses['validation-input-danger'] = isErrored;
            // Build the error object
            var error = {
                'error_type': errorType,
                'input_type': 'text',
                'error_message': this.errorMessage,
                'input_name': this.name
            };
            // Set the error on the validation service
            if (isErrored) {
                this.validationService.addError(error);
            }
            else {
                this.validationService.removeError(error);
            }
        };
        // Validate input
        this.validate = function () {
            // Get the current value
            var value = this.input.nativeElement.value;
            // If we got a value
            if (value) {
                // If the input is required
                if (this.required) {
                    // Clear the required error state
                    this.toggleError('required', false);
                }
            }
            else {
                // Otherwise if there was no value and the input is required
                if (this.required && (!value || value === 'undefined')) {
                    // Set the error message
                    this.errorMessage = this.requiredError || this.errors['required'];
                    // And set the required error state
                    this.toggleError('required', true);
                }
            }
        };
        this.onBlur = function () {
            this.validate();
        };
        this.opened = false;
        this.currentDate;
        this.options = this.options || {};
        this.days = [];
        this.years = [];
        this.date = new _1.DateModel({
            day: null,
            month: null,
            year: null,
            formatted: null,
            momentObj: null
        });
        this.generateYears();
        this.outputEvents = new core_1.EventEmitter();
    }
    Object.defineProperty(DatePickerComponent.prototype, "value", {
        get: function () {
            return this.date;
        },
        set: function (date) {
            var _this = this;
            if (!date) {
                return;
            }
            this.date = date;
            this.onChangeCallback(date);
            setTimeout(function () {
                _this.validate();
            });
        },
        enumerable: true,
        configurable: true
    });
    DatePickerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.labelId = this.idStr + 'label';
        this.options.initialDate = new Date();
        this.options = new _1.DatePickerOptions(this.options);
        this.scrollOptions = {
            barBackground: '#C9C9C9',
            barWidth: '7',
            gridBackground: '#C9C9C9',
            gridWidth: '2'
        };
        if (this.prePopulateDate) {
            this.options.initialDate = new Date(this.prePopulateDate);
        }
        if (this.viewFormat) {
            this.options.format = this.viewFormat || this.options.format;
        }
        this.currentDate = Moment(this.options.initialDate);
        var date = Moment(this.currentDate);
        this.value = {
            day: date.format('DD'),
            month: date.format('MMMM'),
            year: date.format('YYYY'),
            formatted: date.format(this.options.format),
            momentObj: date
        };
        this.generateCalendar();
        if (this.options.minDate instanceof Date) {
            this.minDate = Moment(this.options.minDate);
        }
        else {
            this.minDate = null;
        }
        if (this.options.maxDate instanceof Date) {
            this.maxDate = Moment(this.options.maxDate);
        }
        else {
            this.maxDate = null;
        }
        if (typeof window !== 'undefined') {
            var body = document.querySelector('body');
            body.addEventListener('click', function (e) {
                if (!_this.opened || !e.target) {
                    return;
                }
                ;
                if (_this.el.nativeElement !== e.target && !_this.el.nativeElement.contains(e.target)) {
                    _this.close();
                }
            }, false);
        }
        if (this.inputEvents) {
            this.inputEvents.subscribe(function (e) {
                if (e.type === 'action') {
                    if (e.data === 'toggle') {
                        _this.toggle();
                    }
                    if (e.data === 'close') {
                        _this.close();
                    }
                    if (e.data === 'open') {
                        _this.open();
                    }
                }
                if (e.type === 'setDate') {
                    if (!(e.data instanceof Date)) {
                        throw new Error("Input data must be an instance of Date!");
                    }
                    var date_1 = Moment(e.data);
                    if (!date_1) {
                        throw new Error("Invalid date: " + e.data);
                    }
                    _this.value = {
                        day: date_1.format('DD'),
                        month: date_1.format('MM'),
                        year: date_1.format('YYYY'),
                        formatted: date_1.format(_this.options.format),
                        momentObj: date_1
                    };
                }
            });
        }
        // Subscribe to the validation to validate the input on request of the service
        this.validationService.validateNow.subscribe(function () {
            _this.validate();
        });
        // Set the error messages
        this.errors = {
            required: 'Input is required'
        };
    };
    DatePickerComponent.prototype.generateCalendar = function () {
        var selectedDate = this.currentDate;
        var month = selectedDate.month();
        var year = selectedDate.year();
        var n = 1;
        var firstWeekDay = (this.options.firstWeekdaySunday) ? Moment(selectedDate).date(2).day() : Moment(selectedDate).date(1).day();
        if (firstWeekDay !== 1) {
            n -= (firstWeekDay + 6) % 7;
        }
        this.days = [];
        for (var i = n; i <= Moment(selectedDate).endOf('month').date(); i += 1) {
            var currentDate = Moment(i + "." + (month + 1) + "." + year, 'DD.MM.YYYY');
            var today = (Moment().isSame(currentDate, 'day') && Moment().isSame(currentDate, 'month')) ? true : false;
            var selected = (selectedDate && Moment(this.date.momentObj).isSame(currentDate, 'day')) ? true : false;
            var enabled = true;
            if (this.minDate !== null) {
                if (this.maxDate !== null) {
                    enabled = currentDate.isBetween(this.minDate, this.maxDate, 'day', '[]') ? true : false;
                }
                else {
                    enabled = currentDate.isBefore(this.minDate, 'day') ? false : true;
                }
            }
            else {
                if (this.maxDate !== null) {
                    enabled = currentDate.isAfter(this.maxDate, 'day') ? false : true;
                }
            }
            var day = {
                day: i > 0 ? i : null,
                month: i > 0 ? month : null,
                year: i > 0 ? year : null,
                enabled: enabled,
                today: i > 0 && today ? true : false,
                selected: i > 0 && selected ? true : false,
                momentObj: currentDate
            };
            this.days.push(day);
        }
    };
    DatePickerComponent.prototype.inputChange = function (event) {
    };
    DatePickerComponent.prototype.selectDate = function (e, date) {
        var _this = this;
        if (e) {
            e.preventDefault();
        }
        setTimeout(function () {
            _this.value = {
                day: date.format('DD'),
                month: date.format('MMMM'),
                year: date.format('YYYY'),
                formatted: date.format(_this.options.format),
                momentObj: date
            };
            _this.currentDate = Moment(date);
            _this.generateCalendar();
        });
        if (this.options.autoApply === true || this.opened === true) {
            this.opened = false;
        }
    };
    DatePickerComponent.prototype.selectYear = function (e, year) {
        var _this = this;
        e.preventDefault();
        setTimeout(function () {
            var date = _this.currentDate.year(year);
            _this.value = {
                day: date.format('DD'),
                month: date.format('MM'),
                year: date.format('YYYY'),
                formatted: date.format(_this.options.format),
                momentObj: date
            };
            _this.yearPicker = false;
            _this.generateCalendar();
        });
    };
    DatePickerComponent.prototype.generateYears = function () {
        var date = this.options.minDate || Moment().year(Moment().year() - 40);
        var toDate = this.options.maxDate || Moment().year(Moment().year() + 40);
        var years = toDate.year() - date.year();
        for (var i = 0; i < years; i++) {
            this.years.push(date.year());
            date.add(1, 'year');
        }
    };
    DatePickerComponent.prototype.writeValue = function (date) {
        if (!date) {
            return;
        }
        this.date = date;
    };
    DatePickerComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    DatePickerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    DatePickerComponent.prototype.prevMonth = function () {
        this.currentDate = this.currentDate.subtract(1, 'month');
        this.generateCalendar();
    };
    DatePickerComponent.prototype.nextMonth = function () {
        this.currentDate = this.currentDate.add(1, 'month');
        this.generateCalendar();
    };
    DatePickerComponent.prototype.today = function () {
        this.currentDate = Moment();
        this.selectDate(null, this.currentDate);
    };
    DatePickerComponent.prototype.toggle = function () {
        this.opened = !this.opened;
        if (this.opened) {
            //set this.currentdate to this.date
            this.onOpen();
        }
    };
    DatePickerComponent.prototype.open = function () {
        this.opened = true;
        this.onOpen();
    };
    DatePickerComponent.prototype.close = function () {
        this.opened = false;
    };
    DatePickerComponent.prototype.onOpen = function () {
        this.yearPicker = false;
    };
    DatePickerComponent.prototype.openYearPicker = function () {
        var _this = this;
        setTimeout(function () { return _this.yearPicker = true; });
    };
    __decorate([
        core_1.ViewChild("input"), 
        __metadata('design:type', core_1.ElementRef)
    ], DatePickerComponent.prototype, "input", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', _1.DatePickerOptions)
    ], DatePickerComponent.prototype, "options", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', core_1.EventEmitter)
    ], DatePickerComponent.prototype, "inputEvents", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DatePickerComponent.prototype, "viewFormat", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DatePickerComponent.prototype, "prePopulateDate", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], DatePickerComponent.prototype, "outputEvents", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DatePickerComponent.prototype, "inputName", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], DatePickerComponent.prototype, "required", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DatePickerComponent.prototype, "errorMessage", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], DatePickerComponent.prototype, "error", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DatePickerComponent.prototype, "requiredError", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DatePickerComponent.prototype, "idStr", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DatePickerComponent.prototype, "label", void 0);
    DatePickerComponent = __decorate([
        core_1.Component({
            selector: 'ng2-datepicker',
            template: require('./ng2-datepicker.component.html'),
            // styleUrls: ['ng2-datepicker.css'],
            styles: [require('./ng2-datepicker.css')],
            providers: [exports.CALENDAR_VALUE_ACCESSOR]
        }),
        __param(0, core_1.Inject(core_1.ElementRef)), 
        __metadata('design:paramtypes', [core_1.ElementRef, validation_service_1.ValidationService])
    ], DatePickerComponent);
    return DatePickerComponent;
}());
exports.DatePickerComponent = DatePickerComponent;
//# sourceMappingURL=ng2-datepicker.component.js.map