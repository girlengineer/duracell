import { OnInit, EventEmitter, ElementRef } from '@angular/core';
import { MaskingService } from '../../utility/services/masking.service';
import { ValidationService } from '../../utility/services/validation.service';
/**
 * @Component: Input
 * @Section: Forms
 * @Description: This is the input component and is used to generate text inputs
*/
export declare class InputComponent implements OnInit {
    private maskingService;
    private validationService;
    constructor(maskingService: MaskingService, validationService: ValidationService);
    errors: any;
    input: ElementRef;
    inputValue: string;
    inputSize: string;
    inputType: string;
    inputMaskArray: any;
    isRequired: boolean;
    labelId: string;
    errorType: string;
    phoneArea: boolean;
    phoneCountry: boolean;
    wrapperClasses: any;
    sizes: any;
    groupClasses: any;
    inputClasses: any;
    focusInput: Function;
    onFocus: Function;
    getMask: Function;
    onBlur: Function;
    onInput: Function;
    toggleError: Function;
    validate: Function;
    ngOnInit(): void;
    /**
      * @Property: idStr
      * @Description: This defines the id of the input.
      * @Type: String
    */
    idStr: string;
    /**
      * @Property: name
      * @Description: This defines the name of the input
      * @Type: String
    */
    name: string;
    /**
      * @Property: label
      * @Description: This defines the label text of the input
      * @Type: String
    */
    label: string;
    /**
      * @Property: value
      * @Description: This defines the value of the input. Can be two-way bound through [(value)]='myValueVar'
      * @Type: Any
    */
    value: string;
    /**
      * @Event: valueChange
      * @Description: This event that is fired when the value of the input changes. Can be bound to with (valueChange)='myFunction($event)'
      * @Return: Object
    */
    valueChange: EventEmitter<{}>;
    /**
      * @Property: placeholder
      * @Description: This defines the place holder text of the input.
      * @Type: String
    */
    placeholder: string;
    /**
      * @Property: type
      * @Description: This defines the type of the input, which changes which kind of input is displayed. Mask must be set separately.
      * @Type: String ('text', 'password', 'email', 'url', 'phoneNumber', 'phoneCountry', 'phoneArea', 'readOnly', 'ssn'), defaults to text.
    */
    type: string;
    /**
      * @Property: size
      * @Description: This defines the size of the input, which changes the bootstrap classes.
      * @Type: String ('large', 'medium', 'small', 'xsmall', 'none'), defaults to large.
    */
    size: string;
    /**
      * @Property: mask
      * @Description: This defines the mask of the input, which changes the input text masking on character input.
      * @Type: String ('none', 'phone', 'date', 'zipcode', 'dollar', 'email'), defaults to none.
    */
    mask: string;
    tooltipTitle: string;
    tooltipBody: string;
    /**
      * @Property: tooltipPosition
      * @Description: This defines the position of the tooltip.
      * @Type: String ('top', 'bottom', 'auto', 'left', 'right'), defaults to auto
    */
    tooltipPosition: string;
    /**
      * @Property: currency
      * @Description: This defines the type of the currency being input
      * @Type: String
    */
    currency: string;
    /**
      * @Property: maxlength
      * @Description: This defines the maximum character length of the input
      * @Type: String
    */
    maxlength: number;
    /**
      * @Property: maxlength
      * @Description: This defines the maximum character length of the input
      * @Type: String
    */
    minlength: number;
    /**
      * @Property: required
      * @Description: This defines the required validation on the input
      * @Type: String
    */
    required: boolean;
    /**
      * @Property: errorMessage
      * @Description: error message to be displayed when no value is selected
      * @Type: string
    */
    errorMessage: string;
    /**
      * @Property: error
      * @Description: This defines the error state on the input
      * @Type: String
    */
    error: boolean;
    errorChange: EventEmitter<any>;
    /**
      * @Property: requiredError
      * @Description: Text to be displayed when the input is required and no value was entered
      * @Type: String
    */
    requiredError: string;
    /**
      * @Property: minLengthError
      * @Description: Text to be displayed when the user does not enter enough characters based on minLength
      * @Type: String
    */
    minLengthError: string;
    /**
      * @Property: describedBy
      * @Description: Sets the aria-describedby attribute on the input
      * @Type: String
    */
    describedby: string;
}
