import { OnInit, EventEmitter } from '@angular/core';
import { DropdownService } from "./dropdown-service/dropdown.service";
import { ValidationService } from "../../utility/services/validation.service";
/**
 * @Component: Dropdown
 * @Section: Forms
 * @Description: This is the dropdown component and is used to create reusable dropdown field
 * from Bootstrap.
*/
export declare class DropdownComponent implements OnInit {
    private dropdownService;
    private validationService;
    constructor(dropdownService: DropdownService, validationService: ValidationService);
    private sizeClasses;
    private classes;
    inputClasses: any;
    private selectedValue;
    private options;
    private hidden;
    private hasAutoFocus;
    private isRequired;
    private dropdownHasTooltip;
    labelId: string;
    errors: any;
    errorType: string;
    onFocus: Function;
    onBlur: Function;
    onDropdownChange: Function;
    toggleError: Function;
    validate: Function;
    ngOnInit(): void;
    /**
    * @Property: change
    * @Description: takes a function to be called when the value of the dropdown is changed.
    * @Type: Function
    */
    change: EventEmitter<any>;
    /**
    * @Property: idStr
    * @Description: id for the dropdown
    * @Type: string
    */
    idStr: string;
    /**
    * @Property: name
    * @Description: name for the dropdown
    * @Type: string
    */
    name: string;
    /**
    * @Property: size
    * @Description: size for the dropdown (large, medium, small, xsmall)
    * @Type: string
    */
    size: string;
    /**
    * @Property: label
    * @Description: label for the dropdown
    * @Type: string
    */
    label: string;
    /**
    * @Property: hidden
    * @Description: whether the dropdown is hidden or not
    * @Type: boolean
    */
    isHidden: boolean | string;
    /**
    * @Property: autofocus
    * @Description: whether the dropdown should be focused automatically on page load
    * @Type: boolean
    */
    autofocus: boolean | string;
    /**
      * @Property: required
      * @Description: This defines the required validation on the input
      * @Type: String
    */
    required: boolean;
    /**
      * @Property: errorMessage
      * @Description: error message to be displayed when no value is selected
      * @Type: string
    */
    errorMessage: string;
    /**
      * @Property: error
      * @Description: This defines the error state on the input
      * @Type: String
    */
    error: boolean;
    errorChange: EventEmitter<any>;
    /**
      * @Property: requiredError
      * @Description: Text to be displayed when the input is required and no value was entered
      * @Type: String
    */
    requiredError: string;
    /**
    * @Property: hasTooltip
    * @Description: whether the dropdown has a tooltip or not
    * @Type: boolean
    */
    hasTooltip: boolean | string;
    /**
    * @Property: tooltipTitle
    * @Description: title for the dropdown tooltip
    * @Type: string
    */
    tooltipTitle: string;
    /**
    * @Property: tooltipBody
    * @Description: body text for the dropdown tooltip
    * @Type: string
    */
    tooltipBody: string;
    /**
    * @Property: tooltipPosition
    * @Description: Position for the dropdown tooltip (top, bottom, left, right, auto)
    * @Type: string
    */
    tooltipPosition: string;
}
