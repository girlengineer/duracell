"use strict";
var core_1 = require('@angular/core');
var leftnav_layout_settings_1 = require('./leftnav-layout.settings');
/**
 * @Component: Left Nav Layout
 * @Section: GridLayouts
 * @Description: This is the layout component that allows you to create a layout with a leftnav content area.
 * This allows developers to transclude their left nav and content areas seperately.  {{ '<' }}div left ...{{ '>' }}...{{ '<' }}/div{{ '>' }}
 * and {{ '<' }}div main ...{{ '>' }}...{{ '<' }}/div{{ '>' }} are the two containers that are used to put the content into each area respectively.
*/
var LeftNavLayoutComponent = (function () {
    function LeftNavLayoutComponent() {
        var _this = this;
        this.containerClasses = ['citi-container', 'cbolui-ddl', 'container-fluid'];
        // SimpleLayoutSettings object to hold the settings for the CTA
        this.settings = new leftnav_layout_settings_1.LeftNavLayoutSettings;
        // Sets the SimpleLayoutSettings values with DDL compliance checking
        this.updateSettings = function (_settings) {
            /* Theme */
            if ("theme" in _settings) {
                if (_settings.theme === "light") {
                    _this.settings.theme = "light";
                }
                else if (_settings.theme === "gray") {
                    _this.settings.theme = "gray";
                }
                else {
                    console.error("Valid theme types are light or gray");
                }
            }
            /* Customer Type */
            if ("customerType" in _settings) {
                if (_settings.customerType === "blue") {
                    _this.settings.customerType = "blue";
                }
                else if (_settings.customerType === "gold") {
                    _this.settings.customerType = "gold";
                }
                else {
                    console.error("Valid theme types are gold or blue");
                }
            }
        };
        this.elementsFound = false;
    }
    Object.defineProperty(LeftNavLayoutComponent.prototype, "theme", {
        /**
         * @Property: theme
         * @Description: The theme that should be applied for DDL, light or gray.
         * @Type: String (light | gray)
         */
        set: function (theme) {
            // If the value is defined
            if (typeof theme !== "undefined") {
                this.updateSettings({ "theme": theme });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LeftNavLayoutComponent.prototype, "customerType", {
        /**
         * @Property: customerType
         * @Description: The customer type for the customer, blue or gold.
         * @Type: String (blue | gold)
         */
        set: function (customerType) {
            // If the value is defined
            if (typeof customerType !== "undefined") {
                this.updateSettings({ "customerType": customerType });
            }
        },
        enumerable: true,
        configurable: true
    });
    LeftNavLayoutComponent.prototype.ngOnInit = function () {
        this.settings.theme == 'light' ? this.containerClasses.push('theme-light') : null;
        this.settings.theme == 'gray' ? this.containerClasses.push('theme-gray') : null;
        this.settings.customerType == 'blue' ? this.containerClasses.push('citi-blue') : null;
        this.settings.customerType == 'gold' ? this.containerClasses.push('citi-gold') : null;
    };
    LeftNavLayoutComponent.prototype.ngAfterViewChecked = function () {
        // THIS IS A GLOBAL FUNCTION TO REMOVE OUTLINE FROM ALL CLICKED BUTTONS AND ANCHORS
        // THIS IS TO COMPLY WITH DDL DESIGN STANDARDS
        // If no elements have been found
        if (!this.elementsFound) {
            // MEASURED PERFORMANCE: 0.25ms AVERAGE EXECUTION TIME
            // PLEASE MEASURE ALL CHANGES AGAINST THIS TO ENSURE FAST EXECUTION OF FUNCTION
            // Get all of the buttons in an array of HTML elements
            var buttons = [].slice.call(document.getElementsByTagName("button"));
            // Get all of the anchors in an array of HTML elements
            var anchors = [].slice.call(document.getElementsByTagName("a"));
            // Create an array with all buttons and anchors
            var elements = buttons.concat(anchors);
            // If we found some elements
            if (elements.length) {
                // Let the function know we found some elements so it doesnt keep looking
                this.elementsFound = true;
                // Loop over all of our elements (do NOT use a for each here please)
                for (var i = 0, j = elements.length; i < j; i++) {
                    // Attach an event listener for mouseup to each of the elements
                    elements[i].addEventListener("mouseup", function () {
                        // Set the outline to none
                        this.style.outline = "none";
                    });
                }
            }
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], LeftNavLayoutComponent.prototype, "theme", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], LeftNavLayoutComponent.prototype, "customerType", null);
    LeftNavLayoutComponent = __decorate([
        core_1.Component({
            selector: 'citi-leftnav-layout',
            template: require('./leftnav-layout.component.html')
        }), 
        __metadata('design:paramtypes', [])
    ], LeftNavLayoutComponent);
    return LeftNavLayoutComponent;
}());
exports.LeftNavLayoutComponent = LeftNavLayoutComponent;
//# sourceMappingURL=leftnav-layout.component.js.map