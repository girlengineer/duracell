"use strict";
var core_1 = require('@angular/core');
/**
 * @Component: Header Welcome Bar
 * @Header: Navigation
 * @Description: This component generates the welcome bar section of the header.
 */
var WelcomeBarComponent = (function () {
    function WelcomeBarComponent(element) {
        this.element = element;
        // Closes the message popup on click of the document
        this.onClick = function () {
            if (this.showMessagePopup) {
                this.showMessagePopup = false;
            }
        };
        // Hides the outlines of clickable elements
        this.hideOutlines = function () {
            if (this.titleBar) {
                this.titleBar.nativeElement.style.outline = "none";
            }
            ;
            if (this.popupTitleBar) {
                this.popupTitleBar.nativeElement.style.outline = "none";
            }
        };
        // Toggles the message popup open and closed
        this.toggleMessagePopup = function (open, event) {
            var _this = this;
            // If the event was passed
            if (event) {
                // Stop propagation (prevents document onclick event from firing)
                event.stopPropagation();
            }
            // If we should open the message popup
            if (open) {
                // Open the message popup
                this.showMessagePopup = true;
                setTimeout(function () {
                    if (_this.popupTitleBar) {
                        _this.popupTitleBar.nativeElement.focus();
                    }
                }, 0);
            }
            else {
                // Otherwise close the message popup
                this.showMessagePopup = false;
                setTimeout(function () {
                    if (_this.titleBar) {
                        _this.titleBar.nativeElement.focus();
                    }
                }, 0);
            }
        };
        // This function takes the BrandingConfig object and translates it to config DOM
        // This step is not necessary, but keeps the DOM markup semantic and un-bloated
        // and keeps most of the logic in the controller instead of the view
        this.setWelcomeConfig = function (_config) {
            // Set up config object to temporarily hold our calculated values
            var welcomeConfig = {};
            // If there is a valid config and a header object is defined
            if (_config && _config.header) {
                // If the welcome bar should be shown
                if (_config.header.welcome
                    && _config.header.welcome.show) {
                    welcomeConfig.showWelcomeBar = true;
                    // If the welcome section should be shown
                    if (_config.header.welcome.name
                        && _config.header.welcome.name.show
                        && typeof _config.header.welcome.name.wording !== "undefined"
                        && typeof _config.header.welcome.name.name !== "undefined") {
                        // Set the welcome bar to show
                        welcomeConfig.showWelcome = true;
                        // Provide the welcome text
                        welcomeConfig.welcomeWording = _config.header.welcome.name.wording;
                        // Provide the name to the config
                        welcomeConfig.welcomeName = _config.header.welcome.name.name;
                    }
                    // If the profile and settings section should be shown
                    if (_config.header.welcome.profileAndSettings
                        && _config.header.welcome.profileAndSettings.show
                        && typeof _config.header.welcome.profileAndSettings.wording !== "undefined"
                        && typeof _config.header.welcome.profileAndSettings.url !== "undefined") {
                        // Set the profile and settings section to show
                        welcomeConfig.showProfileAndSettings = true;
                        // Provide the wording for the profile and settings link
                        welcomeConfig.profileAndSettingsWording = _config.header.welcome.profileAndSettings.wording;
                        // Set the url for the profile and settings link
                        welcomeConfig.profileAndSettingsUrl = _config.header.welcome.profileAndSettings.url;
                    }
                    // If the messages section should be shown
                    if (_config.header.welcome.messages
                        && _config.header.welcome.messages.show
                        && typeof _config.header.welcome.messages.url !== "undefined"
                        && typeof _config.header.welcome.messages.wording !== "undefined") {
                        // Set the messages section to show
                        welcomeConfig.showMessages = true;
                        // Set the URL for the messages button
                        welcomeConfig.messagesUrl = _config.header.welcome.messages.url;
                        // Set the wording for the messages button
                        welcomeConfig.messagesWording = _config.header.welcome.messages.wording;
                    }
                    else if (_config.header.welcome.messages
                        && _config.header.welcome.messages.show
                        && typeof _config.header.welcome.messages.count !== "undefined"
                        && typeof _config.header.welcome.messages.title !== "undefined"
                        && typeof _config.header.welcome.messages.wording !== "undefined"
                        && typeof _config.header.welcome.messages.sendMessageUrl !== "undefined"
                        && typeof _config.header.welcome.messages.sendMessageText !== "undefined"
                        && typeof _config.header.welcome.messages.viewAllMessagesUrl !== "undefined"
                        && typeof _config.header.welcome.messages.viewAllMessagesText !== "undefined"
                        && typeof _config.header.welcome.messages.topMessages !== "undefined"
                        && typeof _config.header.welcome.messages.topMessages.length !== "undefined") {
                        // Set the messages section to show
                        welcomeConfig.showMessages = true;
                        // Provide the new message count
                        welcomeConfig.messageCount = _config.header.welcome.messages.count;
                        // Provide the wording for the message count
                        welcomeConfig.messageWording = _config.header.welcome.messages.wording;
                        // Provide the title for the popup
                        welcomeConfig.title = _config.header.welcome.messages.title;
                        // Provide the url for sending a message
                        welcomeConfig.sendMessageUrl = _config.header.welcome.messages.sendMessageUrl;
                        // Provide the text for the send message button
                        welcomeConfig.sendMessageText = _config.header.welcome.messages.sendMessageText;
                        // Provide the url for viewing all messages
                        welcomeConfig.viewAllMessagesUrl = _config.header.welcome.messages.viewAllMessagesUrl;
                        // Provide the text for viewing all messages
                        welcomeConfig.viewAllMessagesText = _config.header.welcome.messages.viewAllMessagesText;
                        // Provide the top messages
                        welcomeConfig.topMessages = _config.header.welcome.messages.topMessages;
                    }
                    // If the last login section should be shown
                    if (_config.header.welcome.lastLogin
                        && _config.header.welcome.lastLogin.show
                        && typeof _config.header.welcome.lastLogin.wording !== "undefined"
                        && typeof _config.header.welcome.lastLogin.dateTime !== "undefined") {
                        // Set the last login section to show\
                        welcomeConfig.showLastLogin = true;
                        // Provide the last login wording
                        welcomeConfig.lastLoginWording = _config.header.welcome.lastLogin.wording;
                        // Provide the date and time of last login
                        welcomeConfig.lastLoginDateTime = _config.header.welcome.lastLogin.dateTime;
                    }
                }
                // Set the config for use by the dom (DOM will not show until this is set);
                this.config = welcomeConfig;
            }
        };
    }
    ;
    // On init
    WelcomeBarComponent.prototype.ngOnInit = function () {
        // Bind a to click events on the host element
        this.element.nativeElement.onclick = function (e) {
            // Stop propagation to prevent the dropdown from closing
            e.stopPropagation();
        };
    };
    Object.defineProperty(WelcomeBarComponent.prototype, "brandingConfig", {
        /**
         * @Property: brandingConfig
         * @Description: This is a reference to the branding config JSON object retrieved from the branding API.
         * @Type: String
         */
        set: function (_config) {
            if (_config) {
                this.setWelcomeConfig(_config);
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.ViewChild("titleBar"), 
        __metadata('design:type', core_1.ElementRef)
    ], WelcomeBarComponent.prototype, "titleBar", void 0);
    __decorate([
        core_1.ViewChild("popupTitleBar"), 
        __metadata('design:type', core_1.ElementRef)
    ], WelcomeBarComponent.prototype, "popupTitleBar", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], WelcomeBarComponent.prototype, "brandingConfig", null);
    WelcomeBarComponent = __decorate([
        core_1.Component({
            selector: 'citi-welcome-bar',
            template: require('./welcome.component.html'),
            styles: [require("./welcome.component.scss").toString()],
            host: { '(document:click)': 'onClick()' }
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], WelcomeBarComponent);
    return WelcomeBarComponent;
}());
exports.WelcomeBarComponent = WelcomeBarComponent;
//# sourceMappingURL=welcome.component.js.map