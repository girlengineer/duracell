"use strict";
var core_1 = require('@angular/core');
/**
 * @Component: Header Navigation
 * @Section: Navigation
 * @Description: This component generates the navigation and sign on/off section of the header.
 */
var NavigationComponent = (function () {
    function NavigationComponent() {
        // Holds the open elements
        this.openElements = [];
        // Closes all open menus
        this.closeMenus = function () {
            for (var i = 0, j = this.openElements.length; i < j; i++) {
                this.openElements[i] = false;
            }
            ;
        };
        // Opens a specific sub-menu
        this.openMenu = function (index) {
            this.openElements[index] = true;
        };
        // Handles opening and closing elements
        this.open = function (event, index) {
            // Make sure our click doesn't bubble
            // If this is taken out, the menu will automatically close itself
            event.stopPropagation();
            // If the menu being opened is not already open
            if (!this.openElements[index]) {
                // Close all menus
                this.closeMenus();
                // Open the specific menu
                this.openMenu(index);
            }
            else {
                // Otherwise close all menus
                this.closeMenus();
            }
        };
        // This is the onClick handler for the document
        // When the document is clicked
        this.onClick = function () {
            // Close all menus
            this.closeMenus();
        };
        // When the user select dropdown is changed
        this.onUserSelectChange = function (value) {
            // If the user selects the different user option
            if (value === "differentUser") {
                // Set the user select not to show and the username input to show
                this.config.showUserSelect = false;
            }
            else if (value === "deleteUser") {
                // Take the user to the url specified
                window.location.href = this.config.deleteUserUrl;
            }
        };
        // When the login modal is shown or hidden
        this.onModalShowChange = function (open) {
            // If the modal closes and we should use the user select
            if (!open && this.config.useUserSelect) {
                // Set the user select to show again
                this.config.showUserSelect = true;
            }
        };
        // Masks the majority of characters in a username
        this.maskUsername = function (username) {
            // Define the long and short masks
            var short = /(^.)(.{1,})(.$)/;
            var long = /(^..)(.{1,})(..$)/;
            // Get the mask that should be used
            var mask = username.length >= 7 ? long : short;
            // Mask the username
            username = username.replace(mask, function (a, b, c, d) {
                // Get the first part of the string
                var maskedString = b;
                // Add an x for every character between the first and last sections
                for (var i = 0, j = c.length; i < j; i++) {
                    maskedString += "x";
                }
                // Add the last section
                maskedString += d;
                // Return the completed string
                return maskedString;
            });
            // Return the masked username
            return username;
        };
        // This function takes the BrandingConfig object and translates it to config DOM
        // This step is not necessary, but keeps the DOM markup semantic and un-bloated
        // and keeps most of the logic in the controller instead of the view
        this.setNavigationConfig = function (_config) {
            // Set up config object to temporarily hold our calculated values
            var navigationConfig = {};
            // If there is a valid config and a header object is defined
            if (_config && _config.header) {
                // If the menu bar should be shown...
                if (_config.header.navigation
                    && _config.header.navigation.show) {
                    // ...set it to display
                    navigationConfig.showNavigation = true;
                    // If the navigationItems value is an array and has at least one item...
                    if (Array.isArray(_config.header.navigation.navigationItems)
                        && _config.header.navigation.navigationItems.length > 0) {
                        // ...tell the menu to display the menu...
                        navigationConfig.showMenuNavigation = true;
                        // ...and provide the menu items to be displayed
                        navigationConfig.menuNavigationItems = _config.header.navigation.navigationItems;
                    }
                    ;
                    // If the sign should show and has all required elements
                    if (_config.header.navigation.sign
                        && _config.header.navigation.sign.show
                        && _config.header.navigation.sign.wording) {
                        // If there is a modal object
                        if (_config.header.navigation.sign.modal) {
                            // Get the modal object
                            var modal = _config.header.navigation.sign.modal;
                            // If the modal has all the values we need
                            if (modal.title
                                && modal.buttonText
                                && modal.usernameName
                                && modal.usernamePlaceholder
                                && modal.passwordName
                                && modal.passwordPlaceholder
                                && modal.rememberIdText
                                && modal.rememberIdName
                                && modal.userIdBlankError
                                && modal.userIdShortError
                                && modal.passwordShortError
                                && modal.passwordBlankError) {
                                // Tell the sign to show
                                navigationConfig.showSign = true;
                                // Tell the modal to show
                                navigationConfig.showSignModal = true;
                                // Provide the wording for the sign button
                                navigationConfig.signWording = _config.header.navigation.sign.wording;
                                // Provide the modal title
                                navigationConfig.modalTitle = modal.title;
                                // Provide the sign on button's text
                                navigationConfig.submitButtonText = modal.buttonText;
                                // Provide the login form's username input's name
                                navigationConfig.usernameName = modal.usernameName;
                                // Provide the login form's username input's placeholder
                                navigationConfig.usernamePlaceholder = modal.usernamePlaceholder;
                                // Provide the login form's password input's name
                                navigationConfig.passwordName = modal.passwordName;
                                // Provide the login form's password input's placeholder
                                navigationConfig.passwordPlaceholder = modal.passwordPlaceholder;
                                // Provide the minimum character count for the user id input
                                navigationConfig.userIdMinChars = modal.userIdMinChars;
                                // Provide the login form's username input's error for being blank
                                navigationConfig.userIdBlankError = modal.userIdBlankError;
                                // Provide the login form's username input's error for being too short
                                navigationConfig.userIdShortError = modal.userIdShortError;
                                // Provide the minimum character count for the password input
                                navigationConfig.passwordMinChars = modal.passwordMinChars;
                                // Provide the login form's password input's error for being blank
                                navigationConfig.passwordBlankError = modal.passwordBlankError;
                                // Provide the login form's password input's error for being too short
                                navigationConfig.passwordShortError = modal.passwordShortError;
                                // Provide the login form's remember user id checkbox's title
                                navigationConfig.rememberIdText = modal.rememberIdText;
                                // Provide the login form's remember user id checkbox's name
                                navigationConfig.rememberIdName = modal.rememberIdName;
                                // If there is an existingUsers object and it has all the values we need 
                                // to produce the existing users dropdown
                                if (modal.existingUsers
                                    && modal.existingUsers.usernames
                                    && modal.existingUsers.usernames.length
                                    && modal.existingUsers.addUserText
                                    && modal.existingUsers.deleteUserText
                                    && modal.existingUsers.deleteUserUrl) {
                                    // Set the component to use the user select dropdown
                                    navigationConfig.useUserSelect = true;
                                    // Set the form to show the existing users dropdown
                                    navigationConfig.showUserSelect = true;
                                    for (var i = 0, j = modal.existingUsers.usernames.length; i < j; i++) {
                                        modal.existingUsers.usernames[i] = this.maskUsername(modal.existingUsers.usernames[i]);
                                    }
                                    // Provide the existing users dropdown's usernames
                                    navigationConfig.existingUserNames = modal.existingUsers.usernames;
                                    // Provide the existing users dropdown's add user text
                                    navigationConfig.addUserText = modal.existingUsers.addUserText;
                                    // Provide the existing users dropdown's delete user text
                                    navigationConfig.deleteUserText = modal.existingUsers.deleteUserText;
                                    // Provide the existing users dropdown's delete users url;
                                    navigationConfig.deleteUserUrl = modal.existingUsers.deleteUserUrl;
                                }
                            }
                        }
                        else if (_config.header.navigation.sign.url) {
                            // ...tell the menu to display the sign...
                            navigationConfig.showSign = true;
                            // ...and provide the wording for the sign button
                            navigationConfig.signWording = _config.header.navigation.sign.wording;
                            // ... and provide the url for the sign link
                            navigationConfig.signUrl = _config.header.navigation.sign.url;
                        }
                    }
                }
                // Set the config for use by the dom (DOM will not show until this is set);
                this.config = navigationConfig;
            }
        };
    }
    Object.defineProperty(NavigationComponent.prototype, "brandingConfig", {
        /**
         * @Property: brandingConfig
         * @Description: This is a reference to the branding config JSON object retrieved from the branding API.
         * @Type: String
         */
        set: function (_config) {
            if (_config) {
                this.setNavigationConfig(_config);
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], NavigationComponent.prototype, "brandingConfig", null);
    NavigationComponent = __decorate([
        core_1.Component({
            selector: 'citi-navigation',
            template: require('./navigation.component.html'),
            styles: [require("./navigation.component.scss").toString()],
            host: { '(document:click)': 'onClick()' }
        }), 
        __metadata('design:paramtypes', [])
    ], NavigationComponent);
    return NavigationComponent;
}());
exports.NavigationComponent = NavigationComponent;
//# sourceMappingURL=navigation.component.js.map