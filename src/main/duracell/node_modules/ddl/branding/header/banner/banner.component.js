"use strict";
var core_1 = require('@angular/core');
/**
 * @Component: Header Banner Bar
 * @Section: Navigation
 * @Description: This component generates the banner (logo and search) section of the header.
 */
var BannerComponent = (function () {
    function BannerComponent(BannerElement) {
        this.BannerElement = BannerElement;
        // Handles focusing the search field when it is cleared on mobile
        this.focusSearch = function () {
            this.BannerElement.nativeElement.querySelector("input[type='text']").focus();
        };
        // Handles opening and closing the search
        this.toggleSearch = function () {
            var _this = this;
            if (this.config.searchOpen) {
                this.config.searchOpen = false;
                setTimeout(function () {
                    _this.config.searchHidden = true;
                }, 500);
            }
            else {
                this.config.searchHidden = false;
                this.config.searchOpen = true;
            }
        };
        // This function takes the BrandingConfig object and translates it to config DOM
        // This step is not necessary, but keeps the DOM markup semantic and un-bloated
        // and keeps most of the logic in the controller instead of the view
        this.setBannerConfig = function (_config) {
            var bannerConfig = {};
            // If the banner should be shown...
            if (_config.header.banner
                && _config.header.banner.show
                && typeof _config.header.banner.color === "string"
                && _config.header.banner.color.length > 0) {
                // ...set it to display
                bannerConfig.showBanner = true;
                // Provide the color of the banner
                bannerConfig.bannerColor = _config.header.banner.color;
                // If the logo should be displayed and there is an image defined
                if (_config.header.banner.logo
                    && _config.header.banner.logo.show
                    && _config.header.banner.logo.image
                    && typeof _config.header.banner.logo.image === "string"
                    && _config.header.banner.logo.image.length > 0) {
                    // ...set it to display...
                    bannerConfig.showLogo = true;
                    // ...and provide the image url given
                    bannerConfig.logoUrl = _config.header.banner.logo.image;
                }
                // If the search menu should be displayed and we have all necessary values...
                if (_config.header.banner.search
                    && _config.header.banner.search.show
                    && _config.header.banner.search.action
                    && typeof _config.header.banner.search.action === "string"
                    && _config.header.banner.search.action.length > 0
                    && typeof _config.header.banner.search.placeholder === "string"
                    && _config.header.banner.search.placeholder.length > 0) {
                    // ...set it to display...
                    bannerConfig.showBannerSearch = true;
                    bannerConfig.searchHidden = true;
                    // ...and provide all necessary values
                    bannerConfig.bannerSearchAction = _config.header.banner.search.action;
                    bannerConfig.bannerSearchPlaceholder = _config.header.banner.search.placeholder;
                    // ... bump the search over a little if the sign is showing
                    if (_config.header.navigation.sign
                        && _config.header.navigation.sign.show
                        && _config.header.navigation.sign.wording
                        && _config.header.navigation.sign.url) {
                        bannerConfig.bumpSearch = true;
                    }
                }
            }
            // Set the config for use by the dom (DOM will not show until this is set);
            this.config = bannerConfig;
        };
    }
    ;
    Object.defineProperty(BannerComponent.prototype, "brandingConfig", {
        /**
         * @Property: brandingConfig
         * @Description: This is a reference to the branding config JSON object retrieved from the branding API.
         * @Type: String
         */
        set: function (_config) {
            if (_config) {
                this.setBannerConfig(_config);
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], BannerComponent.prototype, "brandingConfig", null);
    BannerComponent = __decorate([
        core_1.Component({
            selector: 'citi-banner',
            template: require('./banner.component.html'),
            styles: [require("./banner.component.scss").toString()]
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef])
    ], BannerComponent);
    return BannerComponent;
}());
exports.BannerComponent = BannerComponent;
//# sourceMappingURL=banner.component.js.map