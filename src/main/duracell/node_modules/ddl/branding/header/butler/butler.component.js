"use strict";
var core_1 = require('@angular/core');
/**
 * @Component: Header Butler Bar
 * @Section: Navigation
 * @Description: This component generates the butler bar (black bar) section of the header.
 */
var ButlerBarComponent = (function () {
    function ButlerBarComponent() {
        // If we have found some anchor and button elements
        this.elementsFound = false;
        // This function takes the BrandingConfig object and translates it to config DOM
        // This step is not necessary, but keeps the DOM markup semantic and un-bloated
        // and keeps most of the logic in the controller instead of the view
        this.setButlerConfig = function (_config) {
            // Set up config object to temporarily hold our calculated values
            var butlerConfig = {};
            // If there is a valid config and a header object is defined
            if (_config && _config.header) {
                // If the butler bar should be shown
                if (_config.header.butler
                    && _config.header.butler.show) {
                    // ...set it to display
                    butlerConfig.showButlerBar = true;
                    // If the navigationItems value is an array and has at least one item...
                    if (Array.isArray(_config.header.butler.navigationItems)
                        && _config.header.butler.navigationItems.length > 0) {
                        // ...tell the butler bar to display the menu...
                        butlerConfig.showButlerMenu = true;
                        // ...and provide the menu items to be displayed
                        butlerConfig.butlerMenuItems = _config.header.butler.navigationItems;
                    }
                    // If the search form should be displayed and we have all necessary values...
                    if (_config.header.butler.search
                        && _config.header.butler.search.show
                        && typeof _config.header.butler.search.action === "string"
                        && _config.header.butler.search.action.length > 0
                        && typeof _config.header.butler.search.placeholder === "string"
                        && _config.header.butler.search.placeholder.length > 0) {
                        // .. tell the butler bar to display the search box...
                        butlerConfig.showButlerSearch = true;
                        // ...and provide the necessary data
                        butlerConfig.butlerSearchAction = _config.header.butler.search.action;
                        butlerConfig.butlerSearchPlaceholder = _config.header.butler.search.placeholder;
                    }
                }
                // Set the config for use by the dom (DOM will not show until this is set);
                this.config = butlerConfig;
            }
        };
    }
    // This function removes outlines from anchors and buttons that are clicked.
    ButlerBarComponent.prototype.ngAfterViewChecked = function () {
        // THIS IS A GLOBAL FUNCTION TO REMOVE OUTLINE FROM ALL CLICKED BUTTONS AND ANCHORS
        // THIS IS TO COMPLY WITH DDL DESIGN STANDARDS
        var _this = this;
        setTimeout(function () {
            // If no elements have been found
            if (!_this.elementsFound) {
                // MEASURED PERFORMANCE: 0.25ms AVERAGE EXECUTION TIME
                // PLEASE MEASURE ALL CHANGES AGAINST THIS TO ENSURE FAST EXECUTION OF FUNCTION
                // Get all of the buttons in an array of HTML elements
                var buttons = [].slice.call(document.getElementsByTagName("button"));
                // Get all of the anchors in an array of HTML elements
                var anchors = [].slice.call(document.getElementsByTagName("a"));
                // Create an array with all buttons and anchors
                var elements = buttons.concat(anchors);
                // If we found some elements
                if (elements.length) {
                    // Let the function know we found some elements so it doesnt keep looking
                    _this.elementsFound = true;
                    // Loop over all of our elements (do NOT use a for each here please)
                    for (var i = 0, j = elements.length; i < j; i++) {
                        // Attach an event listener for mouseup to each of the elements
                        elements[i].addEventListener("mouseup", function () {
                            // Set the outline to none
                            this.style.outline = "none";
                        });
                    }
                }
            }
        }, 100);
    };
    Object.defineProperty(ButlerBarComponent.prototype, "brandingConfig", {
        /**
         * @Property: brandingConfig
         * @Description: This is a reference to the branding config JSON object retrieved from the branding API.
         * @Type: String
         */
        set: function (_config) {
            if (_config) {
                this.setButlerConfig(_config);
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], ButlerBarComponent.prototype, "brandingConfig", null);
    ButlerBarComponent = __decorate([
        core_1.Component({
            selector: 'citi-butler-bar',
            template: require('./butler.component.html'),
            styles: [require("./butler.component.scss").toString()]
        }), 
        __metadata('design:paramtypes', [])
    ], ButlerBarComponent);
    return ButlerBarComponent;
}());
exports.ButlerBarComponent = ButlerBarComponent;
//# sourceMappingURL=butler.component.js.map