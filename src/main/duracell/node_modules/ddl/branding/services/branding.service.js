"use strict";
// App Imports
var core_1 = require('@angular/core');
var http_1 = require("@angular/http");
var Observable_1 = require('rxjs/Observable');
// RXJS Imports
require('rxjs/observable/of');
require('rxjs/add/operator/share');
require('rxjs/add/operator/map');
var BrandingService = (function () {
    // Constructor
    function BrandingService(http) {
        this.http = http;
        // Variables
        this.data = null;
        this.headers = new http_1.Headers({ "Content-Type": "application/json" });
        // Returns the current URL being used by the service
        this.getCurrentUrl = function () {
            return this.url || false;
        };
    }
    // Returns data
    BrandingService.prototype.getData = function (url) {
        var _this = this;
        // If we already have data
        if (this.data) {
            // Return the data
            return Observable_1.Observable.of(this.
                data);
        }
        else if (this.observable) {
            // Otherwise if we have an observable, return it
            return this.observable;
        }
        else {
            // // If there is a url provided
            if (url || this.url) {
                // Get the url to be used
                this.url = url || this.url;
                // Otherwise get the data
                this.observable = this.http.get(this.url, { headers: this.headers })
                    .map(function (response) {
                    // Clear the observable
                    _this.observable = null;
                    // If the call failed
                    if (response.status == 400) {
                        // Return false
                        return false;
                    }
                    else if (response.status == 200) {
                        // Otherwise set the data
                        _this.data = response.json().data;
                        // And return the response
                        return _this.data;
                    }
                })
                    .share();
            }
            // Return the observable to be subscribed to
            return this.observable;
        }
    };
    BrandingService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http])
    ], BrandingService);
    return BrandingService;
}());
exports.BrandingService = BrandingService;
//# sourceMappingURL=branding.service.js.map