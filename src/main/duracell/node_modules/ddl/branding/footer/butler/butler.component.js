"use strict";
var core_1 = require('@angular/core');
var utils_class_1 = require("../../utils.class");
/**
 * @Component: Footer Butler Bar
 * @Section: Navigation
 * @Description: This component generates the butler bar (logo and social links) in the footer.
 */
var FooterButlerBarComponent = (function () {
    function FooterButlerBarComponent(utils) {
        this.utils = utils;
        this.onShowChange = function () {
            console.log("Bob");
        };
        // This variable defines which modals should be shown
        this.showModal = [];
        // This function takes the BrandingConfig object and translates it to config DOM
        // This step is not necessary, but keeps the DOM markup semantic and un-bloated
        // and keeps most of the logic in the controller instead of the view
        this.setButlerConfig = function (_config) {
            // Set up config object to temporarily hold our calculated values
            var butlerConfig = {};
            // If there is a valid config and a footer object is defined
            if (_config && _config.footer) {
                // If the butler bar should be shown
                if (_config.footer.butler
                    && _config.footer.butler.show) {
                    // Set the butler bar to show
                    butlerConfig.showButlerBar = true;
                    // If the config contains a logo object and it should be shown
                    if (_config.footer.butler.logo
                        && _config.footer.butler.logo.show
                        && this.utils.isValidString(_config.footer.butler.logo.url)) {
                        // Set the logo to show
                        butlerConfig.showLogo = true;
                        // And provide the url for the logo
                        butlerConfig.logoUrl = _config.footer.butler.logo.url;
                    }
                    // If the config contains a social object and it should be shown
                    if (_config.footer.butler.social && _config.footer.butler.social.show) {
                        // If there is a valid facebook, twitter, or youtube object
                        if (this.utils.hasValidSocialObject(_config.footer.butler.social)) {
                            // Get the keys so we can loop over the object
                            var socialKeys = Object.keys(_config.footer.butler.social);
                            // Loop over the object
                            for (var i = 0, j = socialKeys.length; i < j; i++) {
                                // Get a reference to the social object
                                var socialObject = _config.footer.butler.social[socialKeys[i]];
                                // If it is a valid social object
                                if (this.utils.isValidSocialObject(socialObject)) {
                                    // If there is no socialLinks array, add one
                                    !butlerConfig.socialLinks ? butlerConfig.socialLinks = [] : false;
                                    // Create a reference to a new social object using the old one
                                    var _socialObject = socialObject;
                                    // Remove show since we don't need it
                                    delete socialObject.show;
                                    // Add the name
                                    socialObject.name = socialKeys[i];
                                    // Push it to the array of social links
                                    butlerConfig.socialLinks.push(_socialObject);
                                }
                            }
                        }
                    }
                }
                // Set the config for use by the dom (DOM will not show until this is set);
                this.config = butlerConfig;
            }
        };
    }
    ;
    Object.defineProperty(FooterButlerBarComponent.prototype, "brandingConfig", {
        /**
       * @Property: brandingConfig
       * @Description: This is a reference to the branding config JSON object retrieved from the branding API.
       * @Type: String
       */
        set: function (_config) {
            if (_config) {
                this.setButlerConfig(_config);
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], FooterButlerBarComponent.prototype, "brandingConfig", null);
    FooterButlerBarComponent = __decorate([
        core_1.Component({
            selector: 'citi-footer-butler-bar',
            template: require('./butler.component.html'),
            styles: [require("./butler.component.scss").toString()],
            providers: [utils_class_1.Utils]
        }), 
        __metadata('design:paramtypes', [utils_class_1.Utils])
    ], FooterButlerBarComponent);
    return FooterButlerBarComponent;
}());
exports.FooterButlerBarComponent = FooterButlerBarComponent;
//# sourceMappingURL=butler.component.js.map