"use strict";
var core_1 = require('@angular/core');
var cta_component_settings_1 = require("./cta.component.settings");
/**
 * @Component: Click to Action
 * @Section: ButtonsLinksLists
 * @Description: This component generates citi related click to actions like links, buttons, and their
 * various states.
 */
var CTAComponent = (function () {
    function CTAComponent() {
        var _this = this;
        // CTASettings object to hold the settings for the CTA
        this.settings = new cta_component_settings_1.CTASettings;
        // Classes for buttons
        this.buttonClasses = {
            "primary": "btn btn-primary",
            "secondary": "chevron-link",
            "tertiary": "btn btn-link",
            "icon": "btn-link btn-icon",
            "arrowRight": "arrow-btn next",
            "arrowLeft": "arrow-btn prev",
            "large": "large",
            "small": "small",
            "bold": "bold",
            "disabled": "disabled"
        };
        // Sets the CTASetting values with DDL compliance checking
        this.updateSettings = function (_settings) {
            //////////////////
            // BUTTON VALUE //
            //////////////////
            if ("value" in _settings) {
                // Set the value of the button
                _this.settings.value = _settings.value;
            }
            ////////////////////
            // DISABLED STATE //
            ////////////////////
            if ('disabled' in _settings) {
                // If there is no arrow defined
                // DDL: Buttons with arrows cannot be disabled
                if (!_this.settings.hasArrow) {
                    // If the button type is primary
                    // DDL: Only primary buttons can be disabled
                    if (_this.settings.type.match("primary")) {
                        // Set the button to the passed value
                        _this.settings.disabled = _settings.disabled;
                    }
                    else {
                        if (_this.settings.isDisabled) {
                            // Otherwise enable the button
                            _this.settings.disabled = "";
                            // Timeout allows change cycle to complete before setting new value
                            setTimeout(function () {
                                // Let the parent component know it is enabled
                                _this.disabledChange.emit(false);
                            }, 0);
                            // Let the developer know why the button was not disabled
                            if (core_1.isDevMode) {
                                console.error("Only primary buttons can be disabled");
                            }
                        }
                    }
                }
                else {
                    if (_this.settings.isDisabled) {
                        // Otherwise enable the button
                        _this.settings.disabled = "";
                        // Timeout allows change cycle to complete before setting new value
                        setTimeout(function () {
                            // Let the parent component know it is enabled
                            _this.disabledChange.emit(false);
                        }, 0);
                        // Let the developer know why the button was not disabled
                        if (core_1.isDevMode) {
                            console.error("Buttons with arrows cannot be disabled");
                        }
                    }
                }
            }
            /////////////////
            // BUTTON TYPE //
            /////////////////
            if ("type" in _settings) {
                if (_settings.type === "primary") {
                    _this.settings.type = _this.buttonClasses.primary;
                }
                else if (_settings.type === "secondary") {
                    _this.settings.type = _this.buttonClasses.secondary;
                }
                else if (_settings.type == "tertiary") {
                    _this.settings.type = _this.buttonClasses.tertiary;
                }
                else if (_settings.type == "icon") {
                    _this.settings.type = _this.buttonClasses.icon;
                }
                else {
                    console.error("Valid button types are primary, secondary, tertiary, and icon");
                }
            }
            /////////////////
            // BUTTON SIZE //
            /////////////////
            if ("size" in _settings) {
                // If the button size is primary
                if (_this.settings.type.match("primary")) {
                    // If there is no arrow, or there is an arrow and the size is not small
                    if (!_this.settings.arrow || _this.settings.arrow && _settings.size !== "small") {
                        // Set the size
                        _this.settings.size = _settings.size;
                    }
                    else {
                        // Otherwise if the dev mode is enabled
                        if (core_1.isDevMode) {
                            // Let the user know they cant do that
                            console.error("Small button size cannot be used in conjunction with button arrow");
                        }
                    }
                }
                else {
                    console.error("Button sizes can only be applied to primary button");
                }
            }
            ///////////////////////
            // BUTTON ARROW TYPE //
            ///////////////////////
            if ("arrow" in _settings) {
                // If the cta type is primary
                if (_this.settings.type.match("primary")) {
                    // If the button size is not small
                    if (_this.settings.size !== "small") {
                        // Set the arrow property
                        if (_settings.arrow == "left") {
                            _this.settings.arrow = _this.buttonClasses.arrowLeft;
                            console.log(_this.settings.arrow);
                        }
                        else if (_settings.arrow == "right") {
                            _this.settings.arrow = _this.buttonClasses.arrowRight;
                        }
                    }
                    else {
                        // Otherwise if dev mode is enabled
                        if (core_1.isDevMode) {
                            // Let the user know they cant do that
                            console.error("Arrows cannot be added to a small size button");
                        }
                    }
                }
                else {
                    // Otherwise if dev mode is enabled
                    if (core_1.isDevMode) {
                        // Tell the user they cant do that
                        console.error("Arrows can only be added to primary buttons");
                    }
                }
            }
            ///////////////////
            // BUTTON TARGET //
            ///////////////////
            if ("target" in _settings) {
                // Set the target
                _this.settings.target = _settings.target;
            }
        };
        this.disabledChange = new core_1.EventEmitter();
    }
    Object.defineProperty(CTAComponent.prototype, "bold", {
        /**
         * @Property: bold
         * @Description: Makes the CTA bold.
         * @Type: Empty Attribute
         */
        set: function (bold) {
            this.settings.bold = "bold";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTAComponent.prototype, "target", {
        /**
         * @Property: target
         * @Description: The value of the target attribute for the CTA.
         * @Type: String
         */
        set: function (target) {
            if (typeof target !== "undefined") {
                this.settings.target = target;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTAComponent.prototype, "href", {
        /**
         * @Property: href
         * @Description: The value of the href attribute for the CTA.
         * @Type: String
         */
        set: function (href) {
            if (typeof href !== "undefined") {
                this.settings.href = href;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTAComponent.prototype, "value", {
        /**
         * @Property: value
         * @Description: The text value of the CTA.
         * @Type: String
         */
        set: function (value) {
            // If the value is defined
            if (typeof value !== "undefined") {
                this.updateSettings({ "value": value });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTAComponent.prototype, "disabled", {
        /**
         * @Property: disabled
         * @Description: Shows the disabled state of the CTA
         * @Type: Boolean
         * @Two-way: true
         */
        set: function (disabled) {
            // If disabled is defined
            if (typeof disabled !== "undefined") {
                if (disabled === "true" || disabled === true) {
                    this.settings.isDisabled = true;
                    this.updateSettings({ "disabled": "disabled" });
                }
                else if (disabled === "false" || disabled === false) {
                    this.settings.isDisabled = false;
                    this.updateSettings({ "disabled": "" });
                }
                ;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTAComponent.prototype, "type", {
        /**
         * @Property: type
         * @Description: Determines the type of CTA to be displayed.  Valid options include
         * primary, secondary, tertiary, or icon.
         * @Type: String
         */
        set: function (type) {
            // If the type is defined
            if (typeof type !== "undefined") {
                this.updateSettings({ "type": type });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTAComponent.prototype, "size", {
        /**
         * @Property: size
         * @Description: Determines the size of CTA to be displayed.  Valid options include
         * large and small.  Can only be applied to primary buttons.
         * @Type: String
         */
        set: function (size) {
            // If the sizes is defined
            if (typeof size !== "undefined") {
                this.updateSettings({ "size": size });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTAComponent.prototype, "arrow", {
        /**
         * @Property: arrow
         * @Description: Determines whether the CTA should have an arrow or not.  Valid options
         * include left or right.  Arrows can only be given to primary buttons and buttons that are not small.
         * @Type: String
         */
        set: function (arrow) {
            // If arrow is defined
            if (typeof arrow !== "undefined") {
                this.settings.hasArrow = true;
                this.updateSettings({ "arrow": arrow });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CTAComponent.prototype, "buttonType", {
        /**
         * @Property: buttonType
         * @Description: This is the type property for the button
         * @Type: String
         */
        set: function (type) {
            if (typeof type !== "undefined") {
                this.settings.buttonType = type;
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.ViewChild("button"), 
        __metadata('design:type', core_1.ElementRef)
    ], CTAComponent.prototype, "button", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], CTAComponent.prototype, "bold", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], CTAComponent.prototype, "target", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], CTAComponent.prototype, "href", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], CTAComponent.prototype, "value", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], CTAComponent.prototype, "disabled", null);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], CTAComponent.prototype, "disabledChange", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], CTAComponent.prototype, "type", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], CTAComponent.prototype, "size", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], CTAComponent.prototype, "arrow", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], CTAComponent.prototype, "buttonType", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], CTAComponent.prototype, "routerLink", void 0);
    CTAComponent = __decorate([
        core_1.Component({
            selector: 'citi-cta',
            template: require('./cta.component.html')
        }), 
        __metadata('design:paramtypes', [])
    ], CTAComponent);
    return CTAComponent;
}());
exports.CTAComponent = CTAComponent;
//# sourceMappingURL=cta.component.js.map