"use strict";
var core_1 = require('@angular/core');
var modal_component_settings_1 = require("./modal.component.settings");
/**
 * @Component: Modal
 * @Description: This component generates a modal
 */
var ModalComponent = (function () {
    function ModalComponent() {
        // Settings Object
        this.settings = new modal_component_settings_1.ModalSettings;
        // Function to open/close modal
        this.toggleModal = function (show) {
            var _this = this;
            // If the modal should be shown
            if (show === true) {
                // Create a reference to the button that opened the modal
                this.openButton = document.activeElement;
                // Take display:none off the modal
                this.settings.hideModal = false;
                // Wait for hideModal to be set
                setTimeout(function () {
                    // Fade in the modal
                    _this.settings.showModal = true;
                    // Focus modal container
                    _this.modal.nativeElement.focus();
                    // Let the parent component know the module is open
                    // This is technically redundant since only the parent can
                    // set this in the first place, but you know, semantics
                    _this.showChange.emit(true);
                }, 0);
            }
            else {
                // Otherwise fade out the modal
                this.settings.showModal = false;
                // Wait for the modal to fade out
                // The delay should match the CSS transition speed
                setTimeout(function () {
                    // Set display: none on the modal
                    _this.settings.hideModal = true;
                    // Let the parent know the modal is closed
                    _this.showChange.emit(false);
                    // Focus the button that originally opened the modal
                    _this.openButton.focus();
                }, 150);
            }
        };
        this.showChange = new core_1.EventEmitter();
    }
    // The OnInit function handles capturing tab order
    ModalComponent.prototype.ngOnInit = function () {
        var _this = this;
        // Wait for the lifecycle to finish
        setTimeout(function () {
            // Listen for keydown events on the modal
            _this.modal.nativeElement.addEventListener("keydown", function (e) {
                // If the key pressed was the tab button
                if (e.keyCode === 9 && !e.shiftKey) {
                    // If the currently active element is the last button
                    if (_this.secondaryButton.button.nativeElement && document.activeElement == _this.secondaryButton.button.nativeElement
                        ||
                            !_this.secondaryButton.button.nativeElement && document.activeElement == _this.primaryButton.button.nativeElement) {
                        // Prevent default action
                        e.preventDefault();
                        // Put focus on the close button
                        _this.closeButton.nativeElement.focus();
                    }
                }
                else if (e.keyCode === 9 && e.shiftKey === true) {
                    // If the key pressed was shift+tab
                    // And the currently active button is the close button
                    if (document.activeElement == _this.closeButton.nativeElement) {
                        // Prevent Default
                        e.preventDefault();
                        // Focus the last button
                        if (_this.secondaryButton.button.nativeElement) {
                            _this.secondaryButton.button.nativeElement.focus();
                        }
                        else {
                            _this.primaryButton.button.nativeElement.focus();
                        }
                    }
                }
            });
        }, 0);
    };
    Object.defineProperty(ModalComponent.prototype, "show", {
        /**
         * @Property: show
         * @Description: Whether the modal should be open or not
         * @Type: boolean
         */
        set: function (_show) {
            // If _show is defined
            if (typeof _show !== "undefined") {
                // Use the value to toggle the modal
                this.toggleModal(_show);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "title", {
        /**
         * @Property: title
         * @Description: the title text for the modal
         * @Type: string
         */
        set: function (title) {
            if (typeof title === "string") {
                this.settings.title = title;
            }
            else {
                console.error("The value passed to title should be a string");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "primaryButtonUrl", {
        /**
         * @Property: primaryButtonUrl
         * @Description: The url for the primary button
         * @Type: string
         */
        set: function (url) {
            if (typeof url === "string") {
                this.settings.primaryButtonUrl = url;
            }
            else {
                console.error("The value passed to primaryButtonUrl should be a string");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "primaryButtonTarget", {
        /**
         * @Property: primaryButtonTarget
         * @Description: The target for the primary button
         * @Type: string
         */
        set: function (target) {
            if (target === "_blank" || target === "_self") {
                this.settings.primaryButtonTarget = target;
            }
            else {
                console.error("The value passed to primaryButtonTarget should be either '_blank' or '_self'");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "primaryButtonText", {
        /**
         * @Property: primaryButtonText
         * @Description: The value (display text) of the primary button
         * @Type: string
         */
        set: function (text) {
            if (typeof text === "string") {
                this.settings.primaryButtonText = text;
            }
            else {
                console.error("The value passed to primaryButtonText should be a string");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "showCancelButton", {
        /**
         * @Property: showCancelButton
         * @Description: Whether or not the cancel button should be shown
         * @Type: boolean
         */
        set: function (show) {
            if (show === "true") {
                this.settings.showCancelButton = true;
            }
            else if (show === "false") {
                this.settings.showCancelButton = false;
            }
            else if (typeof show === "boolean") {
                this.settings.showCancelButton = show;
            }
            else
                [
                    console.error("The value passed to showCancelButton should be a boolean")
                ];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "cancelButtonText", {
        /**
         * @Property: cancelButtonText
         * @Description: The value (display text) for the cancel button
         * @Type: string
         */
        set: function (text) {
            if (typeof text === "string") {
                this.settings.cancelButtonText = text;
            }
            else {
                console.error("the value passsed to cancelButtonText should be a string");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModalComponent.prototype, "primaryButtonClick", {
        /**
         * @Property: primaryButtonClick
         * @Description: A callback function for when the primary button is cleaned.
         * Call like ([primaryButtonClick]="myFunction").
         * Do not add parenthesis.
         * @Type: string
         */
        set: function (onClick) {
            var _this = this;
            setTimeout(function () {
                _this.primaryButton.button.nativeElement.addEventListener("click", function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    onClick();
                });
            }, 0);
        },
        enumerable: true,
        configurable: true
    });
    ModalComponent.prototype.onEscape = function (event) {
        if (this.settings.showModal && event.key === "Escape") {
            this.toggleModal(false);
        }
    };
    __decorate([
        core_1.ViewChild("modal"), 
        __metadata('design:type', core_1.ElementRef)
    ], ModalComponent.prototype, "modal", void 0);
    __decorate([
        core_1.ViewChild("closeButton"), 
        __metadata('design:type', core_1.ElementRef)
    ], ModalComponent.prototype, "closeButton", void 0);
    __decorate([
        core_1.ViewChild("primaryButton"), 
        __metadata('design:type', Object)
    ], ModalComponent.prototype, "primaryButton", void 0);
    __decorate([
        core_1.ViewChild("secondaryButton"), 
        __metadata('design:type', Object)
    ], ModalComponent.prototype, "secondaryButton", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], ModalComponent.prototype, "show", null);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', Object)
    ], ModalComponent.prototype, "showChange", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], ModalComponent.prototype, "title", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], ModalComponent.prototype, "primaryButtonUrl", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], ModalComponent.prototype, "primaryButtonTarget", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], ModalComponent.prototype, "primaryButtonText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], ModalComponent.prototype, "showCancelButton", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], ModalComponent.prototype, "cancelButtonText", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Function])
    ], ModalComponent.prototype, "primaryButtonClick", null);
    __decorate([
        core_1.HostListener('window:keydown', ["$event"]), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Object]), 
        __metadata('design:returntype', void 0)
    ], ModalComponent.prototype, "onEscape", null);
    ModalComponent = __decorate([
        core_1.Component({
            selector: 'citi-modal',
            template: require('./modal.component.html'),
            styles: [require("./modal.component.scss")]
        }), 
        __metadata('design:paramtypes', [])
    ], ModalComponent);
    return ModalComponent;
}());
exports.ModalComponent = ModalComponent;
//# sourceMappingURL=modal.component.js.map