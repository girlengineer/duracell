import { OnInit, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
/**
 * @Component: ComparisonTableComponent
 * @Section: Modules
 * @Description: Component for rendering a comparison table of a list of items
 * with various features or characteristics
 */
export declare class ComparisonTableComponent implements OnInit {
    private _data;
    private _options;
    private _isDesktopWidth;
    private _isProcessing;
    private _loadingMessage;
    private _emptyMessage;
    private _optionUrl;
    /**
     * @Event: onListItemClick
     * @Description: Emitted when an row header is clicked
     * @Return: Object
     */
    onListItemClick: EventEmitter<any>;
    /**
     * @Event: onAllItemClick
     * @Description: This event that is fired when the menu is clicked. The event is returned.
     * @Return: Array
     */
    onAllItemClick: EventEmitter<Array<any>>;
    /**
      * @Function: emptyMessage
      * @Description: Gets the message when there is no data in the table
      * @Return: Void
    */
    /**
     * @Property: emptyMessage
     * @Description: Sets the message when there is no data in the table
     * @Type: string
     */
    emptyMessage: string;
    /**
     * @Property: isDesktopWidth
     * @Description: Gets the flag indicating the table is rendered in a viewport whose width is greater 768 pixels
     * @Type: boolean
     */
    /**
     * @Property: isDesktopWidth
     * @Description: Sets the flag indicating the table is rendered in a viewport whose width is greater 768 pixels
     * @Type: boolean
     */
    isDesktopWidth: boolean;
    /**
     * @Property: options
     * @Description: Gets the current options of the table
     * @Type: boolean
     */
    /**
     * @Property: options
     * @Description: Sets options for the table
     * @Type: Object
     */
    options: any;
    /**
     * @Property: caption
     * @Description: Gets the current options of the table
     * @Type: String
     */
    /**
     * @Property: caption
     * @Description: Sets caption for the table
     * @Type: string
     */
    caption: string;
    /**
     * @Property: data
     * @Description: Gets the list of items
     * @Type: Array
     */
    /**
     * @Property: data
     * @Description: Sets new list of items
     * @Type: Object
     */
    data: any[];
    /**
     * @Property: hasData
     * @Description: Checks if the table has some data
     * @Type: Boolean
     */
    readonly hasData: boolean;
    /**
     * @Property: isProcessing
     * @Description: Checks if the table is loading data
     * @Type: Boolean
     */
    readonly isProcessing: boolean;
    /**
     * @Property: AllItemExpanded
     * @Description: Checks if all items in the table is being expanded
     * @Type: Boolean
     */
    readonly allItemExpanded: boolean;
    /**
     * @Property: loadingMessage
     * @Description: Gets the message being displayed when the table is loading data
     * @Type: Boolean
     */
    /**
     * @Property: loadingMessage
     * @Description: Sets the message being displayed when the table is loading data
     * @Type: Boolean
     */
    loadingMessage: string;
    constructor();
    ngOnInit(): void;
    private onResize(event);
    /**
     * @Function: onItemClick
     * @Description: Handles the item click event
     * @Param: (Object) - item - Clicked item.
     * @Return: void
     */
    private onItemClick(item);
    /**
     * @Function: onAllItemButtonClick
     * @Description: Handles all item expanding/collapsing button clicked
     * @Return: void
     */
    private onAllItemButtonClick(event);
    /**
     * @Function: showProcessingIndicator
     * @Description: The function displays the processing indicator with 'loadingMessage'
     * @Return: void
     */
    showProcessingIndicator(): void;
    /**
     * @Function: hideProcessingIndicator
     * @Description: The function hides the processing indicator
     * @Return: void
     */
    hideProcessingIndicator(): void;
    /**
     * @Function: subscribeToObservable
     * @Description: Subscribes to a user-defined observable. All callback are called with the progress indicator as
     * the context
     * @Param: (Observable) - observer - Observable provided by developer, should return a string as parameter
     * @Param: (Function) - onNext - Callback for 'Next' event
     * @Param: (Function) - onError - Callback for 'Error' event
     * @Param: (Function) - onComplete - Callback for 'Complete' event
     * @Return: void
     */
    subscribeToObservable(observer: Observable<Object>, onNext: Function, onError?: Function, onComplete?: Function): any;
}
