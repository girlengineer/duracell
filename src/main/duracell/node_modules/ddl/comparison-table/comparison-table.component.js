"use strict";
var core_1 = require('@angular/core');
var utility_classes_1 = require('../utility/utility.classes');
var rxjs_1 = require('rxjs');
/**
 * @Component: ComparisonTableComponent
 * @Section: Modules
 * @Description: Component for rendering a comparison table of a list of items
 * with various features or characteristics
 */
var ComparisonTableComponent = (function () {
    function ComparisonTableComponent() {
        this._isProcessing = false;
        this._loadingMessage = '';
        this._emptyMessage = '';
        this._optionUrl = '';
        /**
         * @Event: onListItemClick
         * @Description: Emitted when an row header is clicked
         * @Return: Object
         */
        this.onListItemClick = new core_1.EventEmitter();
        /**
         * @Event: onAllItemClick
         * @Description: This event that is fired when the menu is clicked. The event is returned.
         * @Return: Array
         */
        this.onAllItemClick = new core_1.EventEmitter();
    }
    Object.defineProperty(ComparisonTableComponent.prototype, "emptyMessage", {
        /**
          * @Function: emptyMessage
          * @Description: Gets the message when there is no data in the table
          * @Return: Void
        */
        get: function () {
            if (this._emptyMessage !== undefined && this._emptyMessage !== '') {
                return this._emptyMessage;
            }
            return 'No data provided';
        },
        /**
         * @Property: emptyMessage
         * @Description: Sets the message when there is no data in the table
         * @Type: string
         */
        set: function (newMessage) {
            this._emptyMessage = newMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComparisonTableComponent.prototype, "isDesktopWidth", {
        /**
         * @Property: isDesktopWidth
         * @Description: Gets the flag indicating the table is rendered in a viewport whose width is greater 768 pixels
         * @Type: boolean
         */
        get: function () {
            return this._isDesktopWidth;
        },
        /**
         * @Property: isDesktopWidth
         * @Description: Sets the flag indicating the table is rendered in a viewport whose width is greater 768 pixels
         * @Type: boolean
         */
        set: function (value) {
            this._isDesktopWidth = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComparisonTableComponent.prototype, "options", {
        /**
         * @Property: options
         * @Description: Gets the current options of the table
         * @Type: boolean
         */
        get: function () {
            return JSON.parse(JSON.stringify(this._options));
        },
        /**
         * @Property: options
         * @Description: Sets options for the table
         * @Type: Object
         */
        set: function (newOptions) {
            if (newOptions !== undefined) {
                this._options = JSON.parse(JSON.stringify(newOptions));
                if (this.options.hasOwnProperty('list')) {
                    this.data = this.options.list.items;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComparisonTableComponent.prototype, "caption", {
        /**
         * @Property: caption
         * @Description: Gets the current options of the table
         * @Type: String
         */
        get: function () {
            return this._options.caption;
        },
        /**
         * @Property: caption
         * @Description: Sets caption for the table
         * @Type: string
         */
        set: function (newCaption) {
            this._options.caption = newCaption;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComparisonTableComponent.prototype, "data", {
        /**
         * @Property: data
         * @Description: Gets the list of items
         * @Type: Array
         */
        get: function () {
            return this._data.slice(0);
        },
        /**
         * @Property: data
         * @Description: Sets new list of items
         * @Type: Object
         */
        set: function (newData) {
            if (utility_classes_1.JavascriptMethods.isArray(newData)) {
                this._data = newData.slice(0);
            }
            else {
                console.warn('Provided data is not an array');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComparisonTableComponent.prototype, "hasData", {
        /**
         * @Property: hasData
         * @Description: Checks if the table has some data
         * @Type: Boolean
         */
        get: function () {
            return utility_classes_1.JavascriptMethods.isArray(this._data) && this._data.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComparisonTableComponent.prototype, "isProcessing", {
        /**
         * @Property: isProcessing
         * @Description: Checks if the table is loading data
         * @Type: Boolean
         */
        get: function () {
            return this._isProcessing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComparisonTableComponent.prototype, "allItemExpanded", {
        /**
         * @Property: AllItemExpanded
         * @Description: Checks if all items in the table is being expanded
         * @Type: Boolean
         */
        get: function () {
            for (var _i = 0, _a = this._options.displayedKeys; _i < _a.length; _i++) {
                var listItem = _a[_i];
                if (listItem.expanded === false) {
                    return false;
                }
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComparisonTableComponent.prototype, "loadingMessage", {
        /**
         * @Property: loadingMessage
         * @Description: Gets the message being displayed when the table is loading data
         * @Type: Boolean
         */
        get: function () {
            if (this._loadingMessage !== undefined && this._loadingMessage !== '') {
                return this._loadingMessage;
            }
            return 'Loading data ...';
        },
        /**
         * @Property: loadingMessage
         * @Description: Sets the message being displayed when the table is loading data
         * @Type: Boolean
         */
        set: function (message) {
            if (message !== '') {
                this._loadingMessage = message;
            }
        },
        enumerable: true,
        configurable: true
    });
    ComparisonTableComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.onResize(null);
        rxjs_1.Observable.fromEvent(window, 'resize')
            .debounceTime(500)
            .subscribe(function (e) {
            _this.onResize(e);
        });
    };
    ComparisonTableComponent.prototype.onResize = function (event) {
        this.isDesktopWidth = document.body.clientWidth > 768;
    };
    /**
     * @Function: onItemClick
     * @Description: Handles the item click event
     * @Param: (Object) - item - Clicked item.
     * @Return: void
     */
    ComparisonTableComponent.prototype.onItemClick = function (item) {
        var selectedItem = null;
        for (var _i = 0, _a = this._options.displayedKeys; _i < _a.length; _i++) {
            var listItem = _a[_i];
            if (listItem.key === item.key) {
                listItem.expanded = !listItem.expanded;
                selectedItem = JSON.parse(JSON.stringify(listItem));
                break;
            }
        }
        this.onListItemClick.emit(selectedItem);
    };
    /**
     * @Function: onAllItemButtonClick
     * @Description: Handles all item expanding/collapsing button clicked
     * @Return: void
     */
    ComparisonTableComponent.prototype.onAllItemButtonClick = function (event) {
        for (var _i = 0, _a = this._options.displayedKeys; _i < _a.length; _i++) {
            var listItem = _a[_i];
            listItem.expanded = !this.allItemExpanded;
        }
        this.onAllItemClick.emit(this.data);
    };
    /**
     * @Function: showProcessingIndicator
     * @Description: The function displays the processing indicator with 'loadingMessage'
     * @Return: void
     */
    ComparisonTableComponent.prototype.showProcessingIndicator = function () {
        this._isProcessing = true;
    };
    /**
     * @Function: hideProcessingIndicator
     * @Description: The function hides the processing indicator
     * @Return: void
     */
    ComparisonTableComponent.prototype.hideProcessingIndicator = function () {
        this._isProcessing = false;
    };
    /**
     * @Function: subscribeToObservable
     * @Description: Subscribes to a user-defined observable. All callback are called with the progress indicator as
     * the context
     * @Param: (Observable) - observer - Observable provided by developer, should return a string as parameter
     * @Param: (Function) - onNext - Callback for 'Next' event
     * @Param: (Function) - onError - Callback for 'Error' event
     * @Param: (Function) - onComplete - Callback for 'Complete' event
     * @Return: void
     */
    ComparisonTableComponent.prototype.subscribeToObservable = function (observer, onNext, onError, onComplete) {
        var functionArray = [];
        if (typeof onNext === 'function') {
            functionArray.push(onNext.bind(this));
        }
        else {
            functionArray.push(null);
        }
        if (typeof onError === 'function') {
            functionArray.push(onError.bind(this));
        }
        else {
            functionArray.push(null);
        }
        if (typeof onComplete === 'function') {
            functionArray.push(onComplete.bind(this));
        }
        else {
            functionArray.push(null);
        }
        return observer.subscribe.apply(observer, functionArray);
    };
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], ComparisonTableComponent.prototype, "onListItemClick", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], ComparisonTableComponent.prototype, "onAllItemClick", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], ComparisonTableComponent.prototype, "emptyMessage", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean), 
        __metadata('design:paramtypes', [Boolean])
    ], ComparisonTableComponent.prototype, "isDesktopWidth", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], ComparisonTableComponent.prototype, "options", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], ComparisonTableComponent.prototype, "caption", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object), 
        __metadata('design:paramtypes', [Object])
    ], ComparisonTableComponent.prototype, "data", null);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String), 
        __metadata('design:paramtypes', [String])
    ], ComparisonTableComponent.prototype, "loadingMessage", null);
    ComparisonTableComponent = __decorate([
        core_1.Component({
            selector: 'citi-comparison-table',
            template: require('./comparison-table.component.html'),
            styles: [require('./comparison-table.component.css')]
        }), 
        __metadata('design:paramtypes', [])
    ], ComparisonTableComponent);
    return ComparisonTableComponent;
}());
exports.ComparisonTableComponent = ComparisonTableComponent;
//# sourceMappingURL=comparison-table.component.js.map