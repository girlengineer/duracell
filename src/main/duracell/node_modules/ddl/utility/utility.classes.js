"use strict";
var createNumberMask_js_1 = require('text-mask-addons/dist/createNumberMask.js');
var InputSizeCss = (function () {
    function InputSizeCss() {
    }
    Object.defineProperty(InputSizeCss, "FullBody", {
        get: function () { return 'col-lg-12 col-md-12 col-sm-12 col-xs-12 '; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSizeCss, "Large", {
        get: function () { return 'col-md-8 col-sm-12 '; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSizeCss, "Medium", {
        get: function () { return 'col-md-6 col-sm-9 col-xs-12 '; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSizeCss, "Small", {
        get: function () { return 'col-md-4 col-sm-6 col-xs-12 '; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSizeCss, "Success", {
        get: function () { return 'validation-input-success '; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSizeCss, "InputGroup", {
        get: function () { return 'input-group '; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSizeCss, "InputGroupFocus", {
        get: function () { return 'focus-group '; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSizeCss, "TextRight", {
        get: function () { return 'text-right '; },
        enumerable: true,
        configurable: true
    });
    return InputSizeCss;
}());
exports.InputSizeCss = InputSizeCss;
var InputSize = (function () {
    function InputSize() {
    }
    Object.defineProperty(InputSize, "FullBody", {
        get: function () { return 'fullBody'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSize, "Large", {
        get: function () { return 'large'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSize, "Medium", {
        get: function () { return 'medium'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSize, "Small", {
        get: function () { return 'small'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSize, "XSmall", {
        get: function () { return 'xsmall'; },
        enumerable: true,
        configurable: true
    });
    return InputSize;
}());
exports.InputSize = InputSize;
var InputOffsetCss = (function () {
    function InputOffsetCss() {
    }
    Object.defineProperty(InputOffsetCss, "Large", {
        get: function () { return 'col-lg-offset-'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputOffsetCss, "Medium", {
        get: function () { return 'col-md-offset-'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputOffsetCss, "Small", {
        get: function () { return 'col-sm-offset-'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputOffsetCss, "XSmall", {
        get: function () { return 'col-xs-offset-'; },
        enumerable: true,
        configurable: true
    });
    return InputOffsetCss;
}());
exports.InputOffsetCss = InputOffsetCss;
var MaskTypes = (function () {
    function MaskTypes() {
    }
    Object.defineProperty(MaskTypes, "phoneMask", {
        get: function () { return ['(', /[1-9]/, /\d/, /\d/, ')', ' ', /\d/, /\d/, /\d/, '-', /\d/, /\d/, /\d/, /\d/]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskTypes, "dateMask", {
        get: function () { return [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskTypes, "zipcodeMask", {
        get: function () { return [/[1-9]/, /\d/, /\d/, /\d/, /\d/]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskTypes, "ssnMask", {
        get: function () { return [/\d/, /\d/, /\d/, "-", /\d/, /\d/, "-", /\d/, /\d/, /\d/, /\d/]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskTypes, "dollarMask", {
        get: function () {
            return createNumberMask_js_1.default({
                allowDecimal: true
            });
        },
        enumerable: true,
        configurable: true
    });
    return MaskTypes;
}());
exports.MaskTypes = MaskTypes;
function createSSNPipe(conformedValue, config) {
    var newString = '';
    for (var i = 0; i < conformedValue.length; i++) {
        if (i < 5) {
            newString += '*';
        }
        else {
            newString += conformedValue[i];
        }
    }
    return {
        newString: newString
    };
}
exports.createSSNPipe = createSSNPipe;
var JavascriptMethods = (function () {
    function JavascriptMethods() {
    }
    JavascriptMethods.closestByClass = function (el, clazz) {
        while (!el.classList.contains(clazz)) {
            el = el.parentNode;
            if (!el) {
                return null;
            }
        }
        return el;
    };
    JavascriptMethods.hasClass = function (el, className) {
        if (el.classList) {
            return el.classList.contains(className);
        }
        else {
            return !!el.className.match(new RegExp('(\\s|^)' + className + '(\\s|$)'));
        }
    };
    JavascriptMethods.addClass = function (el, className) {
        if (el.classList) {
            el.classList.add(className);
        }
        else if (!JavascriptMethods.hasClass(el, className)) {
            el.className += ' ' + className;
        }
    };
    JavascriptMethods.removeClass = function (el, className) {
        if (el.classList) {
            el.classList.remove(className);
        }
        else if (JavascriptMethods.hasClass(el, className)) {
            var reg = new RegExp('(\\s|^)' + className + '(\\s|$)');
            el.className = el.className.replace(reg, ' ');
        }
    };
    JavascriptMethods.addStyle = function (el, styleMap) {
        for (var style in styleMap) {
            el.style[style] = styleMap[style];
        }
    };
    JavascriptMethods.isInteger = function (value) {
        return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    JavascriptMethods.isString = function (value) {
        return typeof value === 'string';
    };
    JavascriptMethods.isArray = function (value) {
        return typeof value !== 'undefined' && value.constructor === Array;
    };
    JavascriptMethods.isSpecified = function (value) {
        switch (typeof value) {
            case 'number':
                return !isNaN(value);
            case 'object':
                return Object.keys(value).length !== 0;
            case 'string':
                return value.trim() !== '';
            default:
                return false;
        }
    };
    return JavascriptMethods;
}());
exports.JavascriptMethods = JavascriptMethods;
//# sourceMappingURL=utility.classes.js.map